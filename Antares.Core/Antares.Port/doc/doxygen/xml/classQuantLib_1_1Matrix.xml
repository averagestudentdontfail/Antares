<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classQuantLib_1_1Matrix" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Matrix</compoundname>
    <includes refid="matrix_8hpp" local="no">matrix.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Algebraic operators</header>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1a32b20b09f948423c3cd2ac1c2a40a8fd" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> *</type>
        <definition>typedef Real* QuantLib::Matrix::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>QuantLib::Matrix::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="81" column="22" bodyfile="ql/math/matrix.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1a2a4ff22c93fe60f21f1bbb57fe703ee8" prot="public" static="no">
        <type>const <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> *</type>
        <definition>typedef const Real* QuantLib::Matrix::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>QuantLib::Matrix::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="82" column="28" bodyfile="ql/math/matrix.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1a1b11e5c2c4450b4a56d6bca30c779400" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classQuantLib_1_1Matrix_1a32b20b09f948423c3cd2ac1c2a40a8fd" kindref="member">iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;iterator&gt; QuantLib::Matrix::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <qualifiedname>QuantLib::Matrix::reverse_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="83" column="39" bodyfile="ql/math/matrix.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1aa8a1afd1c51325c7664039348fa9ab64" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classQuantLib_1_1Matrix_1a2a4ff22c93fe60f21f1bbb57fe703ee8" kindref="member">const_iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const_iterator&gt; QuantLib::Matrix::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <qualifiedname>QuantLib::Matrix::const_reverse_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="84" column="39" bodyfile="ql/math/matrix.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1ad05c3c11c9d6fdf7c279f12ea54fbc63" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> *</type>
        <definition>typedef Real* QuantLib::Matrix::row_iterator</definition>
        <argsstring></argsstring>
        <name>row_iterator</name>
        <qualifiedname>QuantLib::Matrix::row_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="85" column="22" bodyfile="ql/math/matrix.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1a9e4cb308ca69bbffe9216e8105a38a67" prot="public" static="no">
        <type>const <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> *</type>
        <definition>typedef const Real* QuantLib::Matrix::const_row_iterator</definition>
        <argsstring></argsstring>
        <name>const_row_iterator</name>
        <qualifiedname>QuantLib::Matrix::const_row_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="86" column="28" bodyfile="ql/math/matrix.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1a4530032d031c544ae178211f034300fc" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classQuantLib_1_1Matrix_1ad05c3c11c9d6fdf7c279f12ea54fbc63" kindref="member">row_iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;row_iterator&gt; QuantLib::Matrix::reverse_row_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_row_iterator</name>
        <qualifiedname>QuantLib::Matrix::reverse_row_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="87" column="39" bodyfile="ql/math/matrix.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1a3136da9235df4b2e7fd89085c83caf23" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classQuantLib_1_1Matrix_1a9e4cb308ca69bbffe9216e8105a38a67" kindref="member">const_row_iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const_row_iterator&gt; QuantLib::Matrix::const_reverse_row_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_row_iterator</name>
        <qualifiedname>QuantLib::Matrix::const_reverse_row_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="89" column="49" bodyfile="ql/math/matrix.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1ad9456d64e6906c707fadd4672da27c8d" prot="public" static="no">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&lt; <ref refid="classQuantLib_1_1Matrix_1a32b20b09f948423c3cd2ac1c2a40a8fd" kindref="member">iterator</ref> &gt;</type>
        <definition>typedef step_iterator&lt;iterator&gt; QuantLib::Matrix::column_iterator</definition>
        <argsstring></argsstring>
        <name>column_iterator</name>
        <qualifiedname>QuantLib::Matrix::column_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="90" column="31" bodyfile="ql/math/matrix.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1a5754d03aa0d348cb8440858f6cde9310" prot="public" static="no">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&lt; <ref refid="classQuantLib_1_1Matrix_1a2a4ff22c93fe60f21f1bbb57fe703ee8" kindref="member">const_iterator</ref> &gt;</type>
        <definition>typedef step_iterator&lt;const_iterator&gt; QuantLib::Matrix::const_column_iterator</definition>
        <argsstring></argsstring>
        <name>const_column_iterator</name>
        <qualifiedname>QuantLib::Matrix::const_column_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="91" column="31" bodyfile="ql/math/matrix.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1a2f23ae3d20cdc81e5fee7e2411b28497" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classQuantLib_1_1Matrix_1ad9456d64e6906c707fadd4672da27c8d" kindref="member">column_iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;column_iterator&gt; QuantLib::Matrix::reverse_column_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_column_iterator</name>
        <qualifiedname>QuantLib::Matrix::reverse_column_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="93" column="52" bodyfile="ql/math/matrix.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1Matrix_1a125dc89fa60a753b025e93c13d8c6481" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classQuantLib_1_1Matrix_1a5754d03aa0d348cb8440858f6cde9310" kindref="member">const_column_iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const_column_iterator&gt; QuantLib::Matrix::const_reverse_column_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_column_iterator</name>
        <qualifiedname>QuantLib::Matrix::const_reverse_column_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="95" column="46" bodyfile="ql/math/matrix.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1acd174ae5e504af26ffe6c53b9fee208d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>const Matrix &amp; QuantLib::Matrix::operator+=</definition>
        <argsstring>(const Matrix &amp;)</argsstring>
        <name>operator+=</name>
        <qualifiedname>QuantLib::Matrix::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>all matrices involved in an algebraic expression must have the same size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="75" column="22" bodyfile="ql/math/matrix.hpp" bodystart="297" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a7bf76fa577dfbaf8586208533a504505" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>const Matrix &amp; QuantLib::Matrix::operator-=</definition>
        <argsstring>(const Matrix &amp;)</argsstring>
        <name>operator-=</name>
        <qualifiedname>QuantLib::Matrix::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="76" column="22" bodyfile="ql/math/matrix.hpp" bodystart="307" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a9551a645dd666828981ec80ff5ce0e20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>const Matrix &amp; QuantLib::Matrix::operator*=</definition>
        <argsstring>(Real)</argsstring>
        <name>operator*=</name>
        <qualifiedname>QuantLib::Matrix::operator*=</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="77" column="22" bodyfile="ql/math/matrix.hpp" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a150360a860e99c3158dbe6ebb4d59060" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>const Matrix &amp; QuantLib::Matrix::operator/=</definition>
        <argsstring>(Real)</argsstring>
        <name>operator/=</name>
        <qualifiedname>QuantLib::Matrix::operator/=</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="78" column="22" bodyfile="ql/math/matrix.hpp" bodystart="322" bodyend="325"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Utilities</header>
      <memberdef kind="variable" id="classQuantLib_1_1Matrix_1a95fe7a9011578a216823c95fbeb26b6b" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>[]&gt;</type>
        <definition>std::unique_ptr&lt;Real[]&gt; QuantLib::Matrix::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>QuantLib::Matrix::data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="148" column="25" bodyfile="ql/math/matrix.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQuantLib_1_1Matrix_1a65f186f35e6b4e90f07557c9cd8fb782" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Matrix::rows_</definition>
        <argsstring></argsstring>
        <name>rows_</name>
        <qualifiedname>QuantLib::Matrix::rows_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="149" column="14" bodyfile="ql/math/matrix.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQuantLib_1_1Matrix_1a23c5052c1cf3a57bf5a449e086404a8b" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Matrix::columns_</definition>
        <argsstring></argsstring>
        <name>columns_</name>
        <qualifiedname>QuantLib::Matrix::columns_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="149" column="21" bodyfile="ql/math/matrix.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1af7abd58ce86c26ee85bca2534a229a2b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Matrix::swap</definition>
        <argsstring>(Matrix &amp;) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::Matrix::swap</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <defname>from</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="145" column="14" bodyfile="ql/math/matrix.hpp" bodystart="291" bodyend="295"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors, destructor, and assignment</header>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a4807dee0afc0f073191d0e9ba9b77c27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Matrix::Matrix</definition>
        <argsstring>()</argsstring>
        <name>Matrix</name>
        <qualifiedname>QuantLib::Matrix::Matrix</qualifiedname>
        <briefdescription>
<para>creates a null matrix </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="46" column="9" bodyfile="ql/math/matrix.hpp" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ab1124204775d95bb885e6fea322e4302" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Matrix::Matrix</definition>
        <argsstring>(Size rows, Size columns)</argsstring>
        <name>Matrix</name>
        <qualifiedname>QuantLib::Matrix::Matrix</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>rows</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>columns</declname>
        </param>
        <briefdescription>
<para>creates a matrix with the given dimensions </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="48" column="9" bodyfile="ql/math/matrix.hpp" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a6cb322de4ff87ce5a483794f3ef99c89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Matrix::Matrix</definition>
        <argsstring>(Size rows, Size columns, Real value)</argsstring>
        <name>Matrix</name>
        <qualifiedname>QuantLib::Matrix::Matrix</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>rows</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>columns</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>creates the matrix and fills it with <computeroutput>value</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="50" column="9" bodyfile="ql/math/matrix.hpp" bodystart="228" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a798b3df0df0a022987aa518cc5b7b42c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>QuantLib::Matrix::Matrix</definition>
        <argsstring>(Size rows, Size columns, Iterator begin, Iterator end)</argsstring>
        <name>Matrix</name>
        <qualifiedname>QuantLib::Matrix::Matrix</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>rows</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>columns</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>creates the matrix and fills it with data from a range. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>if the range defined by [begin, end) is larger than the size of the matrix, a memory access violation might occur. It is up to the user to avoid this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="57" column="9" bodyfile="ql/math/matrix.hpp" bodystart="235" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a0fb410e6f6562b7c20c759c07fccc2e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Matrix::Matrix</definition>
        <argsstring>(const Matrix &amp;)</argsstring>
        <name>Matrix</name>
        <qualifiedname>QuantLib::Matrix::Matrix</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <defname>from</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="58" column="9" bodyfile="ql/math/matrix.hpp" bodystart="241" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a1131f44bda1499c40171384be8b9382c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Matrix::Matrix</definition>
        <argsstring>(Matrix &amp;&amp;) noexcept</argsstring>
        <name>Matrix</name>
        <qualifiedname>QuantLib::Matrix::Matrix</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <defname>from</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="59" column="9" bodyfile="ql/math/matrix.hpp" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a1078c3a8e5b638ede2c0a82fec502c46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Matrix::Matrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; Real &gt; &gt;)</argsstring>
        <name>Matrix</name>
        <qualifiedname>QuantLib::Matrix::Matrix</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
          <defname>data</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="60" column="9" bodyfile="ql/math/matrix.hpp" bodystart="255" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a7683d030aa2b17605dd7618595537056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Matrix::~Matrix</definition>
        <argsstring>()=default</argsstring>
        <name>~Matrix</name>
        <qualifiedname>QuantLib::Matrix::~Matrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="61" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ae72b2d8b76e2b6604a986ffadecaa16d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; QuantLib::Matrix::operator=</definition>
        <argsstring>(const Matrix &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>QuantLib::Matrix::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <defname>from</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="63" column="16" bodyfile="ql/math/matrix.hpp" bodystart="270" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1aa7a8e2f761cea78be0eeb8aaed1a0c45" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; QuantLib::Matrix::operator=</definition>
        <argsstring>(Matrix &amp;&amp;) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>QuantLib::Matrix::operator=</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <defname>from</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="64" column="16" bodyfile="ql/math/matrix.hpp" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1acd9d23463fa668e5268af884f379ebbe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::Matrix::operator==</definition>
        <argsstring>(const Matrix &amp;) const</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::Matrix::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <defname>to</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="66" column="14" bodyfile="ql/math/matrix.hpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a78a65f6da49fcfdfd8cb1c8446f49ddb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::Matrix::operator!=</definition>
        <argsstring>(const Matrix &amp;) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::Matrix::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <defname>to</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="67" column="14" bodyfile="ql/math/matrix.hpp" bodystart="287" bodyend="289"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Iterator access</header>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a44b6d59f4074d7a1ba1b2dc14a6abcdb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a2a4ff22c93fe60f21f1bbb57fe703ee8" kindref="member">const_iterator</ref></type>
        <definition>Matrix::const_iterator QuantLib::Matrix::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>QuantLib::Matrix::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="98" column="24" bodyfile="ql/math/matrix.hpp" bodystart="327" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a145ff0e675dd5ac08460ffa6a71fb743" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a32b20b09f948423c3cd2ac1c2a40a8fd" kindref="member">iterator</ref></type>
        <definition>Matrix::iterator QuantLib::Matrix::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>QuantLib::Matrix::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="99" column="18" bodyfile="ql/math/matrix.hpp" bodystart="331" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a8cf900b0ba813ec8a7cd399db01771b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a2a4ff22c93fe60f21f1bbb57fe703ee8" kindref="member">const_iterator</ref></type>
        <definition>Matrix::const_iterator QuantLib::Matrix::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>QuantLib::Matrix::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="100" column="24" bodyfile="ql/math/matrix.hpp" bodystart="335" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1aa5a9cebec23d65c51dd4cce76cff74b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a32b20b09f948423c3cd2ac1c2a40a8fd" kindref="member">iterator</ref></type>
        <definition>Matrix::iterator QuantLib::Matrix::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>QuantLib::Matrix::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="101" column="18" bodyfile="ql/math/matrix.hpp" bodystart="339" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a507ef570bd84f8274c2785972a379423" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1aa8a1afd1c51325c7664039348fa9ab64" kindref="member">const_reverse_iterator</ref></type>
        <definition>Matrix::const_reverse_iterator QuantLib::Matrix::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <qualifiedname>QuantLib::Matrix::rbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="102" column="32" bodyfile="ql/math/matrix.hpp" bodystart="343" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ae021ff9a3d5e03cd92656ba592ce74cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a1b11e5c2c4450b4a56d6bca30c779400" kindref="member">reverse_iterator</ref></type>
        <definition>Matrix::reverse_iterator QuantLib::Matrix::rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <qualifiedname>QuantLib::Matrix::rbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="103" column="26" bodyfile="ql/math/matrix.hpp" bodystart="347" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a5f5b406233d2f9f3a13dceb6613cd9e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1aa8a1afd1c51325c7664039348fa9ab64" kindref="member">const_reverse_iterator</ref></type>
        <definition>Matrix::const_reverse_iterator QuantLib::Matrix::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <qualifiedname>QuantLib::Matrix::rend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="104" column="32" bodyfile="ql/math/matrix.hpp" bodystart="351" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1af5baff62d2517c05ec55e0034c257672" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a1b11e5c2c4450b4a56d6bca30c779400" kindref="member">reverse_iterator</ref></type>
        <definition>Matrix::reverse_iterator QuantLib::Matrix::rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <qualifiedname>QuantLib::Matrix::rend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="105" column="26" bodyfile="ql/math/matrix.hpp" bodystart="355" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1acd97a2e48512e73aea59e8d0dc4ff2ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a9e4cb308ca69bbffe9216e8105a38a67" kindref="member">const_row_iterator</ref></type>
        <definition>Matrix::const_row_iterator QuantLib::Matrix::row_begin</definition>
        <argsstring>(Size i) const</argsstring>
        <name>row_begin</name>
        <qualifiedname>QuantLib::Matrix::row_begin</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="106" column="28" bodyfile="ql/math/matrix.hpp" bodystart="360" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a1477f3c97cdfbf6f4425d43bc66c51bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1ad05c3c11c9d6fdf7c279f12ea54fbc63" kindref="member">row_iterator</ref></type>
        <definition>Matrix::row_iterator QuantLib::Matrix::row_begin</definition>
        <argsstring>(Size i)</argsstring>
        <name>row_begin</name>
        <qualifiedname>QuantLib::Matrix::row_begin</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="107" column="22" bodyfile="ql/math/matrix.hpp" bodystart="369" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1af522bd12b0f1ce562fbaf4e5e78276ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a9e4cb308ca69bbffe9216e8105a38a67" kindref="member">const_row_iterator</ref></type>
        <definition>Matrix::const_row_iterator QuantLib::Matrix::row_end</definition>
        <argsstring>(Size i) const</argsstring>
        <name>row_end</name>
        <qualifiedname>QuantLib::Matrix::row_end</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="108" column="28" bodyfile="ql/math/matrix.hpp" bodystart="378" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1af17ccff5653d88a886086879420d52fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1ad05c3c11c9d6fdf7c279f12ea54fbc63" kindref="member">row_iterator</ref></type>
        <definition>Matrix::row_iterator QuantLib::Matrix::row_end</definition>
        <argsstring>(Size i)</argsstring>
        <name>row_end</name>
        <qualifiedname>QuantLib::Matrix::row_end</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="109" column="22" bodyfile="ql/math/matrix.hpp" bodystart="387" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a4aba53c799d337de985cac42346350b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a3136da9235df4b2e7fd89085c83caf23" kindref="member">const_reverse_row_iterator</ref></type>
        <definition>Matrix::const_reverse_row_iterator QuantLib::Matrix::row_rbegin</definition>
        <argsstring>(Size i) const</argsstring>
        <name>row_rbegin</name>
        <qualifiedname>QuantLib::Matrix::row_rbegin</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="110" column="36" bodyfile="ql/math/matrix.hpp" bodystart="397" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a2e54d5e361eed0566269ecf70a56774a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a4530032d031c544ae178211f034300fc" kindref="member">reverse_row_iterator</ref></type>
        <definition>Matrix::reverse_row_iterator QuantLib::Matrix::row_rbegin</definition>
        <argsstring>(Size i)</argsstring>
        <name>row_rbegin</name>
        <qualifiedname>QuantLib::Matrix::row_rbegin</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="111" column="30" bodyfile="ql/math/matrix.hpp" bodystart="401" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a639ddb9a700d73e7faa8f77dc78bbbe7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a3136da9235df4b2e7fd89085c83caf23" kindref="member">const_reverse_row_iterator</ref></type>
        <definition>Matrix::const_reverse_row_iterator QuantLib::Matrix::row_rend</definition>
        <argsstring>(Size i) const</argsstring>
        <name>row_rend</name>
        <qualifiedname>QuantLib::Matrix::row_rend</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="112" column="36" bodyfile="ql/math/matrix.hpp" bodystart="406" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1aaada45a94d4bb0f700ac8c602cdbb584" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a4530032d031c544ae178211f034300fc" kindref="member">reverse_row_iterator</ref></type>
        <definition>Matrix::reverse_row_iterator QuantLib::Matrix::row_rend</definition>
        <argsstring>(Size i)</argsstring>
        <name>row_rend</name>
        <qualifiedname>QuantLib::Matrix::row_rend</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="113" column="30" bodyfile="ql/math/matrix.hpp" bodystart="410" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a1dd719d7441163127cd5ac3359f739d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a5754d03aa0d348cb8440858f6cde9310" kindref="member">const_column_iterator</ref></type>
        <definition>Matrix::const_column_iterator QuantLib::Matrix::column_begin</definition>
        <argsstring>(Size i) const</argsstring>
        <name>column_begin</name>
        <qualifiedname>QuantLib::Matrix::column_begin</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="114" column="31" bodyfile="ql/math/matrix.hpp" bodystart="415" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a6acfdca2b92dfc6a22eb35d8d660e9a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1ad9456d64e6906c707fadd4672da27c8d" kindref="member">column_iterator</ref></type>
        <definition>Matrix::column_iterator QuantLib::Matrix::column_begin</definition>
        <argsstring>(Size i)</argsstring>
        <name>column_begin</name>
        <qualifiedname>QuantLib::Matrix::column_begin</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="115" column="25" bodyfile="ql/math/matrix.hpp" bodystart="424" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a7766b61f6fa232fe9a8614d9491f9f80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a5754d03aa0d348cb8440858f6cde9310" kindref="member">const_column_iterator</ref></type>
        <definition>Matrix::const_column_iterator QuantLib::Matrix::column_end</definition>
        <argsstring>(Size i) const</argsstring>
        <name>column_end</name>
        <qualifiedname>QuantLib::Matrix::column_end</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="116" column="31" bodyfile="ql/math/matrix.hpp" bodystart="434" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1aa2eb43f110df9b12330221198b903b88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1ad9456d64e6906c707fadd4672da27c8d" kindref="member">column_iterator</ref></type>
        <definition>Matrix::column_iterator QuantLib::Matrix::column_end</definition>
        <argsstring>(Size i)</argsstring>
        <name>column_end</name>
        <qualifiedname>QuantLib::Matrix::column_end</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="117" column="25" bodyfile="ql/math/matrix.hpp" bodystart="443" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1abd5cfce2c2913866e6ed268efd2c30b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a125dc89fa60a753b025e93c13d8c6481" kindref="member">const_reverse_column_iterator</ref></type>
        <definition>Matrix::const_reverse_column_iterator QuantLib::Matrix::column_rbegin</definition>
        <argsstring>(Size i) const</argsstring>
        <name>column_rbegin</name>
        <qualifiedname>QuantLib::Matrix::column_rbegin</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="118" column="39" bodyfile="ql/math/matrix.hpp" bodystart="453" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a86aa0dd0004a494559aa35cf26d87789" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a2f23ae3d20cdc81e5fee7e2411b28497" kindref="member">reverse_column_iterator</ref></type>
        <definition>Matrix::reverse_column_iterator QuantLib::Matrix::column_rbegin</definition>
        <argsstring>(Size i)</argsstring>
        <name>column_rbegin</name>
        <qualifiedname>QuantLib::Matrix::column_rbegin</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="119" column="33" bodyfile="ql/math/matrix.hpp" bodystart="458" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1af37cbdf4f94865845a81f60f31e73e2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a125dc89fa60a753b025e93c13d8c6481" kindref="member">const_reverse_column_iterator</ref></type>
        <definition>Matrix::const_reverse_column_iterator QuantLib::Matrix::column_rend</definition>
        <argsstring>(Size i) const</argsstring>
        <name>column_rend</name>
        <qualifiedname>QuantLib::Matrix::column_rend</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="120" column="39" bodyfile="ql/math/matrix.hpp" bodystart="463" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a7f713840a5505f33fe6eae8ac2689cad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a2f23ae3d20cdc81e5fee7e2411b28497" kindref="member">reverse_column_iterator</ref></type>
        <definition>Matrix::reverse_column_iterator QuantLib::Matrix::column_rend</definition>
        <argsstring>(Size i)</argsstring>
        <name>column_rend</name>
        <qualifiedname>QuantLib::Matrix::column_rend</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="121" column="33" bodyfile="ql/math/matrix.hpp" bodystart="468" bodyend="470"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Element access</header>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ac971bf07f0ded2022bfa95b8f8c7464d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a9e4cb308ca69bbffe9216e8105a38a67" kindref="member">const_row_iterator</ref></type>
        <definition>Matrix::const_row_iterator QuantLib::Matrix::operator[]</definition>
        <argsstring>(Size) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>QuantLib::Matrix::operator[]</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="126" column="28" bodyfile="ql/math/matrix.hpp" bodystart="473" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1aab96cfc8adfd651765e6be8b1d67cff3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1a9e4cb308ca69bbffe9216e8105a38a67" kindref="member">const_row_iterator</ref></type>
        <definition>Matrix::const_row_iterator QuantLib::Matrix::at</definition>
        <argsstring>(Size) const</argsstring>
        <name>at</name>
        <qualifiedname>QuantLib::Matrix::at</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="127" column="28" bodyfile="ql/math/matrix.hpp" bodystart="478" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a938903cfb99b5f41091ac9f1624fb739" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1ad05c3c11c9d6fdf7c279f12ea54fbc63" kindref="member">row_iterator</ref></type>
        <definition>Matrix::row_iterator QuantLib::Matrix::operator[]</definition>
        <argsstring>(Size)</argsstring>
        <name>operator[]</name>
        <qualifiedname>QuantLib::Matrix::operator[]</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="128" column="22" bodyfile="ql/math/matrix.hpp" bodystart="483" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ae57167d1e71f850b6ba08c7e46215555" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix_1ad05c3c11c9d6fdf7c279f12ea54fbc63" kindref="member">row_iterator</ref></type>
        <definition>Matrix::row_iterator QuantLib::Matrix::at</definition>
        <argsstring>(Size)</argsstring>
        <name>at</name>
        <qualifiedname>QuantLib::Matrix::at</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="129" column="22" bodyfile="ql/math/matrix.hpp" bodystart="487" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1af694a09462cda80967fa8f3cac5d1d80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Matrix::diagonal</definition>
        <argsstring>() const</argsstring>
        <name>diagonal</name>
        <qualifiedname>QuantLib::Matrix::diagonal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="130" column="15" bodyfile="ql/math/matrix.hpp" bodystart="492" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a6792d4febf2e3edc627bcf5f1a45d95d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
        <definition>Real &amp; QuantLib::Matrix::operator()</definition>
        <argsstring>(Size i, Size j) const</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::Matrix::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="131" column="14" bodyfile="ql/math/matrix.hpp" bodystart="500" bodyend="502"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a12364ba962091ee32ccb940124c652dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Matrix::rows</definition>
        <argsstring>() const</argsstring>
        <name>rows</name>
        <qualifiedname>QuantLib::Matrix::rows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="136" column="14" bodyfile="ql/math/matrix.hpp" bodystart="504" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ad98690ac09b02b5e5e657a029e388ba3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Matrix::columns</definition>
        <argsstring>() const</argsstring>
        <name>columns</name>
        <qualifiedname>QuantLib::Matrix::columns</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="137" column="14" bodyfile="ql/math/matrix.hpp" bodystart="508" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1aa1efbf2a22de29eb644aee84a4cf3e65" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::Matrix::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>QuantLib::Matrix::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="138" column="14" bodyfile="ql/math/matrix.hpp" bodystart="520" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a3492fe04d4ebdc5f5fa7079c9be76084" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Matrix::size1</definition>
        <argsstring>() const</argsstring>
        <name>size1</name>
        <qualifiedname>QuantLib::Matrix::size1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="139" column="14" bodyfile="ql/math/matrix.hpp" bodystart="512" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a795208978ef4c02ce26e5797415a11ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Matrix::size2</definition>
        <argsstring>() const</argsstring>
        <name>size2</name>
        <qualifiedname>QuantLib::Matrix::size2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="140" column="14" bodyfile="ql/math/matrix.hpp" bodystart="516" bodyend="518"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="related">
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a6d11ed998cc31f97481d26e07afa66d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator+</definition>
        <argsstring>(const Matrix &amp;, const Matrix &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Matrix::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="155" column="12" bodyfile="ql/math/matrix.hpp" bodystart="524" bodyend="534" declfile="ql/math/matrix.hpp" declline="155" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a9be7abc59883cec4b0c984a64b58638f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator+</definition>
        <argsstring>(const Matrix &amp;, Matrix &amp;&amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Matrix::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="157" column="12" bodyfile="ql/math/matrix.hpp" bodystart="536" bodyend="545" declfile="ql/math/matrix.hpp" declline="157" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a440cf4673c9d7be9ccdc21de74a51c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator+</definition>
        <argsstring>(Matrix &amp;&amp;, const Matrix &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Matrix::operator+</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="159" column="12" bodyfile="ql/math/matrix.hpp" bodystart="547" bodyend="556" declfile="ql/math/matrix.hpp" declline="159" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a4a93663169247c36f8440c599f998fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator+</definition>
        <argsstring>(Matrix &amp;&amp;, Matrix &amp;&amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Matrix::operator+</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="161" column="12" bodyfile="ql/math/matrix.hpp" bodystart="558" bodyend="567" declfile="ql/math/matrix.hpp" declline="161" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ac8f923ecad5d2312f5331e94fb4b319e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(const Matrix &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="163" column="12" bodyfile="ql/math/matrix.hpp" bodystart="569" bodyend="573" declfile="ql/math/matrix.hpp" declline="163" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1aedbcf21aed7999d7273fbd2f9128ab2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(Matrix &amp;&amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="165" column="12" bodyfile="ql/math/matrix.hpp" bodystart="575" bodyend="578" declfile="ql/math/matrix.hpp" declline="165" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a9ed5b2e849ee4b8282934405339fd7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(const Matrix &amp;, const Matrix &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="167" column="12" bodyfile="ql/math/matrix.hpp" bodystart="580" bodyend="590" declfile="ql/math/matrix.hpp" declline="167" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ae01e5ae892add153a84648832f2a0125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(const Matrix &amp;, Matrix &amp;&amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="169" column="12" bodyfile="ql/math/matrix.hpp" bodystart="592" bodyend="601" declfile="ql/math/matrix.hpp" declline="169" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ad02b00e124f0c7326d59563706ab233a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(Matrix &amp;&amp;, const Matrix &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="171" column="12" bodyfile="ql/math/matrix.hpp" bodystart="603" bodyend="612" declfile="ql/math/matrix.hpp" declline="171" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1adb6628536e8af77c5c51853e6907da43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(Matrix &amp;&amp;, Matrix &amp;&amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="173" column="12" bodyfile="ql/math/matrix.hpp" bodystart="614" bodyend="623" declfile="ql/math/matrix.hpp" declline="173" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a2be283fbe284e22d68989469e096a087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(const Matrix &amp;, Real)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="175" column="12" bodyfile="ql/math/matrix.hpp" bodystart="625" bodyend="629" declfile="ql/math/matrix.hpp" declline="175" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a49ee5c03aa781e4a66f9135c639e3d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(Matrix &amp;&amp;, Real)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="177" column="12" bodyfile="ql/math/matrix.hpp" bodystart="631" bodyend="634" declfile="ql/math/matrix.hpp" declline="177" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ad5a458a7c80c7d1ec42f66bf369e4567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(Real, const Matrix &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="179" column="12" bodyfile="ql/math/matrix.hpp" bodystart="636" bodyend="640" declfile="ql/math/matrix.hpp" declline="179" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a95f70b31fd215df10a1b98fb941f617b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(Real, Matrix &amp;&amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="181" column="12" bodyfile="ql/math/matrix.hpp" bodystart="642" bodyend="645" declfile="ql/math/matrix.hpp" declline="181" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1ac896775e533619b3b8e74add36f1df3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator/</definition>
        <argsstring>(const Matrix &amp;, Real)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Matrix::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="183" column="12" bodyfile="ql/math/matrix.hpp" bodystart="647" bodyend="651" declfile="ql/math/matrix.hpp" declline="183" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a81a591b83b05aae56b6f35130d06479f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator/</definition>
        <argsstring>(Matrix &amp;&amp;, Real)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Matrix::operator/</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="185" column="12" bodyfile="ql/math/matrix.hpp" bodystart="653" bodyend="656" declfile="ql/math/matrix.hpp" declline="185" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a77cd00ec3ed9c3fbefb8f338e2a2ec34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(const Array &amp;, const Matrix &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="190" column="11" bodyfile="ql/math/matrix.hpp" bodystart="658" bodyend="669" declfile="ql/math/matrix.hpp" declline="190" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a0b518bedb379d0b4ef8b4eec806123b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(const Matrix &amp;, const Array &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="192" column="11" bodyfile="ql/math/matrix.hpp" bodystart="671" bodyend="681" declfile="ql/math/matrix.hpp" declline="192" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1adf38db67cba468ce4b579a29b568aa5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(const Matrix &amp;, const Matrix &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="194" column="12" bodyfile="ql/math/matrix.hpp" bodystart="683" bodyend="698" declfile="ql/math/matrix.hpp" declline="194" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a3297a42dbd41b49b268e8ec866876504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix transpose</definition>
        <argsstring>(const Matrix &amp;)</argsstring>
        <name>transpose</name>
        <qualifiedname>QuantLib::Matrix::transpose</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="199" column="12" bodyfile="ql/math/matrix.hpp" bodystart="700" bodyend="708" declfile="ql/math/matrix.hpp" declline="199" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a8cfa733053832db6990ca195cdab38db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix outerProduct</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>outerProduct</name>
        <qualifiedname>QuantLib::Matrix::outerProduct</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="202" column="12" bodyfile="ql/math/matrix.hpp" bodystart="710" bodyend="712" declfile="ql/math/matrix.hpp" declline="202" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1af44f18eeb6f058a2dc99632ed9c6a447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator1</type>
          </param>
          <param>
            <type>class Iterator2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix outerProduct</definition>
        <argsstring>(Iterator1 v1begin, Iterator1 v1end, Iterator2 v2begin, Iterator2 v2end)</argsstring>
        <name>outerProduct</name>
        <qualifiedname>QuantLib::Matrix::outerProduct</qualifiedname>
        <param>
          <type>Iterator1</type>
          <declname>v1begin</declname>
        </param>
        <param>
          <type>Iterator1</type>
          <declname>v1end</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>v2begin</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>v2end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="206" column="12" bodyfile="ql/math/matrix.hpp" bodystart="715" bodyend="730" declfile="ql/math/matrix.hpp" declline="206" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1a8473986339e7f202e1800d697456a92b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(Matrix &amp;, Matrix &amp;) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::Matrix::swap</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="209" column="10" bodyfile="ql/math/matrix.hpp" bodystart="732" bodyend="734" declfile="ql/math/matrix.hpp" declline="209" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1af0d6a8b04f5a8094992e498ca5a71142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Matrix &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Matrix::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="212" column="5" bodyfile="ql/math/matrix.hpp" bodystart="736" bodyend="745" declfile="ql/math/matrix.hpp" declline="212" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1aff21cecb1b3c4d8e3f3d525edebd7d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix inverse</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>inverse</name>
        <qualifiedname>QuantLib::Matrix::inverse</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="215" column="12" bodyfile="ql/math/matrix.cpp" bodystart="44" bodyend="79" declfile="ql/math/matrix.hpp" declline="215" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Matrix_1afd66b122c895badf4e5d31d7e250b100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real determinant</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>determinant</name>
        <qualifiedname>QuantLib::Matrix::determinant</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="218" column="10" bodyfile="ql/math/matrix.cpp" bodystart="81" bodyend="101" declfile="ql/math/matrix.hpp" declline="218" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Matrix used in linear algebra. </para>
    </briefdescription>
    <detaileddescription>
<para>This class implements the concept of <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> as used in linear algebra. As such, it is <bold>not</bold> meant to be used as a container. </para>
    </detaileddescription>
    <location file="ql/math/matrix.hpp" line="41" column="5" bodyfile="ql/math/matrix.hpp" bodystart="41" bodyend="150"/>
    <listofallmembers>
      <member refid="classQuantLib_1_1Matrix_1aab96cfc8adfd651765e6be8b1d67cff3" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>at</name></member>
      <member refid="classQuantLib_1_1Matrix_1ae57167d1e71f850b6ba08c7e46215555" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>at</name></member>
      <member refid="classQuantLib_1_1Matrix_1a44b6d59f4074d7a1ba1b2dc14a6abcdb" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>begin</name></member>
      <member refid="classQuantLib_1_1Matrix_1a145ff0e675dd5ac08460ffa6a71fb743" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>begin</name></member>
      <member refid="classQuantLib_1_1Matrix_1a1dd719d7441163127cd5ac3359f739d6" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>column_begin</name></member>
      <member refid="classQuantLib_1_1Matrix_1a6acfdca2b92dfc6a22eb35d8d660e9a5" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>column_begin</name></member>
      <member refid="classQuantLib_1_1Matrix_1a7766b61f6fa232fe9a8614d9491f9f80" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>column_end</name></member>
      <member refid="classQuantLib_1_1Matrix_1aa2eb43f110df9b12330221198b903b88" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>column_end</name></member>
      <member refid="classQuantLib_1_1Matrix_1ad9456d64e6906c707fadd4672da27c8d" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>column_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1abd5cfce2c2913866e6ed268efd2c30b3" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>column_rbegin</name></member>
      <member refid="classQuantLib_1_1Matrix_1a86aa0dd0004a494559aa35cf26d87789" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>column_rbegin</name></member>
      <member refid="classQuantLib_1_1Matrix_1af37cbdf4f94865845a81f60f31e73e2c" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>column_rend</name></member>
      <member refid="classQuantLib_1_1Matrix_1a7f713840a5505f33fe6eae8ac2689cad" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>column_rend</name></member>
      <member refid="classQuantLib_1_1Matrix_1ad98690ac09b02b5e5e657a029e388ba3" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>columns</name></member>
      <member refid="classQuantLib_1_1Matrix_1a23c5052c1cf3a57bf5a449e086404a8b" prot="private" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>columns_</name></member>
      <member refid="classQuantLib_1_1Matrix_1a5754d03aa0d348cb8440858f6cde9310" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>const_column_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1a2a4ff22c93fe60f21f1bbb57fe703ee8" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>const_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1a125dc89fa60a753b025e93c13d8c6481" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>const_reverse_column_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1aa8a1afd1c51325c7664039348fa9ab64" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>const_reverse_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1a3136da9235df4b2e7fd89085c83caf23" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>const_reverse_row_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1a9e4cb308ca69bbffe9216e8105a38a67" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>const_row_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1a95fe7a9011578a216823c95fbeb26b6b" prot="private" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>data_</name></member>
      <member refid="classQuantLib_1_1Matrix_1afd66b122c895badf4e5d31d7e250b100" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>determinant</name></member>
      <member refid="classQuantLib_1_1Matrix_1af694a09462cda80967fa8f3cac5d1d80" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>diagonal</name></member>
      <member refid="classQuantLib_1_1Matrix_1aa1efbf2a22de29eb644aee84a4cf3e65" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>empty</name></member>
      <member refid="classQuantLib_1_1Matrix_1a8cf900b0ba813ec8a7cd399db01771b0" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>end</name></member>
      <member refid="classQuantLib_1_1Matrix_1aa5a9cebec23d65c51dd4cce76cff74b9" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>end</name></member>
      <member refid="classQuantLib_1_1Matrix_1aff21cecb1b3c4d8e3f3d525edebd7d5c" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>inverse</name></member>
      <member refid="classQuantLib_1_1Matrix_1a32b20b09f948423c3cd2ac1c2a40a8fd" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1a4807dee0afc0f073191d0e9ba9b77c27" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>Matrix</name></member>
      <member refid="classQuantLib_1_1Matrix_1ab1124204775d95bb885e6fea322e4302" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>Matrix</name></member>
      <member refid="classQuantLib_1_1Matrix_1a6cb322de4ff87ce5a483794f3ef99c89" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>Matrix</name></member>
      <member refid="classQuantLib_1_1Matrix_1a798b3df0df0a022987aa518cc5b7b42c" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>Matrix</name></member>
      <member refid="classQuantLib_1_1Matrix_1a0fb410e6f6562b7c20c759c07fccc2e0" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>Matrix</name></member>
      <member refid="classQuantLib_1_1Matrix_1a1131f44bda1499c40171384be8b9382c" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>Matrix</name></member>
      <member refid="classQuantLib_1_1Matrix_1a1078c3a8e5b638ede2c0a82fec502c46" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>Matrix</name></member>
      <member refid="classQuantLib_1_1Matrix_1a78a65f6da49fcfdfd8cb1c8446f49ddb" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator!=</name></member>
      <member refid="classQuantLib_1_1Matrix_1a6792d4febf2e3edc627bcf5f1a45d95d" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator()</name></member>
      <member refid="classQuantLib_1_1Matrix_1a2be283fbe284e22d68989469e096a087" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator*</name></member>
      <member refid="classQuantLib_1_1Matrix_1a49ee5c03aa781e4a66f9135c639e3d12" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator*</name></member>
      <member refid="classQuantLib_1_1Matrix_1ad5a458a7c80c7d1ec42f66bf369e4567" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator*</name></member>
      <member refid="classQuantLib_1_1Matrix_1a95f70b31fd215df10a1b98fb941f617b" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator*</name></member>
      <member refid="classQuantLib_1_1Matrix_1a77cd00ec3ed9c3fbefb8f338e2a2ec34" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator*</name></member>
      <member refid="classQuantLib_1_1Matrix_1a0b518bedb379d0b4ef8b4eec806123b5" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator*</name></member>
      <member refid="classQuantLib_1_1Matrix_1adf38db67cba468ce4b579a29b568aa5b" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator*</name></member>
      <member refid="classQuantLib_1_1Matrix_1a9551a645dd666828981ec80ff5ce0e20" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator*=</name></member>
      <member refid="classQuantLib_1_1Matrix_1a6d11ed998cc31f97481d26e07afa66d8" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator+</name></member>
      <member refid="classQuantLib_1_1Matrix_1a9be7abc59883cec4b0c984a64b58638f" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator+</name></member>
      <member refid="classQuantLib_1_1Matrix_1a440cf4673c9d7be9ccdc21de74a51c48" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator+</name></member>
      <member refid="classQuantLib_1_1Matrix_1a4a93663169247c36f8440c599f998fd4" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator+</name></member>
      <member refid="classQuantLib_1_1Matrix_1acd174ae5e504af26ffe6c53b9fee208d" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator+=</name></member>
      <member refid="classQuantLib_1_1Matrix_1ac8f923ecad5d2312f5331e94fb4b319e" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator-</name></member>
      <member refid="classQuantLib_1_1Matrix_1aedbcf21aed7999d7273fbd2f9128ab2d" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator-</name></member>
      <member refid="classQuantLib_1_1Matrix_1a9ed5b2e849ee4b8282934405339fd7a1" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator-</name></member>
      <member refid="classQuantLib_1_1Matrix_1ae01e5ae892add153a84648832f2a0125" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator-</name></member>
      <member refid="classQuantLib_1_1Matrix_1ad02b00e124f0c7326d59563706ab233a" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator-</name></member>
      <member refid="classQuantLib_1_1Matrix_1adb6628536e8af77c5c51853e6907da43" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator-</name></member>
      <member refid="classQuantLib_1_1Matrix_1a7bf76fa577dfbaf8586208533a504505" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator-=</name></member>
      <member refid="classQuantLib_1_1Matrix_1ac896775e533619b3b8e74add36f1df3c" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator/</name></member>
      <member refid="classQuantLib_1_1Matrix_1a81a591b83b05aae56b6f35130d06479f" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator/</name></member>
      <member refid="classQuantLib_1_1Matrix_1a150360a860e99c3158dbe6ebb4d59060" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator/=</name></member>
      <member refid="classQuantLib_1_1Matrix_1af0d6a8b04f5a8094992e498ca5a71142" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator&lt;&lt;</name></member>
      <member refid="classQuantLib_1_1Matrix_1ae72b2d8b76e2b6604a986ffadecaa16d" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Matrix_1aa7a8e2f761cea78be0eeb8aaed1a0c45" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Matrix_1acd9d23463fa668e5268af884f379ebbe" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator==</name></member>
      <member refid="classQuantLib_1_1Matrix_1ac971bf07f0ded2022bfa95b8f8c7464d" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator[]</name></member>
      <member refid="classQuantLib_1_1Matrix_1a938903cfb99b5f41091ac9f1624fb739" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>operator[]</name></member>
      <member refid="classQuantLib_1_1Matrix_1a8cfa733053832db6990ca195cdab38db" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>outerProduct</name></member>
      <member refid="classQuantLib_1_1Matrix_1af44f18eeb6f058a2dc99632ed9c6a447" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>outerProduct</name></member>
      <member refid="classQuantLib_1_1Matrix_1a507ef570bd84f8274c2785972a379423" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>rbegin</name></member>
      <member refid="classQuantLib_1_1Matrix_1ae021ff9a3d5e03cd92656ba592ce74cc" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>rbegin</name></member>
      <member refid="classQuantLib_1_1Matrix_1a5f5b406233d2f9f3a13dceb6613cd9e6" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>rend</name></member>
      <member refid="classQuantLib_1_1Matrix_1af5baff62d2517c05ec55e0034c257672" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>rend</name></member>
      <member refid="classQuantLib_1_1Matrix_1a2f23ae3d20cdc81e5fee7e2411b28497" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>reverse_column_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1a1b11e5c2c4450b4a56d6bca30c779400" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>reverse_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1a4530032d031c544ae178211f034300fc" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>reverse_row_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1acd97a2e48512e73aea59e8d0dc4ff2ae" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>row_begin</name></member>
      <member refid="classQuantLib_1_1Matrix_1a1477f3c97cdfbf6f4425d43bc66c51bf" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>row_begin</name></member>
      <member refid="classQuantLib_1_1Matrix_1af522bd12b0f1ce562fbaf4e5e78276ee" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>row_end</name></member>
      <member refid="classQuantLib_1_1Matrix_1af17ccff5653d88a886086879420d52fb" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>row_end</name></member>
      <member refid="classQuantLib_1_1Matrix_1ad05c3c11c9d6fdf7c279f12ea54fbc63" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>row_iterator</name></member>
      <member refid="classQuantLib_1_1Matrix_1a4aba53c799d337de985cac42346350b3" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>row_rbegin</name></member>
      <member refid="classQuantLib_1_1Matrix_1a2e54d5e361eed0566269ecf70a56774a" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>row_rbegin</name></member>
      <member refid="classQuantLib_1_1Matrix_1a639ddb9a700d73e7faa8f77dc78bbbe7" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>row_rend</name></member>
      <member refid="classQuantLib_1_1Matrix_1aaada45a94d4bb0f700ac8c602cdbb584" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>row_rend</name></member>
      <member refid="classQuantLib_1_1Matrix_1a12364ba962091ee32ccb940124c652dc" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>rows</name></member>
      <member refid="classQuantLib_1_1Matrix_1a65f186f35e6b4e90f07557c9cd8fb782" prot="private" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>rows_</name></member>
      <member refid="classQuantLib_1_1Matrix_1a3492fe04d4ebdc5f5fa7079c9be76084" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>size1</name></member>
      <member refid="classQuantLib_1_1Matrix_1a795208978ef4c02ce26e5797415a11ed" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>size2</name></member>
      <member refid="classQuantLib_1_1Matrix_1af7abd58ce86c26ee85bca2534a229a2b" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>swap</name></member>
      <member refid="classQuantLib_1_1Matrix_1a8473986339e7f202e1800d697456a92b" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>swap</name></member>
      <member refid="classQuantLib_1_1Matrix_1a3297a42dbd41b49b268e8ec866876504" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>transpose</name></member>
      <member refid="classQuantLib_1_1Matrix_1a7683d030aa2b17605dd7618595537056" prot="public" virt="non-virtual"><scope>QuantLib::Matrix</scope><name>~Matrix</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
