<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceQuantLib" kind="namespace" language="C++">
    <compoundname>QuantLib</compoundname>
    <innerclass refid="classQuantLib_1_1Actual365Fixed" prot="public">QuantLib::Actual365Fixed</innerclass>
    <innerclass refid="classQuantLib_1_1AcyclicVisitor" prot="public">QuantLib::AcyclicVisitor</innerclass>
    <innerclass refid="classQuantLib_1_1AdaptiveRungeKutta" prot="public">QuantLib::AdaptiveRungeKutta</innerclass>
    <innerclass refid="classQuantLib_1_1AkimaCubicInterpolation" prot="public">QuantLib::AkimaCubicInterpolation</innerclass>
    <innerclass refid="classQuantLib_1_1AmericanExercise" prot="public">QuantLib::AmericanExercise</innerclass>
    <innerclass refid="classQuantLib_1_1AnalyticDividendEuropeanEngine" prot="public">QuantLib::AnalyticDividendEuropeanEngine</innerclass>
    <innerclass refid="classQuantLib_1_1AnalyticEuropeanEngine" prot="public">QuantLib::AnalyticEuropeanEngine</innerclass>
    <innerclass refid="classQuantLib_1_1Array" prot="public">QuantLib::Array</innerclass>
    <innerclass refid="classQuantLib_1_1AssetOrNothingPayoff" prot="public">QuantLib::AssetOrNothingPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1AverageBasketPayoff" prot="public">QuantLib::AverageBasketPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1BasketOption" prot="public">QuantLib::BasketOption</innerclass>
    <innerclass refid="classQuantLib_1_1BasketPayoff" prot="public">QuantLib::BasketPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1BermudanExercise" prot="public">QuantLib::BermudanExercise</innerclass>
    <innerclass refid="classQuantLib_1_1BiCGstab" prot="public">QuantLib::BiCGstab</innerclass>
    <innerclass refid="structQuantLib_1_1BiCGStabResult" prot="public">QuantLib::BiCGStabResult</innerclass>
    <innerclass refid="classQuantLib_1_1BlackCalculator" prot="public">QuantLib::BlackCalculator</innerclass>
    <innerclass refid="classQuantLib_1_1BlackConstantVol" prot="public">QuantLib::BlackConstantVol</innerclass>
    <innerclass refid="classQuantLib_1_1BlackProcess" prot="public">QuantLib::BlackProcess</innerclass>
    <innerclass refid="classQuantLib_1_1BlackScholesMertonProcess" prot="public">QuantLib::BlackScholesMertonProcess</innerclass>
    <innerclass refid="classQuantLib_1_1BlackScholesProcess" prot="public">QuantLib::BlackScholesProcess</innerclass>
    <innerclass refid="classQuantLib_1_1BlackVarianceCurve" prot="public">QuantLib::BlackVarianceCurve</innerclass>
    <innerclass refid="classQuantLib_1_1BlackVarianceTermStructure" prot="public">QuantLib::BlackVarianceTermStructure</innerclass>
    <innerclass refid="classQuantLib_1_1BlackVolatilityTermStructure" prot="public">QuantLib::BlackVolatilityTermStructure</innerclass>
    <innerclass refid="classQuantLib_1_1BlackVolTermStructure" prot="public">QuantLib::BlackVolTermStructure</innerclass>
    <innerclass refid="classQuantLib_1_1BoundaryCondition" prot="public">QuantLib::BoundaryCondition</innerclass>
    <innerclass refid="classQuantLib_1_1BoundaryConditionSchemeHelper" prot="public">QuantLib::BoundaryConditionSchemeHelper</innerclass>
    <innerclass refid="classQuantLib_1_1Brent" prot="public">QuantLib::Brent</innerclass>
    <innerclass refid="classQuantLib_1_1Calendar" prot="public">QuantLib::Calendar</innerclass>
    <innerclass refid="classQuantLib_1_1CashFlow" prot="public">QuantLib::CashFlow</innerclass>
    <innerclass refid="classQuantLib_1_1CashOrNothingPayoff" prot="public">QuantLib::CashOrNothingPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1ChebyshevInterpolation" prot="public">QuantLib::ChebyshevInterpolation</innerclass>
    <innerclass refid="classQuantLib_1_1Concentrating1dMesher" prot="public">QuantLib::Concentrating1dMesher</innerclass>
    <innerclass refid="classQuantLib_1_1CraigSneydScheme" prot="public">QuantLib::CraigSneydScheme</innerclass>
    <innerclass refid="classQuantLib_1_1CrankNicolsonScheme" prot="public">QuantLib::CrankNicolsonScheme</innerclass>
    <innerclass refid="classQuantLib_1_1Cubic" prot="public">QuantLib::Cubic</innerclass>
    <innerclass refid="classQuantLib_1_1CubicInterpolation" prot="public">QuantLib::CubicInterpolation</innerclass>
    <innerclass refid="classQuantLib_1_1CubicNaturalSpline" prot="public">QuantLib::CubicNaturalSpline</innerclass>
    <innerclass refid="classQuantLib_1_1CubicSplineOvershootingMinimization1" prot="public">QuantLib::CubicSplineOvershootingMinimization1</innerclass>
    <innerclass refid="classQuantLib_1_1CubicSplineOvershootingMinimization2" prot="public">QuantLib::CubicSplineOvershootingMinimization2</innerclass>
    <innerclass refid="classQuantLib_1_1CumulativeGammaDistribution" prot="public">QuantLib::CumulativeGammaDistribution</innerclass>
    <innerclass refid="classQuantLib_1_1CumulativeNormalDistribution" prot="public">QuantLib::CumulativeNormalDistribution</innerclass>
    <innerclass refid="classQuantLib_1_1CuriouslyRecurringTemplate" prot="public">QuantLib::CuriouslyRecurringTemplate</innerclass>
    <innerclass refid="classQuantLib_1_1Date" prot="public">QuantLib::Date</innerclass>
    <innerclass refid="classQuantLib_1_1DayCounter" prot="public">QuantLib::DayCounter</innerclass>
    <innerclass refid="structQuantLib_1_1Default" prot="public">QuantLib::Default</innerclass>
    <innerclass refid="classQuantLib_1_1DirichletBC" prot="public">QuantLib::DirichletBC</innerclass>
    <innerclass refid="classQuantLib_1_1Dividend" prot="public">QuantLib::Dividend</innerclass>
    <innerclass refid="classQuantLib_1_1DouglasScheme" prot="public">QuantLib::DouglasScheme</innerclass>
    <innerclass refid="classQuantLib_1_1DqFpEquation" prot="public">QuantLib::DqFpEquation</innerclass>
    <innerclass refid="classQuantLib_1_1DqFpEquation__A" prot="public">QuantLib::DqFpEquation_A</innerclass>
    <innerclass refid="classQuantLib_1_1DqFpEquation__B" prot="public">QuantLib::DqFpEquation_B</innerclass>
    <innerclass refid="structQuantLib_1_1earlier__than" prot="public">QuantLib::earlier_than</innerclass>
    <innerclass refid="structQuantLib_1_1earlier__than_3_01CashFlow_01_4" prot="public">QuantLib::earlier_than&lt; CashFlow &gt;</innerclass>
    <innerclass refid="structQuantLib_1_1earlier__than_3_01ext_1_1shared__ptr_3_01T_01_4_01_4" prot="public">QuantLib::earlier_than&lt; ext::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classQuantLib_1_1EarlyExercise" prot="public">QuantLib::EarlyExercise</innerclass>
    <innerclass refid="classQuantLib_1_1Error" prot="public">QuantLib::Error</innerclass>
    <innerclass refid="classQuantLib_1_1ErrorFunction" prot="public">QuantLib::ErrorFunction</innerclass>
    <innerclass refid="classQuantLib_1_1EscrowedDividendAdjustment" prot="public">QuantLib::EscrowedDividendAdjustment</innerclass>
    <innerclass refid="classQuantLib_1_1EulerDiscretization" prot="public">QuantLib::EulerDiscretization</innerclass>
    <innerclass refid="classQuantLib_1_1EuropeanExercise" prot="public">QuantLib::EuropeanExercise</innerclass>
    <innerclass refid="classQuantLib_1_1Event" prot="public">QuantLib::Event</innerclass>
    <innerclass refid="classQuantLib_1_1Exercise" prot="public">QuantLib::Exercise</innerclass>
    <innerclass refid="classQuantLib_1_1ExplicitEulerScheme" prot="public">QuantLib::ExplicitEulerScheme</innerclass>
    <innerclass refid="classQuantLib_1_1Extrapolator" prot="public">QuantLib::Extrapolator</innerclass>
    <innerclass refid="classQuantLib_1_1FdBlackScholesVanillaEngine" prot="public">QuantLib::FdBlackScholesVanillaEngine</innerclass>
    <innerclass refid="classQuantLib_1_1Fdm1DimSolver" prot="public">QuantLib::Fdm1DimSolver</innerclass>
    <innerclass refid="classQuantLib_1_1Fdm1dMesher" prot="public">QuantLib::Fdm1dMesher</innerclass>
    <innerclass refid="classQuantLib_1_1FdmAmericanStepCondition" prot="public">QuantLib::FdmAmericanStepCondition</innerclass>
    <innerclass refid="classQuantLib_1_1FdmBackwardSolver" prot="public">QuantLib::FdmBackwardSolver</innerclass>
    <innerclass refid="classQuantLib_1_1FdmBermudanStepCondition" prot="public">QuantLib::FdmBermudanStepCondition</innerclass>
    <innerclass refid="classQuantLib_1_1FdmBlackScholesMesher" prot="public">QuantLib::FdmBlackScholesMesher</innerclass>
    <innerclass refid="classQuantLib_1_1FdmBlackScholesOp" prot="public">QuantLib::FdmBlackScholesOp</innerclass>
    <innerclass refid="classQuantLib_1_1FdmBlackScholesSolver" prot="public">QuantLib::FdmBlackScholesSolver</innerclass>
    <innerclass refid="classQuantLib_1_1FdmCellAveragingInnerValue" prot="public">QuantLib::FdmCellAveragingInnerValue</innerclass>
    <innerclass refid="classQuantLib_1_1FdmDividendHandler" prot="public">QuantLib::FdmDividendHandler</innerclass>
    <innerclass refid="classQuantLib_1_1FdmEscrowedLogInnerValueCalculator" prot="public">QuantLib::FdmEscrowedLogInnerValueCalculator</innerclass>
    <innerclass refid="classQuantLib_1_1FdmInnerValueCalculator" prot="public">QuantLib::FdmInnerValueCalculator</innerclass>
    <innerclass refid="classQuantLib_1_1FdmLinearOp" prot="public">QuantLib::FdmLinearOp</innerclass>
    <innerclass refid="classQuantLib_1_1FdmLinearOpComposite" prot="public">QuantLib::FdmLinearOpComposite</innerclass>
    <innerclass refid="classQuantLib_1_1FdmLinearOpIterator" prot="public">QuantLib::FdmLinearOpIterator</innerclass>
    <innerclass refid="classQuantLib_1_1FdmLinearOpLayout" prot="public">QuantLib::FdmLinearOpLayout</innerclass>
    <innerclass refid="classQuantLib_1_1FdmLogBasketInnerValue" prot="public">QuantLib::FdmLogBasketInnerValue</innerclass>
    <innerclass refid="classQuantLib_1_1FdmLogInnerValue" prot="public">QuantLib::FdmLogInnerValue</innerclass>
    <innerclass refid="classQuantLib_1_1FdmMesher" prot="public">QuantLib::FdmMesher</innerclass>
    <innerclass refid="classQuantLib_1_1FdmMesherComposite" prot="public">QuantLib::FdmMesherComposite</innerclass>
    <innerclass refid="classQuantLib_1_1FdmQuantoHelper" prot="public">QuantLib::FdmQuantoHelper</innerclass>
    <innerclass refid="structQuantLib_1_1FdmSchemeDesc" prot="public">QuantLib::FdmSchemeDesc</innerclass>
    <innerclass refid="classQuantLib_1_1FdmSnapshotCondition" prot="public">QuantLib::FdmSnapshotCondition</innerclass>
    <innerclass refid="structQuantLib_1_1FdmSolverDesc" prot="public">QuantLib::FdmSolverDesc</innerclass>
    <innerclass refid="classQuantLib_1_1FdmStepConditionComposite" prot="public">QuantLib::FdmStepConditionComposite</innerclass>
    <innerclass refid="classQuantLib_1_1FdmZeroInnerValue" prot="public">QuantLib::FdmZeroInnerValue</innerclass>
    <innerclass refid="classQuantLib_1_1FiniteDifferenceModel" prot="public">QuantLib::FiniteDifferenceModel</innerclass>
    <innerclass refid="classQuantLib_1_1FirstDerivativeOp" prot="public">QuantLib::FirstDerivativeOp</innerclass>
    <innerclass refid="classQuantLib_1_1FixedDividend" prot="public">QuantLib::FixedDividend</innerclass>
    <innerclass refid="classQuantLib_1_1FlatForward" prot="public">QuantLib::FlatForward</innerclass>
    <innerclass refid="classQuantLib_1_1FloatingTypePayoff" prot="public">QuantLib::FloatingTypePayoff</innerclass>
    <innerclass refid="classQuantLib_1_1FractionalDividend" prot="public">QuantLib::FractionalDividend</innerclass>
    <innerclass refid="classQuantLib_1_1FritschButlandCubic" prot="public">QuantLib::FritschButlandCubic</innerclass>
    <innerclass refid="classQuantLib_1_1GammaFunction" prot="public">QuantLib::GammaFunction</innerclass>
    <innerclass refid="classQuantLib_1_1GapPayoff" prot="public">QuantLib::GapPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1GarmanKohlagenProcess" prot="public">QuantLib::GarmanKohlagenProcess</innerclass>
    <innerclass refid="classQuantLib_1_1GaussChebyshev2ndIntegration" prot="public">QuantLib::GaussChebyshev2ndIntegration</innerclass>
    <innerclass refid="classQuantLib_1_1GaussChebyshev2ndPolynomial" prot="public">QuantLib::GaussChebyshev2ndPolynomial</innerclass>
    <innerclass refid="classQuantLib_1_1GaussChebyshevIntegration" prot="public">QuantLib::GaussChebyshevIntegration</innerclass>
    <innerclass refid="classQuantLib_1_1GaussChebyshevPolynomial" prot="public">QuantLib::GaussChebyshevPolynomial</innerclass>
    <innerclass refid="classQuantLib_1_1GaussGegenbauerIntegration" prot="public">QuantLib::GaussGegenbauerIntegration</innerclass>
    <innerclass refid="classQuantLib_1_1GaussGegenbauerPolynomial" prot="public">QuantLib::GaussGegenbauerPolynomial</innerclass>
    <innerclass refid="classQuantLib_1_1GaussHermiteIntegration" prot="public">QuantLib::GaussHermiteIntegration</innerclass>
    <innerclass refid="classQuantLib_1_1GaussHermitePolynomial" prot="public">QuantLib::GaussHermitePolynomial</innerclass>
    <innerclass refid="classQuantLib_1_1GaussHyperbolicIntegration" prot="public">QuantLib::GaussHyperbolicIntegration</innerclass>
    <innerclass refid="classQuantLib_1_1GaussHyperbolicPolynomial" prot="public">QuantLib::GaussHyperbolicPolynomial</innerclass>
    <innerclass refid="classQuantLib_1_1GaussianOrthogonalPolynomial" prot="public">QuantLib::GaussianOrthogonalPolynomial</innerclass>
    <innerclass refid="classQuantLib_1_1GaussianQuadrature" prot="public">QuantLib::GaussianQuadrature</innerclass>
    <innerclass refid="classQuantLib_1_1GaussJacobiIntegration" prot="public">QuantLib::GaussJacobiIntegration</innerclass>
    <innerclass refid="classQuantLib_1_1GaussJacobiPolynomial" prot="public">QuantLib::GaussJacobiPolynomial</innerclass>
    <innerclass refid="classQuantLib_1_1GaussLaguerreIntegration" prot="public">QuantLib::GaussLaguerreIntegration</innerclass>
    <innerclass refid="classQuantLib_1_1GaussLaguerrePolynomial" prot="public">QuantLib::GaussLaguerrePolynomial</innerclass>
    <innerclass refid="classQuantLib_1_1GaussLegendreIntegration" prot="public">QuantLib::GaussLegendreIntegration</innerclass>
    <innerclass refid="classQuantLib_1_1GaussLegendrePolynomial" prot="public">QuantLib::GaussLegendrePolynomial</innerclass>
    <innerclass refid="classQuantLib_1_1GaussLobattoIntegral" prot="public">QuantLib::GaussLobattoIntegral</innerclass>
    <innerclass refid="classQuantLib_1_1GeneralizedBlackScholesProcess" prot="public">QuantLib::GeneralizedBlackScholesProcess</innerclass>
    <innerclass refid="classQuantLib_1_1GenericEngine" prot="public">QuantLib::GenericEngine</innerclass>
    <innerclass refid="classQuantLib_1_1GMRES" prot="public">QuantLib::GMRES</innerclass>
    <innerclass refid="structQuantLib_1_1GMRESResult" prot="public">QuantLib::GMRESResult</innerclass>
    <innerclass refid="classQuantLib_1_1Greeks" prot="public">QuantLib::Greeks</innerclass>
    <innerclass refid="classQuantLib_1_1Handle" prot="public">QuantLib::Handle</innerclass>
    <innerclass refid="classQuantLib_1_1HarmonicCubic" prot="public">QuantLib::HarmonicCubic</innerclass>
    <innerclass refid="classQuantLib_1_1HundsdorferScheme" prot="public">QuantLib::HundsdorferScheme</innerclass>
    <innerclass refid="classQuantLib_1_1ImplicitEulerScheme" prot="public">QuantLib::ImplicitEulerScheme</innerclass>
    <innerclass refid="classQuantLib_1_1Instrument" prot="public">QuantLib::Instrument</innerclass>
    <innerclass refid="classQuantLib_1_1Integrator" prot="public">QuantLib::Integrator</innerclass>
    <innerclass refid="classQuantLib_1_1InterestRate" prot="public">QuantLib::InterestRate</innerclass>
    <innerclass refid="classQuantLib_1_1Interpolation" prot="public">QuantLib::Interpolation</innerclass>
    <innerclass refid="classQuantLib_1_1InverseCumulativeNormal" prot="public">QuantLib::InverseCumulativeNormal</innerclass>
    <innerclass refid="classQuantLib_1_1KrugerCubic" prot="public">QuantLib::KrugerCubic</innerclass>
    <innerclass refid="classQuantLib_1_1LagrangeInterpolation" prot="public">QuantLib::LagrangeInterpolation</innerclass>
    <innerclass refid="classQuantLib_1_1LazyObject" prot="public">QuantLib::LazyObject</innerclass>
    <innerclass refid="classQuantLib_1_1Linear" prot="public">QuantLib::Linear</innerclass>
    <innerclass refid="classQuantLib_1_1LinearInterpolation" prot="public">QuantLib::LinearInterpolation</innerclass>
    <innerclass refid="classQuantLib_1_1LocalConstantVol" prot="public">QuantLib::LocalConstantVol</innerclass>
    <innerclass refid="classQuantLib_1_1LocalVolCurve" prot="public">QuantLib::LocalVolCurve</innerclass>
    <innerclass refid="classQuantLib_1_1LocalVolSurface" prot="public">QuantLib::LocalVolSurface</innerclass>
    <innerclass refid="classQuantLib_1_1LocalVolTermStructure" prot="public">QuantLib::LocalVolTermStructure</innerclass>
    <innerclass refid="classQuantLib_1_1MaddockCumulativeNormal" prot="public">QuantLib::MaddockCumulativeNormal</innerclass>
    <innerclass refid="classQuantLib_1_1MaddockInverseCumulativeNormal" prot="public">QuantLib::MaddockInverseCumulativeNormal</innerclass>
    <innerclass refid="classQuantLib_1_1MakeFdBlackScholesVanillaEngine" prot="public">QuantLib::MakeFdBlackScholesVanillaEngine</innerclass>
    <innerclass refid="classQuantLib_1_1Matrix" prot="public">QuantLib::Matrix</innerclass>
    <innerclass refid="classQuantLib_1_1MaxBasketPayoff" prot="public">QuantLib::MaxBasketPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1MethodOfLinesScheme" prot="public">QuantLib::MethodOfLinesScheme</innerclass>
    <innerclass refid="structQuantLib_1_1MidPoint" prot="public">QuantLib::MidPoint</innerclass>
    <innerclass refid="classQuantLib_1_1MinBasketPayoff" prot="public">QuantLib::MinBasketPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1ModifiedCraigSneydScheme" prot="public">QuantLib::ModifiedCraigSneydScheme</innerclass>
    <innerclass refid="classQuantLib_1_1MonotonicCubicNaturalSpline" prot="public">QuantLib::MonotonicCubicNaturalSpline</innerclass>
    <innerclass refid="classQuantLib_1_1MonotonicParabolic" prot="public">QuantLib::MonotonicParabolic</innerclass>
    <innerclass refid="classQuantLib_1_1MoreGreeks" prot="public">QuantLib::MoreGreeks</innerclass>
    <innerclass refid="classQuantLib_1_1MoroInverseCumulativeNormal" prot="public">QuantLib::MoroInverseCumulativeNormal</innerclass>
    <innerclass refid="classQuantLib_1_1MultiAssetOption" prot="public">QuantLib::MultiAssetOption</innerclass>
    <innerclass refid="classQuantLib_1_1MultiDimGaussianIntegration" prot="public">QuantLib::MultiDimGaussianIntegration</innerclass>
    <innerclass refid="classQuantLib_1_1NeumannBC" prot="public">QuantLib::NeumannBC</innerclass>
    <innerclass refid="classQuantLib_1_1Newton" prot="public">QuantLib::Newton</innerclass>
    <innerclass refid="classQuantLib_1_1NewtonSafe" prot="public">QuantLib::NewtonSafe</innerclass>
    <innerclass refid="classQuantLib_1_1NormalDistribution" prot="public">QuantLib::NormalDistribution</innerclass>
    <innerclass refid="classQuantLib_1_1Null" prot="public">QuantLib::Null</innerclass>
    <innerclass refid="classQuantLib_1_1NullCalendar" prot="public">QuantLib::NullCalendar</innerclass>
    <innerclass refid="classQuantLib_1_1NullCondition" prot="public">QuantLib::NullCondition</innerclass>
    <innerclass refid="classQuantLib_1_1NullPayoff" prot="public">QuantLib::NullPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1Observable" prot="public">QuantLib::Observable</innerclass>
    <innerclass refid="classQuantLib_1_1ObservableSettings" prot="public">QuantLib::ObservableSettings</innerclass>
    <innerclass refid="classQuantLib_1_1ObservableValue" prot="public">QuantLib::ObservableValue</innerclass>
    <innerclass refid="classQuantLib_1_1Observer" prot="public">QuantLib::Observer</innerclass>
    <innerclass refid="classQuantLib_1_1OneAssetOption" prot="public">QuantLib::OneAssetOption</innerclass>
    <innerclass refid="classQuantLib_1_1OperatorTraits" prot="public">QuantLib::OperatorTraits</innerclass>
    <innerclass refid="classQuantLib_1_1Option" prot="public">QuantLib::Option</innerclass>
    <innerclass refid="classQuantLib_1_1Parabolic" prot="public">QuantLib::Parabolic</innerclass>
    <innerclass refid="classQuantLib_1_1Payoff" prot="public">QuantLib::Payoff</innerclass>
    <innerclass refid="classQuantLib_1_1PercentageStrikePayoff" prot="public">QuantLib::PercentageStrikePayoff</innerclass>
    <innerclass refid="classQuantLib_1_1Period" prot="public">QuantLib::Period</innerclass>
    <innerclass refid="classQuantLib_1_1PlainVanillaPayoff" prot="public">QuantLib::PlainVanillaPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1PricingEngine" prot="public">QuantLib::PricingEngine</innerclass>
    <innerclass refid="classQuantLib_1_1QdFpAmericanEngine" prot="public">QuantLib::QdFpAmericanEngine</innerclass>
    <innerclass refid="classQuantLib_1_1QdFpIterationScheme" prot="public">QuantLib::QdFpIterationScheme</innerclass>
    <innerclass refid="classQuantLib_1_1QdFpLegendreScheme" prot="public">QuantLib::QdFpLegendreScheme</innerclass>
    <innerclass refid="classQuantLib_1_1QdFpLegendreTanhSinhScheme" prot="public">QuantLib::QdFpLegendreTanhSinhScheme</innerclass>
    <innerclass refid="classQuantLib_1_1QdFpTanhSinhIterationScheme" prot="public">QuantLib::QdFpTanhSinhIterationScheme</innerclass>
    <innerclass refid="classQuantLib_1_1QdPlusAmericanEngine" prot="public">QuantLib::QdPlusAmericanEngine</innerclass>
    <innerclass refid="classQuantLib_1_1QdPlusBoundaryEvaluator" prot="public">QuantLib::QdPlusBoundaryEvaluator</innerclass>
    <innerclass refid="classQuantLib_1_1QuantoTermStructure" prot="public">QuantLib::QuantoTermStructure</innerclass>
    <innerclass refid="classQuantLib_1_1Quote" prot="public">QuantLib::Quote</innerclass>
    <innerclass refid="classQuantLib_1_1RelinkableHandle" prot="public">QuantLib::RelinkableHandle</innerclass>
    <innerclass refid="classQuantLib_1_1Ridder" prot="public">QuantLib::Ridder</innerclass>
    <innerclass refid="classQuantLib_1_1SavedSettings" prot="public">QuantLib::SavedSettings</innerclass>
    <innerclass refid="classQuantLib_1_1SecondDerivativeOp" prot="public">QuantLib::SecondDerivativeOp</innerclass>
    <innerclass refid="classQuantLib_1_1Settings" prot="public">QuantLib::Settings</innerclass>
    <innerclass refid="classQuantLib_1_1SimpleQuote" prot="public">QuantLib::SimpleQuote</innerclass>
    <innerclass refid="classQuantLib_1_1SimpsonIntegral" prot="public">QuantLib::SimpsonIntegral</innerclass>
    <innerclass refid="classQuantLib_1_1Singleton" prot="public">QuantLib::Singleton</innerclass>
    <innerclass refid="classQuantLib_1_1Solver1D" prot="public">QuantLib::Solver1D</innerclass>
    <innerclass refid="classQuantLib_1_1SpreadBasketPayoff" prot="public">QuantLib::SpreadBasketPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1step__iterator" prot="public">QuantLib::step_iterator</innerclass>
    <innerclass refid="classQuantLib_1_1StepCondition" prot="public">QuantLib::StepCondition</innerclass>
    <innerclass refid="classQuantLib_1_1StochasticProcess" prot="public">QuantLib::StochasticProcess</innerclass>
    <innerclass refid="classQuantLib_1_1StochasticProcess1D" prot="public">QuantLib::StochasticProcess1D</innerclass>
    <innerclass refid="classQuantLib_1_1StrikedTypePayoff" prot="public">QuantLib::StrikedTypePayoff</innerclass>
    <innerclass refid="classQuantLib_1_1SuperFundPayoff" prot="public">QuantLib::SuperFundPayoff</innerclass>
    <innerclass refid="classQuantLib_1_1SuperSharePayoff" prot="public">QuantLib::SuperSharePayoff</innerclass>
    <innerclass refid="classQuantLib_1_1SymmetricSchurDecomposition" prot="public">QuantLib::SymmetricSchurDecomposition</innerclass>
    <innerclass refid="classQuantLib_1_1TabulatedGaussLegendre" prot="public">QuantLib::TabulatedGaussLegendre</innerclass>
    <innerclass refid="classQuantLib_1_1TanhSinhIntegral" prot="public">QuantLib::TanhSinhIntegral</innerclass>
    <innerclass refid="classQuantLib_1_1TermStructure" prot="public">QuantLib::TermStructure</innerclass>
    <innerclass refid="classQuantLib_1_1TimeGrid" prot="public">QuantLib::TimeGrid</innerclass>
    <innerclass refid="classQuantLib_1_1TqrEigenDecomposition" prot="public">QuantLib::TqrEigenDecomposition</innerclass>
    <innerclass refid="classQuantLib_1_1TrapezoidIntegral" prot="public">QuantLib::TrapezoidIntegral</innerclass>
    <innerclass refid="classQuantLib_1_1TrBDF2Scheme" prot="public">QuantLib::TrBDF2Scheme</innerclass>
    <innerclass refid="classQuantLib_1_1TridiagonalOperator" prot="public">QuantLib::TridiagonalOperator</innerclass>
    <innerclass refid="classQuantLib_1_1TripleBandLinearOp" prot="public">QuantLib::TripleBandLinearOp</innerclass>
    <innerclass refid="classQuantLib_1_1TypePayoff" prot="public">QuantLib::TypePayoff</innerclass>
    <innerclass refid="classQuantLib_1_1Uniform1dMesher" prot="public">QuantLib::Uniform1dMesher</innerclass>
    <innerclass refid="classQuantLib_1_1VanillaOption" prot="public">QuantLib::VanillaOption</innerclass>
    <innerclass refid="classQuantLib_1_1Visitor" prot="public">QuantLib::Visitor</innerclass>
    <innerclass refid="classQuantLib_1_1VolatilityTermStructure" prot="public">QuantLib::VolatilityTermStructure</innerclass>
    <innerclass refid="classQuantLib_1_1YieldTermStructure" prot="public">QuantLib::YieldTermStructure</innerclass>
    <innerclass refid="classQuantLib_1_1ZeroYieldStructure" prot="public">QuantLib::ZeroYieldStructure</innerclass>
    <innernamespace refid="namespaceQuantLib_1_1anonymous__namespace_02calendar_8cpp_03">QuantLib::anonymous_namespace{calendar.cpp}</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1anonymous__namespace_02concentrating1dmesher_8cpp_03">QuantLib::anonymous_namespace{concentrating1dmesher.cpp}</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1anonymous__namespace_02fdminnervaluecalculator_8cpp_03">QuantLib::anonymous_namespace{fdminnervaluecalculator.cpp}</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1anonymous__namespace_02fdmmeshercomposite_8cpp_03">QuantLib::anonymous_namespace{fdmmeshercomposite.cpp}</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1anonymous__namespace_02impliedvolatility_8cpp_03">QuantLib::anonymous_namespace{impliedvolatility.cpp}</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1anonymous__namespace_02period_8cpp_03">QuantLib::anonymous_namespace{period.cpp}</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1anonymous__namespace_02yieldtermstructure_8cpp_03">QuantLib::anonymous_namespace{yieldtermstructure.cpp}</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1chebyshev__interpolation__detail">QuantLib::chebyshev_interpolation_detail</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1detail">QuantLib::detail</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1ext">QuantLib::ext</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1io">QuantLib::io</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1MINPACK">QuantLib::MINPACK</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceQuantLib_1a1d1b94285bc6741279c70fac8b34265b" prot="public" static="no" strong="no">
        <type></type>
        <name>Compounding</name>
        <qualifiedname>QuantLib::Compounding</qualifiedname>
        <enumvalue id="namespaceQuantLib_1a1d1b94285bc6741279c70fac8b34265ba82b011cf5024ff4e4031afa165185934" prot="public">
          <name>Simple</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para><formula id="0">$ 1+rt $</formula> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a1d1b94285bc6741279c70fac8b34265bad20ee0c1742383b76eabab94f8d05709" prot="public">
          <name>Compounded</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para><formula id="1">$ (1+r)^t $</formula> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a1d1b94285bc6741279c70fac8b34265baae77494393cf12a7dd3634b002d4ffda" prot="public">
          <name>Continuous</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para><formula id="2">$ e^{rt} $</formula> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a1d1b94285bc6741279c70fac8b34265ba362e6db944d3ceec628d3b537d877c43" prot="public">
          <name>SimpleThenCompounded</name>
          <briefdescription>
<para>Simple up to the first period then Compounded. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a1d1b94285bc6741279c70fac8b34265ba03eaf561978a8027e1cf8d6e38c5a890" prot="public">
          <name>CompoundedThenSimple</name>
          <briefdescription>
<para>Compounded up to the first period then Simple. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interest rate coumpounding rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/compounding.hpp" line="32" column="5" bodyfile="ql/compounding.hpp" bodystart="32" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceQuantLib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" prot="public" static="no" strong="no">
        <type></type>
        <name>BusinessDayConvention</name>
        <qualifiedname>QuantLib::BusinessDayConvention</qualifiedname>
        <enumvalue id="namespaceQuantLib_1ac95a4b5bc8017f1eb4ad0b54a9af3881ad881bac893a17d75191f0041eefda956" prot="public">
          <name>Following</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the first business day after the given holiday. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1ac95a4b5bc8017f1eb4ad0b54a9af3881aaa730fc5548402fd95e95f1c57f9a535" prot="public">
          <name>ModifiedFollowing</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the first business day after the given holiday unless it belongs to a different month, in which case choose the first business day before the holiday. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1ac95a4b5bc8017f1eb4ad0b54a9af3881a4fc14cfd1593e872bbe3c8a4429d1a1f" prot="public">
          <name>Preceding</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the first business day before the given holiday. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1ac95a4b5bc8017f1eb4ad0b54a9af3881a9b4da4fc0dfcb46d879645f8501ab645" prot="public">
          <name>ModifiedPreceding</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the first business day before the given holiday unless it belongs to a different month, in which case choose the first business day after the holiday. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1ac95a4b5bc8017f1eb4ad0b54a9af3881a6a9f8f55985b149ed0c336c23bf03667" prot="public">
          <name>Unadjusted</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Do not adjust. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1ac95a4b5bc8017f1eb4ad0b54a9af3881a248a27cb448948bf67124edc19a58e8c" prot="public">
          <name>HalfMonthModifiedFollowing</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the first business day after the given holiday unless that day crosses the mid-month (15th) or the end of month, in which case choose the first business day before the holiday. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1ac95a4b5bc8017f1eb4ad0b54a9af3881aa6c83e096b1da365ee4944baa6f38cfa" prot="public">
          <name>Nearest</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the nearest business day to the given holiday. If both the preceding and following business days are equally far away, default to following business day. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Business Day conventions. </para>
        </briefdescription>
        <detaileddescription>
<para>These conventions specify the algorithm used to adjust a date in case it is not a valid business day. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/businessdayconvention.hpp" line="41" column="5" bodyfile="ql/time/businessdayconvention.hpp" bodystart="41" bodyend="70"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4" prot="public" static="no" strong="no">
        <type></type>
        <name>Month</name>
        <qualifiedname>QuantLib::Month</qualifiedname>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a2c2c73e76831dec3bfead45af4e7e293" prot="public">
          <name>January</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a3f87835e65eb79538ed8df9dac30e8e9" prot="public">
          <name>February</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a982c9e93cf4b41f4b71b5c256df6191c" prot="public">
          <name>March</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a5a127587551e502c20dd25f3cb95c670" prot="public">
          <name>April</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4ab7f0de9de43d10d9740019f24a55b001" prot="public">
          <name>May</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a88068fdc3953ea6e86797179bb2f7d70" prot="public">
          <name>June</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a6e2eb13b444eddc908b702f9e3030b15" prot="public">
          <name>July</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a296c9233a021e0f88646d10cfba16888" prot="public">
          <name>August</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4ad4e26bc88f6e25cf9e31ba9400771d49" prot="public">
          <name>September</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a11958aa29b8f50ce93f5d5f6f86c545f" prot="public">
          <name>October</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4acb4e488d1e8bac8be4f273d27e102b61" prot="public">
          <name>November</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4ad4988bf6760edb92c088bb47d4b61dc5" prot="public">
          <name>December</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a457c3d6657917c0414293ce6754833b8" prot="public">
          <name>Jan</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a3d6dae4a84cb8f0701574e6fe4877b69" prot="public">
          <name>Feb</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a9423a6f4fbf54c61ee104ecdb148534b" prot="public">
          <name>Mar</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4aa95877840fe6dfb27996d4fc4c458abc" prot="public">
          <name>Apr</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a9239fe34697e9ee89623abf0e43c1247" prot="public">
          <name>Jun</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a88808a65bd354ff767dcda5830b5bb78" prot="public">
          <name>Jul</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a086af941ae1ee2a1aed911ff9d6c737d" prot="public">
          <name>Aug</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a76af2c385b98542daf200e8a3b79695c" prot="public">
          <name>Sep</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a387573c3eab5da802b5e4fb3858b4efc" prot="public">
          <name>Oct</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a550739cdbe8dbe77d47fc5ba98ec0821" prot="public">
          <name>Nov</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4a902aa90a18751b6719b08669d21d44ae" prot="public">
          <name>Dec</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Month names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="57" column="5" bodyfile="ql/time/date.hpp" bodystart="57" bodyend="80"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4a" prot="public" static="no" strong="no">
        <type></type>
        <name>Frequency</name>
        <qualifiedname>QuantLib::Frequency</qualifiedname>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aae04188e899e91092d93c66f5c071c10a" prot="public">
          <name>NoFrequency</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>null frequency </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aa2d996c8102a0ad3aff8481e4745da342" prot="public">
          <name>Once</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>only once, e.g., a zero-coupon </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aac6003519ba84c016466307b35221e4cf" prot="public">
          <name>Annual</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>once a year </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aa42f77cc0a4f660a207fe2e743601350b" prot="public">
          <name>Semiannual</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>twice a year </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aa6b6b2cce89e2ca091fd758562fcf4efd" prot="public">
          <name>EveryFourthMonth</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>every fourth month </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aa128af3894a995861df674f940dfc9182" prot="public">
          <name>Quarterly</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>every third month </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aa0488c3f8abdd2b0928d82026aa83f820" prot="public">
          <name>Bimonthly</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>every second month </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aa4880ecc06ab77951b9e412bffce54bcc" prot="public">
          <name>Monthly</name>
          <initializer>= 12</initializer>
          <briefdescription>
<para>once a month </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aa9f2e5e117ef7d4476d4e68f1a3b8b686" prot="public">
          <name>EveryFourthWeek</name>
          <initializer>= 13</initializer>
          <briefdescription>
<para>every fourth week </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aa130e66366fab228ccb63744d611d4a34" prot="public">
          <name>Biweekly</name>
          <initializer>= 26</initializer>
          <briefdescription>
<para>every second week </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aaa26d25f89765abb5991c11da044154e8" prot="public">
          <name>Weekly</name>
          <initializer>= 52</initializer>
          <briefdescription>
<para>once a week </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aa6f587e1a2ffe021368830ea9d66db57e" prot="public">
          <name>Daily</name>
          <initializer>= 365</initializer>
          <briefdescription>
<para>once a day </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4aaabe847a4e077cb73df13269cccbebd80" prot="public">
          <name>OtherFrequency</name>
          <initializer>= 999</initializer>
          <briefdescription>
<para>some other unknown frequency </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Frequency of events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/frequency.hpp" line="37" column="5" bodyfile="ql/time/frequency.hpp" bodystart="37" bodyend="50"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3" prot="public" static="no" strong="no">
        <type></type>
        <name>TimeUnit</name>
        <qualifiedname>QuantLib::TimeUnit</qualifiedname>
        <enumvalue id="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3ac2d73aad1a6496a6481563e7b5e62b36" prot="public">
          <name>Days</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3abfe6416a9a483125b6b22548c1ff3947" prot="public">
          <name>Weeks</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3a3d158b618e2bf6e66da9aca81f706dae" prot="public">
          <name>Months</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3ae2d856134531729a1696e66bebeafb32" prot="public">
          <name>Years</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3a1e03bf732fbb6356f297f4766528dc23" prot="public">
          <name>Hours</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3a2ba434f5f52baf58c8e99e75c095b528" prot="public">
          <name>Minutes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3a0e19e43c4c19000b900d33015c64be1a" prot="public">
          <name>Seconds</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3a57ff062a5f22b3b38ceaeaf3e9e0e919" prot="public">
          <name>Milliseconds</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3a137726dab52609c9475af297e0eb74f6" prot="public">
          <name>Microseconds</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Units used to describe time periods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/timeunit.hpp" line="37" column="5" bodyfile="ql/time/timeunit.hpp" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6" prot="public" static="no" strong="no">
        <type></type>
        <name>Weekday</name>
        <qualifiedname>QuantLib::Weekday</qualifiedname>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a6276c6480efe5dff72b2ded9b08045e3" prot="public">
          <name>Sunday</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a343f0198d8acd83e1c107d54ff1894c5" prot="public">
          <name>Monday</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a63b8da2448dd3be7feb6369119d4795b" prot="public">
          <name>Tuesday</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a82560a361ba61b99299e185e7f298b50" prot="public">
          <name>Wednesday</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a6018f190eda6c2550956d8a73e12b91e" prot="public">
          <name>Thursday</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a0414532d5d35575576577f13d0005599" prot="public">
          <name>Friday</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a5057b5122f5d5e92e76e8824f664c8bc" prot="public">
          <name>Saturday</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a9cd72a7efe1fe31c2f07c5f94d24ba89" prot="public">
          <name>Sun</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a024eac8b78a99ce129ac382c53b115ba" prot="public">
          <name>Mon</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6ac1d8f19a11962d922cf9f7efa643d99a" prot="public">
          <name>Tue</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6af09606b00728538eec8687ecc8dad130" prot="public">
          <name>Wed</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a058b7db05f160070f18c29cfff08ba0a" prot="public">
          <name>Thu</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6a9ae720e18595ffcecddaf5103ce954eb" prot="public">
          <name>Fri</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6afaf90e2f28470dadffe6e18c7bd78a7d" prot="public">
          <name>Sat</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Day&apos;s serial number MOD 7; WEEKDAY Excel function is the same except for Sunday = 7. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/weekday.hpp" line="41" column="5" bodyfile="ql/time/weekday.hpp" bodystart="41" bodyend="55"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceQuantLib_1a14f786c47ee979097c448d96b2defaab" prot="public" static="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="classQuantLib_1_1CashFlow" kindref="compound">CashFlow</ref> &gt; &gt;</type>
        <definition>typedef std::vector&lt;ext::shared_ptr&lt;CashFlow&gt; &gt; QuantLib::Leg</definition>
        <argsstring></argsstring>
        <name>Leg</name>
        <qualifiedname>QuantLib::Leg</qualifiedname>
        <briefdescription>
<para>Sequence of cash-flows. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflow.hpp" line="78" column="25" bodyfile="ql/cashflow.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a0a379fde0de6fd228a3365e3c519fe68" prot="public" static="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="classQuantLib_1_1Dividend" kindref="compound">Dividend</ref> &gt; &gt;</type>
        <definition>typedef std::vector&lt;ext::shared_ptr&lt;Dividend&gt; &gt; QuantLib::DividendSchedule</definition>
        <argsstring></argsstring>
        <name>DividendSchedule</name>
        <qualifiedname>QuantLib::DividendSchedule</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/dividendschedule.hpp" line="33" column="25" bodyfile="ql/instruments/dividendschedule.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a06fe4de3ddef540084a4102898ef08dc" prot="public" static="no">
        <type><ref refid="classQuantLib_1_1NormalDistribution" kindref="compound">NormalDistribution</ref></type>
        <definition>typedef NormalDistribution QuantLib::GaussianDistribution</definition>
        <argsstring></argsstring>
        <name>GaussianDistribution</name>
        <qualifiedname>QuantLib::GaussianDistribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/normaldistribution.hpp" line="56" column="32" bodyfile="ql/math/distributions/normaldistribution.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1aa9e247bbdf728a8239a22b609bef9491" prot="public" static="no">
        <type><ref refid="classQuantLib_1_1InverseCumulativeNormal" kindref="compound">InverseCumulativeNormal</ref></type>
        <definition>typedef InverseCumulativeNormal QuantLib::InvCumulativeNormalDistribution</definition>
        <argsstring></argsstring>
        <name>InvCumulativeNormalDistribution</name>
        <qualifiedname>QuantLib::InvCumulativeNormalDistribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/normaldistribution.hpp" line="176" column="37" bodyfile="ql/math/distributions/normaldistribution.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a64877f814000faa1279a1f2be0e10fd0" prot="public" static="no">
        <type><ref refid="classQuantLib_1_1detail_1_1GaussianQuadratureIntegrator" kindref="compound">detail::GaussianQuadratureIntegrator</ref>&lt; <ref refid="classQuantLib_1_1GaussLegendreIntegration" kindref="compound">GaussLegendreIntegration</ref> &gt;</type>
        <definition>typedef detail::GaussianQuadratureIntegrator&lt;GaussLegendreIntegration&gt; QuantLib::GaussLegendreIntegrator</definition>
        <argsstring></argsstring>
        <name>GaussLegendreIntegrator</name>
        <qualifiedname>QuantLib::GaussLegendreIntegrator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/gaussianquadratures.hpp" line="246" column="9" bodyfile="ql/math/integrals/gaussianquadratures.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a4bf483c03def8d3d3c1713b7b33d119c" prot="public" static="no">
        <type><ref refid="classQuantLib_1_1detail_1_1GaussianQuadratureIntegrator" kindref="compound">detail::GaussianQuadratureIntegrator</ref>&lt; <ref refid="classQuantLib_1_1GaussChebyshevIntegration" kindref="compound">GaussChebyshevIntegration</ref> &gt;</type>
        <definition>typedef detail::GaussianQuadratureIntegrator&lt;GaussChebyshevIntegration&gt; QuantLib::GaussChebyshevIntegrator</definition>
        <argsstring></argsstring>
        <name>GaussChebyshevIntegrator</name>
        <qualifiedname>QuantLib::GaussChebyshevIntegrator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/gaussianquadratures.hpp" line="249" column="9" bodyfile="ql/math/integrals/gaussianquadratures.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a595fd4c0947b2bebaa1d1e3906ae827c" prot="public" static="no">
        <type><ref refid="classQuantLib_1_1detail_1_1GaussianQuadratureIntegrator" kindref="compound">detail::GaussianQuadratureIntegrator</ref>&lt; <ref refid="classQuantLib_1_1GaussChebyshev2ndIntegration" kindref="compound">GaussChebyshev2ndIntegration</ref> &gt;</type>
        <definition>typedef detail::GaussianQuadratureIntegrator&lt;GaussChebyshev2ndIntegration&gt; QuantLib::GaussChebyshev2ndIntegrator</definition>
        <argsstring></argsstring>
        <name>GaussChebyshev2ndIntegrator</name>
        <qualifiedname>QuantLib::GaussChebyshev2ndIntegrator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/gaussianquadratures.hpp" line="252" column="9" bodyfile="ql/math/integrals/gaussianquadratures.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a92b8d18d2ff98d5c92d103939bba4a52" prot="public" static="no">
        <type>boost::numeric::ublas::compressed_matrix&lt; <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>typedef boost::numeric::ublas::compressed_matrix&lt;Real&gt; QuantLib::SparseMatrix</definition>
        <argsstring></argsstring>
        <name>SparseMatrix</name>
        <qualifiedname>QuantLib::SparseMatrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/sparsematrix.hpp" line="48" column="54" bodyfile="ql/math/matrixutilities/sparsematrix.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a0ef628a05cb0d158091b5d3c80f3cb4f" prot="public" static="no">
        <type>boost::numeric::ublas::matrix_reference&lt; <ref refid="namespaceQuantLib_1a92b8d18d2ff98d5c92d103939bba4a52" kindref="member">SparseMatrix</ref> &gt;</type>
        <definition>typedef boost::numeric::ublas::matrix_reference&lt;SparseMatrix&gt; QuantLib::SparseMatrixReference</definition>
        <argsstring></argsstring>
        <name>SparseMatrixReference</name>
        <qualifiedname>QuantLib::SparseMatrixReference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/sparsematrix.hpp" line="49" column="53" bodyfile="ql/math/matrixutilities/sparsematrix.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1af064f77bc69893c110a3797657b02c42" prot="public" static="no">
        <type><ref refid="classQuantLib_1_1OperatorTraits" kindref="compound">OperatorTraits</ref>&lt; <ref refid="classQuantLib_1_1FdmLinearOp" kindref="compound">FdmLinearOp</ref> &gt;::bc_set</type>
        <definition>typedef OperatorTraits&lt;FdmLinearOp&gt;::bc_set QuantLib::FdmBoundaryConditionSet</definition>
        <argsstring></argsstring>
        <name>FdmBoundaryConditionSet</name>
        <qualifiedname>QuantLib::FdmBoundaryConditionSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/utilities/fdmboundaryconditionset.hpp" line="32" column="37" bodyfile="ql/methods/finitedifferences/utilities/fdmboundaryconditionset.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a7354a4ac9189352870cbb0cb998e0bd4" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>typedef Integer QuantLib::Day</definition>
        <argsstring></argsstring>
        <name>Day</name>
        <qualifiedname>QuantLib::Day</qualifiedname>
        <briefdescription>
<para>Day number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="53" column="21" bodyfile="ql/time/date.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a5dcda5470aff130981ac30f25d4244e7" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>typedef Integer QuantLib::Year</definition>
        <argsstring></argsstring>
        <name>Year</name>
        <qualifiedname>QuantLib::Year</qualifiedname>
        <briefdescription>
<para>Year number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="87" column="21" bodyfile="ql/time/date.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a8ac1a45a37d8d3dda438a2e59e222620" prot="public" static="no">
        <type><ref refid="qldefines_8hpp_1aeba270dad09b1d31a93c93e5e5c273ee" kindref="member">QL_INTEGER</ref></type>
        <definition>typedef QL_INTEGER QuantLib::Integer</definition>
        <argsstring></argsstring>
        <name>Integer</name>
        <qualifiedname>QuantLib::Integer</qualifiedname>
        <briefdescription>
<para>integer number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="35" column="24" bodyfile="ql/types.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a8ee2a478658b664ea4ad96babd0ca719" prot="public" static="no">
        <type><ref refid="qldefines_8hpp_1ac0af28ce0e6b5bc528da65d835033d9f" kindref="member">QL_BIG_INTEGER</ref></type>
        <definition>typedef QL_BIG_INTEGER QuantLib::BigInteger</definition>
        <argsstring></argsstring>
        <name>BigInteger</name>
        <qualifiedname>QuantLib::BigInteger</qualifiedname>
        <briefdescription>
<para>large integer number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="39" column="28" bodyfile="ql/types.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a9adc2615d630d6006896b3402b09b03b" prot="public" static="no">
        <type>unsigned <ref refid="qldefines_8hpp_1aeba270dad09b1d31a93c93e5e5c273ee" kindref="member">QL_INTEGER</ref></type>
        <definition>typedef unsigned QL_INTEGER QuantLib::Natural</definition>
        <argsstring></argsstring>
        <name>Natural</name>
        <qualifiedname>QuantLib::Natural</qualifiedname>
        <briefdescription>
<para>positive integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="43" column="33" bodyfile="ql/types.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a9fbc8c414c2b597d214cca2f9e914740" prot="public" static="no">
        <type>unsigned <ref refid="qldefines_8hpp_1ac0af28ce0e6b5bc528da65d835033d9f" kindref="member">QL_BIG_INTEGER</ref></type>
        <definition>typedef unsigned QL_BIG_INTEGER QuantLib::BigNatural</definition>
        <argsstring></argsstring>
        <name>BigNatural</name>
        <qualifiedname>QuantLib::BigNatural</qualifiedname>
        <briefdescription>
<para>large positive integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="46" column="37" bodyfile="ql/types.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" prot="public" static="no">
        <type><ref refid="qldefines_8hpp_1a6cd5447573538d963f7906d588ebbb0d" kindref="member">QL_REAL</ref></type>
        <definition>typedef QL_REAL QuantLib::Real</definition>
        <argsstring></argsstring>
        <name>Real</name>
        <qualifiedname>QuantLib::Real</qualifiedname>
        <briefdescription>
<para>real number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="50" column="21" bodyfile="ql/types.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a65c9fada9109c70ad823e8e5177c9568" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Decimal</definition>
        <argsstring></argsstring>
        <name>Decimal</name>
        <qualifiedname>QuantLib::Decimal</qualifiedname>
        <briefdescription>
<para>decimal number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="54" column="18" bodyfile="ql/types.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t QuantLib::Size</definition>
        <argsstring></argsstring>
        <name>Size</name>
        <qualifiedname>QuantLib::Size</qualifiedname>
        <briefdescription>
<para>size of a container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="58" column="25" bodyfile="ql/types.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Time</definition>
        <argsstring></argsstring>
        <name>Time</name>
        <qualifiedname>QuantLib::Time</qualifiedname>
        <briefdescription>
<para>continuous quantity with 1-year units </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="62" column="18" bodyfile="ql/types.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::DiscountFactor</definition>
        <argsstring></argsstring>
        <name>DiscountFactor</name>
        <qualifiedname>QuantLib::DiscountFactor</qualifiedname>
        <briefdescription>
<para>discount factor between dates </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="66" column="18" bodyfile="ql/types.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1a919ba3567cc89fca373f8d6b8e80126b" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Rate</definition>
        <argsstring></argsstring>
        <name>Rate</name>
        <qualifiedname>QuantLib::Rate</qualifiedname>
        <briefdescription>
<para>interest rates </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="70" column="18" bodyfile="ql/types.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1ad61d2e1a3f01154233de0d5fbb85177c" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Spread</definition>
        <argsstring></argsstring>
        <name>Spread</name>
        <qualifiedname>QuantLib::Spread</qualifiedname>
        <briefdescription>
<para>spreads on interest rates </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="74" column="18" bodyfile="ql/types.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1ae3abfa256de5aa2b506ab6bda014e4dc" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Volatility</definition>
        <argsstring></argsstring>
        <name>Volatility</name>
        <qualifiedname>QuantLib::Volatility</qualifiedname>
        <briefdescription>
<para>volatility </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="78" column="18" bodyfile="ql/types.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceQuantLib_1ac41728dd3be3e1869bbb9aec06a89d60" prot="public" static="no">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Probability</definition>
        <argsstring></argsstring>
        <name>Probability</name>
        <qualifiedname>QuantLib::Probability</qualifiedname>
        <briefdescription>
<para>probability </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="82" column="18" bodyfile="ql/types.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceQuantLib_1af14ea64532456e27c861e7d93b9fec71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="classQuantLib_1_1Dividend" kindref="compound">Dividend</ref> &gt; &gt;</type>
        <definition>std::vector&lt; ext::shared_ptr&lt; Dividend &gt; &gt; QuantLib::DividendVector</definition>
        <argsstring>(const std::vector&lt; Date &gt; &amp;dividendDates, const std::vector&lt; Real &gt; &amp;dividends)</argsstring>
        <name>DividendVector</name>
        <qualifiedname>QuantLib::DividendVector</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>dividendDates</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>dividends</declname>
        </param>
        <briefdescription>
<para>helper function building a sequence of fixed dividends </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/dividend.cpp" line="35" column="5" bodyfile="ql/cashflows/dividend.cpp" bodystart="35" bodyend="51" declfile="ql/cashflows/dividend.hpp" declline="102" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aa1f92a20de5394ddf9fe3a49a6ce0d2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Compounding &amp;compounding)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceQuantLib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref> &amp;</type>
          <declname>compounding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/compounding.hpp" line="39" column="12" bodyfile="ql/compounding.hpp" bodystart="39" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a0054e0dbb2841e79bedfdfabf36d85bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const InterestRate &amp;ir)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1InterestRate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/interestrate.cpp" line="115" column="5" bodyfile="ql/interestrate.cpp" bodystart="115" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aa4a9ece3a7c58b84a51c185798672654" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::DotProduct</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>DotProduct</name>
        <qualifiedname>QuantLib::DotProduct</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="541" column="17" bodyfile="ql/math/array.hpp" bodystart="541" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a4fe258b9e084694e3f45a68a86aa38e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Norm2</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>Norm2</name>
        <qualifiedname>QuantLib::Norm2</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="548" column="17" bodyfile="ql/math/array.hpp" bodystart="548" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="556" column="18" bodyfile="ql/math/array.hpp" bodystart="556" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ad47293e15e67e70b77b5846b95ce813f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="561" column="18" bodyfile="ql/math/array.hpp" bodystart="561" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="565" column="18" bodyfile="ql/math/array.hpp" bodystart="565" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ac1ca120e7dfdf909825dbbd57d01b4d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="571" column="18" bodyfile="ql/math/array.hpp" bodystart="571" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a1e8b0513239cabecb87fe405f362e129" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="579" column="18" bodyfile="ql/math/array.hpp" bodystart="579" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a9abd53aac0b38c6a2c08c0c80790bef2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(const Array &amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="588" column="18" bodyfile="ql/math/array.hpp" bodystart="588" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1acefb8413ea775b023c2e58861ad20480" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Array &amp;&amp;v1, const Array &amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="597" column="18" bodyfile="ql/math/array.hpp" bodystart="597" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a5763a44a370bed0de60b33f554ccf81f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Array &amp;&amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="606" column="18" bodyfile="ql/math/array.hpp" bodystart="606" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a8b4dbddd4e0bb3e6ae2084b3946d2a14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(const Array &amp;v1, Real a)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="615" column="18" bodyfile="ql/math/array.hpp" bodystart="615" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1af050ca2cfcb8e9b64850180bcd34c840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Array &amp;&amp;v1, Real a)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="621" column="18" bodyfile="ql/math/array.hpp" bodystart="621" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ac77b99cc1228359b51fb1aa4db8c9ab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Real a, const Array &amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="627" column="18" bodyfile="ql/math/array.hpp" bodystart="627" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a118e8b50a8461771845f5a5857a118a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Real a, Array &amp;&amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="633" column="18" bodyfile="ql/math/array.hpp" bodystart="633" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aafcd152e7ee5098b6a29fea837a0bea0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="639" column="18" bodyfile="ql/math/array.hpp" bodystart="639" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ac4b89babf2c872a3a7334d22fe17e565" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(const Array &amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="648" column="18" bodyfile="ql/math/array.hpp" bodystart="648" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a6ddcdc9201d62c28aa51ae944a497b87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Array &amp;&amp;v1, const Array &amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="657" column="18" bodyfile="ql/math/array.hpp" bodystart="657" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a67fd69031f8a6ebb4c65a4bfbd8f925b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Array &amp;&amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="666" column="18" bodyfile="ql/math/array.hpp" bodystart="666" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a23ae9524eda708c282909ed406ec4538" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(const Array &amp;v1, Real a)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="675" column="18" bodyfile="ql/math/array.hpp" bodystart="675" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a4f713aaa2408f452c9535e0fed08cf4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Array &amp;&amp;v1, Real a)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="681" column="18" bodyfile="ql/math/array.hpp" bodystart="681" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a4af19bfdc31f783b39c26d125b981553" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Real a, const Array &amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="687" column="18" bodyfile="ql/math/array.hpp" bodystart="687" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a173d87c678fb815b6011fd317eaf42af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Real a, Array &amp;&amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="693" column="18" bodyfile="ql/math/array.hpp" bodystart="693" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a2cd51621fd12c13a7049b91c0c92052b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="699" column="18" bodyfile="ql/math/array.hpp" bodystart="699" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a2815a7ffb73d752ac6193ee26bea60f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(const Array &amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="708" column="18" bodyfile="ql/math/array.hpp" bodystart="708" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a8143835faadffc9edbaee52291238aa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(Array &amp;&amp;v1, const Array &amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="717" column="18" bodyfile="ql/math/array.hpp" bodystart="717" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a3011eafdba2228157f09e53dd71da3c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(Array &amp;&amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="726" column="18" bodyfile="ql/math/array.hpp" bodystart="726" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a784aea347fba744cfa44697b38c9aa20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(const Array &amp;v1, Real a)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="735" column="18" bodyfile="ql/math/array.hpp" bodystart="735" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a3a672b500eba6c9dfa4d0ef65d092b4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(Array &amp;&amp;v1, Real a)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="741" column="18" bodyfile="ql/math/array.hpp" bodystart="741" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1af883e644510cbebe01951a412682faa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(Real a, const Array &amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="747" column="18" bodyfile="ql/math/array.hpp" bodystart="747" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a8d250f45468cf6af6e93e20d46174701" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(Real a, Array &amp;&amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="753" column="18" bodyfile="ql/math/array.hpp" bodystart="753" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a052237465c718b089ec0426570c2470e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="759" column="18" bodyfile="ql/math/array.hpp" bodystart="759" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ac28b9a97427bbdb32ddcba0e5f037d69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(const Array &amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="768" column="18" bodyfile="ql/math/array.hpp" bodystart="768" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a231c69dd5e207510c504b875716a1f41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(Array &amp;&amp;v1, const Array &amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="777" column="18" bodyfile="ql/math/array.hpp" bodystart="777" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ac1fe214ebdb4823fc652a46e2e1a8f04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(Array &amp;&amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="786" column="18" bodyfile="ql/math/array.hpp" bodystart="786" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aeba0097adadb963e9d9e548fedd1e40d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(const Array &amp;v1, Real a)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="795" column="18" bodyfile="ql/math/array.hpp" bodystart="795" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a78f6acb34d88712654bf29dd0b7a3111" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(Array &amp;&amp;v1, Real a)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="801" column="18" bodyfile="ql/math/array.hpp" bodystart="801" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a9b21b2ce1338fbfffcf4b01cb856f0a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(Real a, const Array &amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="807" column="18" bodyfile="ql/math/array.hpp" bodystart="807" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aa372aba45868d6c52a33b630e97a4a05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(Real a, Array &amp;&amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="813" column="18" bodyfile="ql/math/array.hpp" bodystart="813" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aa08e748d0a5ac9e3be936aef17925277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Abs</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>Abs</name>
        <qualifiedname>QuantLib::Abs</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="821" column="18" bodyfile="ql/math/array.hpp" bodystart="821" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a506605c1d399a555ad9d27b67d849b67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Abs</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>Abs</name>
        <qualifiedname>QuantLib::Abs</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="828" column="18" bodyfile="ql/math/array.hpp" bodystart="828" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a4c4350d9d3f1337e5cb861aaae9bb429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Sqrt</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>Sqrt</name>
        <qualifiedname>QuantLib::Sqrt</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="835" column="18" bodyfile="ql/math/array.hpp" bodystart="835" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ab55306184bf80a012f748bfb1e6696cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Sqrt</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>Sqrt</name>
        <qualifiedname>QuantLib::Sqrt</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="842" column="18" bodyfile="ql/math/array.hpp" bodystart="842" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aee0cc7ff1877a11feea2c7cf910420c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Log</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>Log</name>
        <qualifiedname>QuantLib::Log</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="849" column="18" bodyfile="ql/math/array.hpp" bodystart="849" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1add4dbd0633736f019e8246c84422384e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Log</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>Log</name>
        <qualifiedname>QuantLib::Log</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="856" column="18" bodyfile="ql/math/array.hpp" bodystart="856" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aef201109400c40cbe3d288ae3a089050" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Exp</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>Exp</name>
        <qualifiedname>QuantLib::Exp</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="863" column="18" bodyfile="ql/math/array.hpp" bodystart="863" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ad4d062080fed12ac36ffc4735dd05d29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Exp</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>Exp</name>
        <qualifiedname>QuantLib::Exp</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="870" column="18" bodyfile="ql/math/array.hpp" bodystart="870" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a17a2d93c7122f82926983b2b804790f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Pow</definition>
        <argsstring>(const Array &amp;v, Real alpha)</argsstring>
        <name>Pow</name>
        <qualifiedname>QuantLib::Pow</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="877" column="18" bodyfile="ql/math/array.hpp" bodystart="877" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a1b1b21812287472b53f972e20743b899" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Pow</definition>
        <argsstring>(Array &amp;&amp;v, Real alpha)</argsstring>
        <name>Pow</name>
        <qualifiedname>QuantLib::Pow</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="884" column="18" bodyfile="ql/math/array.hpp" bodystart="884" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1abf7c7f13964ae2a6c277bc0b84e6f943" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::swap</definition>
        <argsstring>(Array &amp;v, Array &amp;w) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::swap</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="891" column="17" bodyfile="ql/math/array.hpp" bodystart="891" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a52ef55b6166b2771a2177d1faad6057d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Array &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="895" column="12" bodyfile="ql/math/array.hpp" bodystart="895" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a8c358786ff7da50c785ca5a003b1c9c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close</definition>
        <argsstring>(Real x, Real y)</argsstring>
        <name>close</name>
        <qualifiedname>QuantLib::close</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Follows somewhat the advice of Knuth on checking for floating-point equality. The closeness relationship is:  <formula id="6">\[
\mathrm{close}(x,y,n) \equiv |x-y| \leq \varepsilon |x|
                      \wedge |x-y| \leq \varepsilon |y|
\]</formula> where <formula id="7">$ \varepsilon $</formula> is <formula id="8">$ n $</formula> times the machine accuracy; <formula id="8">$ n $</formula> equals 42 if not given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/comparison.hpp" line="59" column="17" bodyfile="ql/math/comparison.hpp" bodystart="59" bodyend="76" declfile="ql/math/comparison.hpp" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a6c7d567e5aab30971ebdf825f68915df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close</definition>
        <argsstring>(Real x, Real y, Size n)</argsstring>
        <name>close</name>
        <qualifiedname>QuantLib::close</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/comparison.hpp" line="78" column="17" bodyfile="ql/math/comparison.hpp" bodystart="78" bodyend="90" declfile="ql/math/comparison.hpp" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1acba7cc9670305b8b6164bc87319313de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close_enough</definition>
        <argsstring>(Real x, Real y)</argsstring>
        <name>close_enough</name>
        <qualifiedname>QuantLib::close_enough</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Follows somewhat the advice of Knuth on checking for floating-point equality. The closeness relationship is:  <formula id="9">\[
\mathrm{close}(x,y,n) \equiv |x-y| \leq \varepsilon |x|
                        \vee |x-y| \leq \varepsilon |y|
\]</formula> where <formula id="7">$ \varepsilon $</formula> is <formula id="8">$ n $</formula> times the machine accuracy; <formula id="8">$ n $</formula> equals 42 if not given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/comparison.hpp" line="92" column="17" bodyfile="ql/math/comparison.hpp" bodystart="92" bodyend="107" declfile="ql/math/comparison.hpp" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a9ecd715bc2a5c091c7e7105e61602c88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close_enough</definition>
        <argsstring>(Real x, Real y, Size n)</argsstring>
        <name>close_enough</name>
        <qualifiedname>QuantLib::close_enough</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/comparison.hpp" line="109" column="17" bodyfile="ql/math/comparison.hpp" bodystart="109" bodyend="121" declfile="ql/math/comparison.hpp" declline="54" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a24ba492c85497930da7ee785b05918b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T QuantLib::squared</definition>
        <argsstring>(T x)</argsstring>
        <name>squared</name>
        <qualifiedname>QuantLib::squared</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/functional.hpp" line="37" column="14" bodyfile="ql/math/functional.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1afac69fe09598d10aea08bd744cab2806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::inverse</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>inverse</name>
        <qualifiedname>QuantLib::inverse</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.cpp" line="44" column="12" bodyfile="ql/math/matrix.cpp" bodystart="44" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ab0f6618a644ad7e28a603ec95dc48230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::determinant</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>determinant</name>
        <qualifiedname>QuantLib::determinant</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.cpp" line="81" column="10" bodyfile="ql/math/matrix.cpp" bodystart="81" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a68987ff5c51603479bb76256f38571b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator+</definition>
        <argsstring>(const Matrix &amp;m1, const Matrix &amp;m2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="524" column="19" bodyfile="ql/math/matrix.hpp" bodystart="524" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1afef71f390ad028a2fcac9712111bf0fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator+</definition>
        <argsstring>(const Matrix &amp;m1, Matrix &amp;&amp;m2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="536" column="19" bodyfile="ql/math/matrix.hpp" bodystart="536" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1afd28aba0f7f18aace1c5e8ac5c0de54a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator+</definition>
        <argsstring>(Matrix &amp;&amp;m1, const Matrix &amp;m2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="547" column="19" bodyfile="ql/math/matrix.hpp" bodystart="547" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a6acbdf8f81d5ee6ab8870d4291a4ff3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator+</definition>
        <argsstring>(Matrix &amp;&amp;m1, Matrix &amp;&amp;m2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="558" column="19" bodyfile="ql/math/matrix.hpp" bodystart="558" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ab0ff799d4999e836910eb6d3d815806c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(const Matrix &amp;m1)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="569" column="19" bodyfile="ql/math/matrix.hpp" bodystart="569" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a8c699d9e688e42b9f105626953ab2cde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(Matrix &amp;&amp;m1)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="575" column="19" bodyfile="ql/math/matrix.hpp" bodystart="575" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a62ad458caa68b785420c55ee6090ced4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(const Matrix &amp;m1, const Matrix &amp;m2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="580" column="19" bodyfile="ql/math/matrix.hpp" bodystart="580" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a61435e613fd8b1e138e4b2bc68ce86af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(const Matrix &amp;m1, Matrix &amp;&amp;m2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="592" column="19" bodyfile="ql/math/matrix.hpp" bodystart="592" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a8dcf1acaa220dbc48aabf81012f1782a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(Matrix &amp;&amp;m1, const Matrix &amp;m2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="603" column="19" bodyfile="ql/math/matrix.hpp" bodystart="603" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a13c581e7603d97618b468182837fdfc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(Matrix &amp;&amp;m1, Matrix &amp;&amp;m2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="614" column="19" bodyfile="ql/math/matrix.hpp" bodystart="614" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ae335c2de100fa3f2373f4a05131b1757" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator*</definition>
        <argsstring>(const Matrix &amp;m, Real x)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="625" column="19" bodyfile="ql/math/matrix.hpp" bodystart="625" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a10bb277375e5cc841b4c3052a331c12e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator*</definition>
        <argsstring>(Matrix &amp;&amp;m, Real x)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="631" column="19" bodyfile="ql/math/matrix.hpp" bodystart="631" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ab78dd002ca57277698090bc2800e75f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator*</definition>
        <argsstring>(Real x, const Matrix &amp;m)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="636" column="19" bodyfile="ql/math/matrix.hpp" bodystart="636" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aa4d778f98f495bd9369a8dab6aec487b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator*</definition>
        <argsstring>(Real x, Matrix &amp;&amp;m)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="642" column="19" bodyfile="ql/math/matrix.hpp" bodystart="642" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a626595fd19669c1589b2da8997c7c284" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator/</definition>
        <argsstring>(const Matrix &amp;m, Real x)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="647" column="19" bodyfile="ql/math/matrix.hpp" bodystart="647" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a441a06b75a259f2430639525e1094f12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator/</definition>
        <argsstring>(Matrix &amp;&amp;m, Real x)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="653" column="19" bodyfile="ql/math/matrix.hpp" bodystart="653" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a5db9a5fa6245daa92f143027926ec16f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(const Array &amp;v, const Matrix &amp;m)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="658" column="18" bodyfile="ql/math/matrix.hpp" bodystart="658" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ae382b32fefc7d478247446ba385b9bfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(const Matrix &amp;m, const Array &amp;v)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="671" column="18" bodyfile="ql/math/matrix.hpp" bodystart="671" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a09024cc0f513ed50b152d8cf24e6dbcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator*</definition>
        <argsstring>(const Matrix &amp;m1, const Matrix &amp;m2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="683" column="19" bodyfile="ql/math/matrix.hpp" bodystart="683" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aebac9d15b12ee006122a611d3d603c48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::transpose</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>transpose</name>
        <qualifiedname>QuantLib::transpose</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="700" column="19" bodyfile="ql/math/matrix.hpp" bodystart="700" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aff0e93c3e50edc052ff586aa7efc41d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::outerProduct</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>outerProduct</name>
        <qualifiedname>QuantLib::outerProduct</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="710" column="19" bodyfile="ql/math/matrix.hpp" bodystart="710" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a7959e6a3c9739189a8afc7ee62d5ccb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator1</type>
          </param>
          <param>
            <type>class Iterator2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::outerProduct</definition>
        <argsstring>(Iterator1 v1begin, Iterator1 v1end, Iterator2 v2begin, Iterator2 v2end)</argsstring>
        <name>outerProduct</name>
        <qualifiedname>QuantLib::outerProduct</qualifiedname>
        <param>
          <type>Iterator1</type>
          <declname>v1begin</declname>
        </param>
        <param>
          <type>Iterator1</type>
          <declname>v1end</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>v2begin</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>v2end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="715" column="19" bodyfile="ql/math/matrix.hpp" bodystart="715" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aedfb6f5a37878986618b2d3d277ed669" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::swap</definition>
        <argsstring>(Matrix &amp;m1, Matrix &amp;m2) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::swap</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="732" column="17" bodyfile="ql/math/matrix.hpp" bodystart="732" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a7d7b60ae77974222881e3eea97b6a1ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Matrix &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="736" column="12" bodyfile="ql/math/matrix.hpp" bodystart="736" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ac3c71fcacccbdc38dcf3e5d286bd75d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt; Size &gt; QuantLib::qrDecomposition</definition>
        <argsstring>(const Matrix &amp;A, Matrix &amp;q, Matrix &amp;r, bool pivot=true)</argsstring>
        <name>qrDecomposition</name>
        <qualifiedname>QuantLib::qrDecomposition</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pivot</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>QR decompoisition. </para>
        </briefdescription>
        <detaileddescription>
<para>This implementation is based on <ref refid="namespaceQuantLib_1_1MINPACK" kindref="compound">MINPACK</ref> (<ulink url="http://www.netlib.org/minpack">http://www.netlib.org/minpack</ulink>, <ulink url="http://www.netlib.org/cephes/linalg.tgz">http://www.netlib.org/cephes/linalg.tgz</ulink>)</para>
<para>This subroutine uses householder transformations with column pivoting (optional) to compute a qr factorization of the m by n matrix A. That is, qrfac determines an orthogonal matrix q, a permutation matrix p, and an upper trapezoidal matrix r with diagonal elements of nonincreasing magnitude, such that A*p = q*r.</para>
<para>Return value ipvt is an integer array of length n, which defines the permutation matrix p such that A*p = q*r. Column j of p is column ipvt(j) of the identity matrix.</para>
<para>See lmdiff.cpp for further details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/qrdecomposition.cpp" line="30" column="17" bodyfile="ql/math/matrixutilities/qrdecomposition.cpp" bodystart="30" bodyend="123" declfile="ql/math/matrixutilities/qrdecomposition.hpp" declline="49" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a91d2a9f5f45584ed32c5804d1a8c18a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::qrSolve</definition>
        <argsstring>(const Matrix &amp;a, const Array &amp;b, bool pivot=true, const Array &amp;d=Array())</argsstring>
        <name>qrSolve</name>
        <qualifiedname>QuantLib::qrSolve</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pivot</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>d</declname>
          <defval><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>()</defval>
        </param>
        <briefdescription>
<para>QR Solve. </para>
        </briefdescription>
        <detaileddescription>
<para>This implementation is based on <ref refid="namespaceQuantLib_1_1MINPACK" kindref="compound">MINPACK</ref> (<ulink url="http://www.netlib.org/minpack">http://www.netlib.org/minpack</ulink>, <ulink url="http://www.netlib.org/cephes/linalg.tgz">http://www.netlib.org/cephes/linalg.tgz</ulink>)</para>
<para>Given an m by n matrix A, an n by n diagonal matrix d, and an m-vector b, the problem is to determine an x which solves the system</para>
<para>A*x = b , d*x = 0 ,</para>
<para>in the least squares sense.</para>
<para>d is an input array of length n which must contain the diagonal elements of the matrix d.</para>
<para>See lmdiff.cpp for further details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/qrdecomposition.cpp" line="125" column="11" bodyfile="ql/math/matrixutilities/qrdecomposition.cpp" bodystart="125" bodyend="159" declfile="ql/math/matrixutilities/qrdecomposition.hpp" declline="72" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a766d4538a7117b7d079b10d27e3dd6d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::prod</definition>
        <argsstring>(const SparseMatrix &amp;A, const Array &amp;x)</argsstring>
        <name>prod</name>
        <qualifiedname>QuantLib::prod</qualifiedname>
        <param>
          <type>const <ref refid="namespaceQuantLib_1a92b8d18d2ff98d5c92d103939bba4a52" kindref="member">SparseMatrix</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/sparsematrix.hpp" line="51" column="18" bodyfile="ql/math/matrixutilities/sparsematrix.hpp" bodystart="51" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a7798b6e50e91110f9236e811611fe90a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::swap</definition>
        <argsstring>(TridiagonalOperator &amp;, TridiagonalOperator &amp;) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::swap</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <defname>L1</defname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <defname>L2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="252" column="17" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="252" bodyend="255" declfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" declline="122" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a1cf1218ebb74607cc8c43303ec6c7d80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator+</definition>
        <argsstring>(const TridiagonalOperator &amp;D)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="194" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ab19f5a3ce4b69ddb92515528a7c258f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator-</definition>
        <argsstring>(const TridiagonalOperator &amp;D)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="199" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="199" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a54129227e502fe9b8a9aee95cd69e6b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator+</definition>
        <argsstring>(const TridiagonalOperator &amp;D1, const TridiagonalOperator &amp;D2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="207" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a393872cbf2e3cee8930f105330317935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator-</definition>
        <argsstring>(const TridiagonalOperator &amp;D1, const TridiagonalOperator &amp;D2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="216" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="216" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a8a09864c01b2d0027935521a21e10e22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator*</definition>
        <argsstring>(Real a, const TridiagonalOperator &amp;D)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="225" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="225" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a069419c337994a51d004def677189367" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator*</definition>
        <argsstring>(const TridiagonalOperator &amp;D, Real a)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="234" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="234" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1af788467c6646328b5ff82d8f0c8e9f94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator/</definition>
        <argsstring>(const TridiagonalOperator &amp;D, Real a)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1TridiagonalOperator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="243" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="243" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ae4c79f7c09f563bc9adb1c866710cbb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Option::Type type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1Option_1abaee7fc605354c444867545492cd5845" kindref="member">Option::Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/option.hpp" line="100" column="12" bodyfile="ql/option.hpp" bodystart="100" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1acd8fb1fecf3710d5cc0cbd9799a8d7a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Handle" kindref="compound">Handle</ref>&lt; <ref refid="classQuantLib_1_1Quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt; Quote &gt; QuantLib::handleFromVariant</definition>
        <argsstring>(const std::variant&lt; Real, Handle&lt; Quote &gt; &gt; &amp;value)</argsstring>
        <name>handleFromVariant</name>
        <qualifiedname>QuantLib::handleFromVariant</qualifiedname>
        <param>
          <type>const std::variant&lt; <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="classQuantLib_1_1Handle" kindref="compound">Handle</ref>&lt; <ref refid="classQuantLib_1_1Quote" kindref="compound">Quote</ref> &gt; &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quote.cpp" line="27" column="12" bodyfile="ql/quote.cpp" bodystart="27" bodyend="34" declfile="ql/quote.hpp" declline="48" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a7564e44890fde5012ea227f78094a53d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1RelinkableHandle" kindref="compound">RelinkableHandle</ref>&lt; <ref refid="classQuantLib_1_1Quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>RelinkableHandle&lt; Quote &gt; QuantLib::makeQuoteHandle</definition>
        <argsstring>(Real value)</argsstring>
        <name>makeQuoteHandle</name>
        <qualifiedname>QuantLib::makeQuoteHandle</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/simplequote.hpp" line="56" column="29" bodyfile="ql/quotes/simplequote.hpp" bodystart="56" bodyend="58" declfile="ql/quotes/simplequote.hpp" declline="51" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a7046253575cf5c7e373ee41b2c1dce74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Settings::DateProxy &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Settings_1_1DateProxy" kindref="compound">Settings::DateProxy</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/settings.cpp" line="29" column="5" bodyfile="ql/settings.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a69ca90695682266782a08c6a9f4505f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, BusinessDayConvention b)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/businessdayconvention.cpp" line="29" column="5" bodyfile="ql/time/businessdayconvention.cpp" bodystart="29" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aff0529f579c3fc3b660dad1026109de7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Calendar &amp;c1, const Calendar &amp;c2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/calendar.hpp" line="274" column="17" bodyfile="ql/time/calendar.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a19a4f94f75c7e933b3aed06742a46ba8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Calendar &amp;c1, const Calendar &amp;c2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/calendar.hpp" line="279" column="17" bodyfile="ql/time/calendar.hpp" bodystart="279" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a71139d379a2b25ee4452e6979653f556" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Calendar &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/calendar.hpp" line="283" column="12" bodyfile="ql/time/calendar.hpp" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a99ee32a3c70c7a141e325168149cca45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Month m)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1afc504c75e7ee54a75e255256d99781e4" kindref="member">Month</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.cpp" line="815" column="5" bodyfile="ql/time/date.cpp" bodystart="815" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1adf641a7f1cdbede89a7d3e797f8d113e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t QuantLib::hash_value</definition>
        <argsstring>(const Date &amp;d)</argsstring>
        <name>hash_value</name>
        <qualifiedname>QuantLib::hash_value</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.cpp" line="846" column="17" bodyfile="ql/time/date.cpp" bodystart="846" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a711be0f3d347baaedb56f53acd388cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Date &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.cpp" line="859" column="5" bodyfile="ql/time/date.cpp" bodystart="859" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aad596cddfd4abcb746e65b8d02c79bb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Date_1a2fbbbf87429ca9d86bde4e068eb028d6" kindref="member">Date::serial_type</ref></type>
        <definition>Date::serial_type QuantLib::operator-</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="434" column="30" bodyfile="ql/time/date.hpp" bodystart="434" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a10a0bb0e4050e038cb995ed25c67c528" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::daysBetween</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>daysBetween</name>
        <qualifiedname>QuantLib::daysBetween</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="438" column="17" bodyfile="ql/time/date.hpp" bodystart="438" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a6cc73aa41c7c1ebd149a5ce830048882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="442" column="17" bodyfile="ql/time/date.hpp" bodystart="442" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a9da3d28011638a8f77ca9fd1c4ab8112" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="446" column="17" bodyfile="ql/time/date.hpp" bodystart="446" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a56706db303604f99dd6ab1715976a384" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="450" column="12" bodyfile="ql/time/date.hpp" bodystart="450" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a935c98778402c989f88cc7c70611e359" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;=</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="454" column="12" bodyfile="ql/time/date.hpp" bodystart="454" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a7f00f7e4f41c3b2fe49bc27d5c47fdf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="458" column="17" bodyfile="ql/time/date.hpp" bodystart="458" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ad2e5a31d179cbdbe481120263e5fffa0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;=</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="462" column="17" bodyfile="ql/time/date.hpp" bodystart="462" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aba4b6beb668dc3f37a5f90e551af5852" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const DayCounter &amp;d1, const DayCounter &amp;d2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1DayCounter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1DayCounter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/daycounter.hpp" line="135" column="17" bodyfile="ql/time/daycounter.hpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ab25448ebfeb8e23ad91ff9bd70072872" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const DayCounter &amp;d1, const DayCounter &amp;d2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1DayCounter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1DayCounter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/daycounter.hpp" line="140" column="17" bodyfile="ql/time/daycounter.hpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ad024bf1a504a5887a6efdfc53bb2b9c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const DayCounter &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1DayCounter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/daycounter.hpp" line="144" column="12" bodyfile="ql/time/daycounter.hpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ac938f8acf80376fd7ed9b9c581b0ba6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Frequency f)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/frequency.cpp" line="29" column="5" bodyfile="ql/time/frequency.cpp" bodystart="29" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a57eceac6f1592ea8cc729381e5e54a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::years</definition>
        <argsstring>(const Period &amp;p)</argsstring>
        <name>years</name>
        <qualifiedname>QuantLib::years</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="279" column="10" bodyfile="ql/time/period.cpp" bodystart="279" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ad2902624f74e9dc7f69adac5fea9f77f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::months</definition>
        <argsstring>(const Period &amp;p)</argsstring>
        <name>months</name>
        <qualifiedname>QuantLib::months</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="296" column="10" bodyfile="ql/time/period.cpp" bodystart="296" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a8259c501ef8b2120f3c2c1f6f282030e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::weeks</definition>
        <argsstring>(const Period &amp;p)</argsstring>
        <name>weeks</name>
        <qualifiedname>QuantLib::weeks</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="313" column="10" bodyfile="ql/time/period.cpp" bodystart="313" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a8f13561bdf9354d38c3d149c745b5c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::days</definition>
        <argsstring>(const Period &amp;p)</argsstring>
        <name>days</name>
        <qualifiedname>QuantLib::days</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="330" column="10" bodyfile="ql/time/period.cpp" bodystart="330" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ac6891687e7b7a070cab0ac765365c0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="347" column="5" bodyfile="ql/time/period.cpp" bodystart="347" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1acd40b5ad69292ad5e80c9989a6b48487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator+</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="380" column="12" bodyfile="ql/time/period.cpp" bodystart="380" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a25285b788c7768b2fb82a143199b9926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator-</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="386" column="12" bodyfile="ql/time/period.cpp" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a81d01050eafa4fd41cfe25394195610a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator/</definition>
        <argsstring>(const Period &amp;p, Integer n)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="390" column="12" bodyfile="ql/time/period.cpp" bodystart="390" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a61e42ab8cba5d3bd728b74720e5202e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Period &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="398" column="5" bodyfile="ql/time/period.cpp" bodystart="398" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a26a1ae8ba98b630db20bbf8e3cb84dfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator*</definition>
        <argsstring>(T n, TimeUnit units)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3" kindref="member">TimeUnit</ref></type>
          <declname>units</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="147" column="19" bodyfile="ql/time/period.hpp" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a6f649f42e064b47f3124c6c31f539dc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator*</definition>
        <argsstring>(TimeUnit units, T n)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3" kindref="member">TimeUnit</ref></type>
          <declname>units</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="152" column="19" bodyfile="ql/time/period.hpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a4ed581464d2437b3c22965f83a79671f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator-</definition>
        <argsstring>(const Period &amp;p)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="156" column="19" bodyfile="ql/time/period.hpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1aeece485f65be4b6cf0a843988480a44f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator*</definition>
        <argsstring>(Integer n, const Period &amp;p)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="158" column="19" bodyfile="ql/time/period.hpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1ab8a9b34d971fd3eea6d366eabec7fff3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator*</definition>
        <argsstring>(const Period &amp;p, Integer n)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="160" column="19" bodyfile="ql/time/period.hpp" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a31207e6c1ca6e853a41d8bf942e268b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="162" column="17" bodyfile="ql/time/period.hpp" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a9b4cd3aebfbb1e76d9d8082724e25f54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="166" column="17" bodyfile="ql/time/period.hpp" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a780be6bbec860087105ae605f33ef12f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="170" column="17" bodyfile="ql/time/period.hpp" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a9dd44fbc745bf453225c34eb592aed51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;=</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="174" column="12" bodyfile="ql/time/period.hpp" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a267e28df2c93b4d3f9914023e0d8ec73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;=</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="178" column="17" bodyfile="ql/time/period.hpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a7db7a79dfd0196c446a82c9e2cd36477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const TimeUnit &amp;timeunit)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceQuantLib_1a6cdac5e2dae1e972076cc8e3302e4ad3" kindref="member">TimeUnit</ref> &amp;</type>
          <declname>timeunit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/timeunit.cpp" line="28" column="5" bodyfile="ql/time/timeunit.cpp" bodystart="28" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQuantLib_1a251502ad94105a4add7643c6bb02474e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Weekday &amp;w)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceQuantLib_1a04474aebb0bea95bba2f1dcbdd8a27a6" kindref="member">Weekday</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/weekday.cpp" line="32" column="5" bodyfile="ql/time/weekday.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/any.hpp" line="37" column="1"/>
  </compounddef>
</doxygen>
