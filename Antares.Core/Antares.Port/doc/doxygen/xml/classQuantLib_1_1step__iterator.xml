<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classQuantLib_1_1step__iterator" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::step_iterator</compoundname>
    <includes refid="steppingiterator_8hpp" local="no">steppingiterator.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Iterator</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classQuantLib_1_1step__iterator_1a1ab2e3433fe6f07e6a5fb723981ab4fb" prot="public" static="no">
        <type>typename std::iterator_traits&lt; Iterator &gt;::iterator_category</type>
        <definition>using QuantLib::step_iterator&lt; Iterator &gt;::iterator_category =  typename std::iterator_traits&lt;Iterator&gt;::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <qualifiedname>QuantLib::step_iterator::iterator_category</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="51" column="9" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1step__iterator_1af4eabf872447a4fa5daed73f8d3b86b5" prot="public" static="no">
        <type>typename std::iterator_traits&lt; Iterator &gt;::difference_type</type>
        <definition>using QuantLib::step_iterator&lt; Iterator &gt;::difference_type =  typename std::iterator_traits&lt;Iterator&gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>QuantLib::step_iterator::difference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="52" column="9" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1step__iterator_1a5d30d9bf87eb302380df2e986fcc2efc" prot="public" static="no">
        <type>typename std::iterator_traits&lt; Iterator &gt;::value_type</type>
        <definition>using QuantLib::step_iterator&lt; Iterator &gt;::value_type =  typename std::iterator_traits&lt;Iterator&gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>QuantLib::step_iterator::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="53" column="9" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1step__iterator_1a10a11ea7c1dbbd9b7b9be40c614e3b02" prot="public" static="no">
        <type>typename std::iterator_traits&lt; Iterator &gt;::pointer</type>
        <definition>using QuantLib::step_iterator&lt; Iterator &gt;::pointer =  typename std::iterator_traits&lt;Iterator&gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <qualifiedname>QuantLib::step_iterator::pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="54" column="9" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuantLib_1_1step__iterator_1a3af299a01ffc8ae8696fde41d023442f" prot="public" static="no">
        <type>typename std::iterator_traits&lt; Iterator &gt;::reference</type>
        <definition>using QuantLib::step_iterator&lt; Iterator &gt;::reference =  typename std::iterator_traits&lt;Iterator&gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>QuantLib::step_iterator::reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="55" column="9" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" prot="private" static="no" mutable="no">
        <type>Iterator</type>
        <definition>Iterator QuantLib::step_iterator&lt; Iterator &gt;::base_</definition>
        <argsstring></argsstring>
        <name>base_</name>
        <qualifiedname>QuantLib::step_iterator::base_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="46" column="18" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="variable" id="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceQuantLib_1a8ee2a478658b664ea4ad96babd0ca719" kindref="member">BigInteger</ref></type>
        <definition>BigInteger QuantLib::step_iterator&lt; Iterator &gt;::step_</definition>
        <argsstring></argsstring>
        <name>step_</name>
        <qualifiedname>QuantLib::step_iterator::step_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="48" column="20" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1a61929a2c883ff8b26880ddb1f4b9a97d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::step_iterator&lt; Iterator &gt;::step_iterator</definition>
        <argsstring>()=default</argsstring>
        <name>step_iterator</name>
        <qualifiedname>QuantLib::step_iterator::step_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="57" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1a84913b104795b7d1fefdd03e4e1e4ac1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::step_iterator&lt; Iterator &gt;::step_iterator</definition>
        <argsstring>(const Iterator &amp;base, Size step)</argsstring>
        <name>step_iterator</name>
        <qualifiedname>QuantLib::step_iterator::step_iterator</qualifiedname>
        <param>
          <type>const Iterator &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="59" column="18" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="59" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1ae6e6171d639e7e19f98c966af6982eb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OtherIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>QuantLib::step_iterator&lt; Iterator &gt;::step_iterator</definition>
        <argsstring>(const step_iterator&lt; OtherIterator &gt; &amp;i, std::enable_if_t&lt; std::is_convertible_v&lt; OtherIterator, Iterator &gt; &gt; *=nullptr)</argsstring>
        <name>step_iterator</name>
        <qualifiedname>QuantLib::step_iterator::step_iterator</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&lt; OtherIterator &gt; &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::enable_if_t&lt; std::is_convertible_v&lt; OtherIterator, Iterator &gt; &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="63" column="9" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1afe8982263ca95547ae2e0b58b9146971" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::step_iterator&lt; Iterator &gt;::step</definition>
        <argsstring>() const</argsstring>
        <name>step</name>
        <qualifiedname>QuantLib::step_iterator::step</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="68" column="14" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1a8b9b610e475a999ad35d7fa708771008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
        <definition>step_iterator &amp; QuantLib::step_iterator&lt; Iterator &gt;::operator=</definition>
        <argsstring>(const step_iterator &amp;other)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>QuantLib::step_iterator::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="70" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1a183f262a556ae9df3dd3c48129469cb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
        <definition>step_iterator &amp; QuantLib::step_iterator&lt; Iterator &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <qualifiedname>QuantLib::step_iterator::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="72" column="23" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1a64db4537e8ed523362fe2175f970f7ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref></type>
        <definition>step_iterator QuantLib::step_iterator&lt; Iterator &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <qualifiedname>QuantLib::step_iterator::operator++</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="77" column="23" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1aebc3f5885aef463c4670cc53826a8c2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator_1a3af299a01ffc8ae8696fde41d023442f" kindref="member">reference</ref></type>
        <definition>reference QuantLib::step_iterator&lt; Iterator &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::step_iterator::operator*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="83" column="19" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1a3904dc6127ed63c411f46e5093d8d9b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
        <definition>step_iterator &amp; QuantLib::step_iterator&lt; Iterator &gt;::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <qualifiedname>QuantLib::step_iterator::operator--</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="87" column="23" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1a656aae080dd7597c1c418929d214020b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref></type>
        <definition>step_iterator QuantLib::step_iterator&lt; Iterator &gt;::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <qualifiedname>QuantLib::step_iterator::operator--</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="92" column="23" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1aaec86fd17e6ce6b026b7c0eebe87e6ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
        <definition>step_iterator &amp; QuantLib::step_iterator&lt; Iterator &gt;::operator+=</definition>
        <argsstring>(Size n)</argsstring>
        <name>operator+=</name>
        <qualifiedname>QuantLib::step_iterator::operator+=</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="98" column="23" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1aa0981be8cd258d65458489d27b734736" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
        <definition>step_iterator &amp; QuantLib::step_iterator&lt; Iterator &gt;::operator-=</definition>
        <argsstring>(Size n)</argsstring>
        <name>operator-=</name>
        <qualifiedname>QuantLib::step_iterator::operator-=</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="103" column="23" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1a960d441d0d92d14219f30711fcef5870" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator_1a3af299a01ffc8ae8696fde41d023442f" kindref="member">reference</ref></type>
        <definition>reference QuantLib::step_iterator&lt; Iterator &gt;::operator[]</definition>
        <argsstring>(Size n) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>QuantLib::step_iterator::operator[]</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="108" column="19" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="108" bodyend="110"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classQuantLib_1_1step__iterator_1a80c76044148a2f98cf0be66eec6b3527" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref></type>
        <definition>step_iterator operator+</definition>
        <argsstring>(const step_iterator &amp;i, Size n)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::step_iterator::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="112" column="30" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="friend" id="classQuantLib_1_1step__iterator_1ab70ff8526d0beda24d6c461e7ef63961" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref></type>
        <definition>step_iterator operator+</definition>
        <argsstring>(Size n, const step_iterator &amp;i)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::step_iterator::operator+</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="116" column="30" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="friend" id="classQuantLib_1_1step__iterator_1a6230131cd003d2b5250a7fddbba059f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref></type>
        <definition>step_iterator operator-</definition>
        <argsstring>(const step_iterator &amp;i, Size n)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::step_iterator::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="120" column="30" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="friend" id="classQuantLib_1_1step__iterator_1a8b757499cfb2ff45c0857dda31848dd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQuantLib_1_1step__iterator_1af4eabf872447a4fa5daed73f8d3b86b5" kindref="member">difference_type</ref></type>
        <definition>difference_type operator-</definition>
        <argsstring>(const step_iterator &amp;lhs, const step_iterator &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::step_iterator::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="124" column="32" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="friend" id="classQuantLib_1_1step__iterator_1af1cdd06f36e931f8aac4e48a24db774a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const step_iterator &amp;lhs, const step_iterator &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::step_iterator::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="131" column="21" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="friend" id="classQuantLib_1_1step__iterator_1ade962bc7689b66c941a8728a81a15a3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const step_iterator &amp;lhs, const step_iterator &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::step_iterator::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="135" column="21" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="friend" id="classQuantLib_1_1step__iterator_1a8dd941a0ebc077b7d28eff99b43e72df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const step_iterator &amp;lhs, const step_iterator &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::step_iterator::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="139" column="16" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="139" bodyend="144"/>
      </memberdef>
      <memberdef kind="friend" id="classQuantLib_1_1step__iterator_1ac622789c6b53f3ba23c68eb4b9f4ee2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const step_iterator &amp;lhs, const step_iterator &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::step_iterator::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="146" column="21" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="146" bodyend="151"/>
      </memberdef>
      <memberdef kind="friend" id="classQuantLib_1_1step__iterator_1a448cdc1f734f8075e232e509c65315c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const step_iterator &amp;lhs, const step_iterator &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::step_iterator::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="153" column="16" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="153" bodyend="158"/>
      </memberdef>
      <memberdef kind="friend" id="classQuantLib_1_1step__iterator_1a88fa68b32da6083181fe565645ce2cb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const step_iterator &amp;lhs, const step_iterator &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::step_iterator::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="160" column="21" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="160" bodyend="165"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="related">
      <memberdef kind="function" id="classQuantLib_1_1step__iterator_1a8827eca53826b1ca424151b01e8bfb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&lt; Iterator &gt;</type>
        <definition>step_iterator&lt; Iterator &gt; make_step_iterator</definition>
        <argsstring>(Iterator it, Size step)</argsstring>
        <name>make_step_iterator</name>
        <qualifiedname>QuantLib::step_iterator::make_step_iterator</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>helper function to create step iterators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="171" column="19" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="171" bodyend="173"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Iterator advancing in constant steps. </para>
    </briefdescription>
    <detaileddescription>
<para>This iterator advances an underlying random-access iterator in steps of <formula id="8">$ n $</formula> positions, where <formula id="8">$ n $</formula> is a positive integer given upon construction. </para>
    </detaileddescription>
    <location file="ql/utilities/steppingiterator.hpp" line="44" column="5" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="44" bodyend="166"/>
    <listofallmembers>
      <member refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" prot="private" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>base_</name></member>
      <member refid="classQuantLib_1_1step__iterator_1af4eabf872447a4fa5daed73f8d3b86b5" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>difference_type</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a1ab2e3433fe6f07e6a5fb723981ab4fb" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>iterator_category</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a8827eca53826b1ca424151b01e8bfb37" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>make_step_iterator</name></member>
      <member refid="classQuantLib_1_1step__iterator_1ade962bc7689b66c941a8728a81a15a3a" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator!=</name></member>
      <member refid="classQuantLib_1_1step__iterator_1aebc3f5885aef463c4670cc53826a8c2b" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator*</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a80c76044148a2f98cf0be66eec6b3527" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator+</name></member>
      <member refid="classQuantLib_1_1step__iterator_1ab70ff8526d0beda24d6c461e7ef63961" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator+</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a183f262a556ae9df3dd3c48129469cb8" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator++</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a64db4537e8ed523362fe2175f970f7ac" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator++</name></member>
      <member refid="classQuantLib_1_1step__iterator_1aaec86fd17e6ce6b026b7c0eebe87e6ae" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator+=</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a6230131cd003d2b5250a7fddbba059f3" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator-</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a8b757499cfb2ff45c0857dda31848dd2" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator-</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a3904dc6127ed63c411f46e5093d8d9b3" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator--</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a656aae080dd7597c1c418929d214020b" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator--</name></member>
      <member refid="classQuantLib_1_1step__iterator_1aa0981be8cd258d65458489d27b734736" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator-=</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a8dd941a0ebc077b7d28eff99b43e72df" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator&lt;</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a448cdc1f734f8075e232e509c65315c0" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator&lt;=</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a8b9b610e475a999ad35d7fa708771008" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1step__iterator_1af1cdd06f36e931f8aac4e48a24db774a" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator==</name></member>
      <member refid="classQuantLib_1_1step__iterator_1ac622789c6b53f3ba23c68eb4b9f4ee2e" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator&gt;</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a88fa68b32da6083181fe565645ce2cb2" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator&gt;=</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a960d441d0d92d14219f30711fcef5870" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>operator[]</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a10a11ea7c1dbbd9b7b9be40c614e3b02" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>pointer</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a3af299a01ffc8ae8696fde41d023442f" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>reference</name></member>
      <member refid="classQuantLib_1_1step__iterator_1afe8982263ca95547ae2e0b58b9146971" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>step</name></member>
      <member refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" prot="private" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>step_</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a61929a2c883ff8b26880ddb1f4b9a97d" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>step_iterator</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a84913b104795b7d1fefdd03e4e1e4ac1" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>step_iterator</name></member>
      <member refid="classQuantLib_1_1step__iterator_1ae6e6171d639e7e19f98c966af6982eb8" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>step_iterator</name></member>
      <member refid="classQuantLib_1_1step__iterator_1a5d30d9bf87eb302380df2e986fcc2efc" prot="public" virt="non-virtual"><scope>QuantLib::step_iterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
