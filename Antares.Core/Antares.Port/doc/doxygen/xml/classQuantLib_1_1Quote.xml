<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classQuantLib_1_1Quote" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::Quote</compoundname>
    <basecompoundref refid="classQuantLib_1_1Observable" prot="public" virt="virtual">QuantLib::Observable</basecompoundref>
    <derivedcompoundref refid="classQuantLib_1_1SimpleQuote" prot="public" virt="non-virtual">QuantLib::SimpleQuote</derivedcompoundref>
    <includes refid="quote_8hpp" local="no">quote.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classQuantLib_1_1Quote_1a0433957cb1683b2ca329ef56bd741143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Quote::~Quote</definition>
        <argsstring>() override=default</argsstring>
        <name>~Quote</name>
        <qualifiedname>QuantLib::Quote::~Quote</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quote.hpp" line="40" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Quote_1a25f93d1c25434ae28f20f9416b497ccb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::Quote::value</definition>
        <argsstring>() const =0</argsstring>
        <name>value</name>
        <qualifiedname>QuantLib::Quote::value</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1SimpleQuote_1ad804b8ec07ce9d114f20fbcd093b2730">value</reimplementedby>
        <briefdescription>
<para>returns the current value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quote.hpp" line="42" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1Quote_1a9a340a974b8403b9385867b62bb8ae2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool QuantLib::Quote::isValid</definition>
        <argsstring>() const =0</argsstring>
        <name>isValid</name>
        <qualifiedname>QuantLib::Quote::isValid</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1SimpleQuote_1a14ad2f936e4e327e31f6090cc09db2ea">isValid</reimplementedby>
        <briefdescription>
<para>returns true if the <ref refid="classQuantLib_1_1Quote" kindref="compound">Quote</ref> holds a valid value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quote.hpp" line="44" column="22"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>purely virtual base class for market observables </para>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="test_1_test000019"><xreftitle>Test</xreftitle><xrefdescription><para>the observability of class instances is tested. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::Observable</label>
        <link refid="classQuantLib_1_1Observable"/>
      </node>
      <node id="1">
        <label>QuantLib::Quote</label>
        <link refid="classQuantLib_1_1Quote"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::SimpleQuote</label>
        <link refid="classQuantLib_1_1SimpleQuote"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::Observable</label>
        <link refid="classQuantLib_1_1Observable"/>
      </node>
      <node id="1">
        <label>QuantLib::Quote</label>
        <link refid="classQuantLib_1_1Quote"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/quote.hpp" line="38" column="5" bodyfile="ql/quote.hpp" bodystart="38" bodyend="45"/>
    <listofallmembers>
      <member refid="classQuantLib_1_1Quote_1a9a340a974b8403b9385867b62bb8ae2d" prot="public" virt="pure-virtual"><scope>QuantLib::Quote</scope><name>isValid</name></member>
      <member refid="classQuantLib_1_1Observable_1a07ad87c2c2599551463d0a529924dec2" prot="private" virt="non-virtual"><scope>QuantLib::Quote</scope><name>iterator</name></member>
      <member refid="classQuantLib_1_1Observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::Quote</scope><name>notifyObservers</name></member>
      <member refid="classQuantLib_1_1Observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::Quote</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::Quote</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::Quote</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observable_1a4da6017619203dcb570d5f4174f0beea" prot="private" virt="non-virtual"><scope>QuantLib::Quote</scope><name>observers_</name></member>
      <member refid="classQuantLib_1_1Observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual"><scope>QuantLib::Quote</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual"><scope>QuantLib::Quote</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Observable_1a1eb87a03e7e1fd43377bce32e0c21bce" prot="private" virt="non-virtual"><scope>QuantLib::Quote</scope><name>registerObserver</name></member>
      <member refid="classQuantLib_1_1Observable_1a22e674e99fccc2da996de9620304f63c" prot="private" virt="non-virtual"><scope>QuantLib::Quote</scope><name>set_type</name></member>
      <member refid="classQuantLib_1_1Observable_1abd81ef8b87594aa6f9d2a5bd5de3e628" prot="private" virt="non-virtual"><scope>QuantLib::Quote</scope><name>unregisterObserver</name></member>
      <member refid="classQuantLib_1_1Quote_1a25f93d1c25434ae28f20f9416b497ccb" prot="public" virt="pure-virtual"><scope>QuantLib::Quote</scope><name>value</name></member>
      <member refid="classQuantLib_1_1Observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::Quote</scope><name>~Observable</name></member>
      <member refid="classQuantLib_1_1Quote_1a0433957cb1683b2ca329ef56bd741143" prot="public" virt="non-virtual"><scope>QuantLib::Quote</scope><name>~Quote</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
