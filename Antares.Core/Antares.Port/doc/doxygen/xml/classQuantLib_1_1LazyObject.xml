<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classQuantLib_1_1LazyObject" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::LazyObject</compoundname>
    <basecompoundref refid="classQuantLib_1_1Observable" prot="public" virt="virtual">QuantLib::Observable</basecompoundref>
    <basecompoundref refid="classQuantLib_1_1Observer" prot="public" virt="virtual">QuantLib::Observer</basecompoundref>
    <derivedcompoundref refid="classQuantLib_1_1CashFlow" prot="public" virt="non-virtual">QuantLib::CashFlow</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1Fdm1DimSolver" prot="public" virt="non-virtual">QuantLib::Fdm1DimSolver</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1FdmBlackScholesSolver" prot="public" virt="non-virtual">QuantLib::FdmBlackScholesSolver</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1FlatForward" prot="public" virt="non-virtual">QuantLib::FlatForward</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1Instrument" prot="public" virt="non-virtual">QuantLib::Instrument</derivedcompoundref>
    <includes refid="lazyobject_8hpp" local="no">lazyobject.hpp</includes>
    <innerclass refid="classQuantLib_1_1LazyObject_1_1Defaults" prot="public">QuantLib::LazyObject::Defaults</innerclass>
    <innerclass refid="classQuantLib_1_1LazyObject_1_1UpdateChecker" prot="private">QuantLib::LazyObject::UpdateChecker</innerclass>
    <sectiondef kind="user-defined">
      <header>Notification settings</header>
      <memberdef kind="variable" id="classQuantLib_1_1LazyObject_1a58b4986a80efa18634483a92c121e26e" prot="protected" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool QuantLib::LazyObject::calculated_</definition>
        <argsstring></argsstring>
        <name>calculated_</name>
        <qualifiedname>QuantLib::LazyObject::calculated_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="129" column="22" bodyfile="ql/patterns/lazyobject.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQuantLib_1_1LazyObject_1a7bb721fe00c6854e602758aba629ab77" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::LazyObject::frozen_</definition>
        <argsstring></argsstring>
        <name>frozen_</name>
        <qualifiedname>QuantLib::LazyObject::frozen_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="129" column="35" bodyfile="ql/patterns/lazyobject.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQuantLib_1_1LazyObject_1a02070ea7442d30625992c1711030d4b8" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::LazyObject::alwaysForward_</definition>
        <argsstring></argsstring>
        <name>alwaysForward_</name>
        <qualifiedname>QuantLib::LazyObject::alwaysForward_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="129" column="44" bodyfile="ql/patterns/lazyobject.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQuantLib_1_1LazyObject_1ae2c605a452787b38d6a64cf20395a075" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::LazyObject::updating_</definition>
        <argsstring></argsstring>
        <name>updating_</name>
        <qualifiedname>QuantLib::LazyObject::updating_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="131" column="14" bodyfile="ql/patterns/lazyobject.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1afac6ee19c3107c453e1347dd8000e023" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::LazyObject::forwardFirstNotificationOnly</definition>
        <argsstring>()</argsstring>
        <name>forwardFirstNotificationOnly</name>
        <qualifiedname>QuantLib::LazyObject::forwardFirstNotificationOnly</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method causes the object to forward the first notification received, and discard the others until recalculated; the rationale is that observers were already notified, and don&apos;t need further notifications until they recalculate, at which point this object would be recalculated too. After recalculation, this object would again forward the first notification received.</para>
<para>Although not always correct, this behavior is a lot faster and thus is the current default. The default can be changed at compile time, or at at run time by calling <computeroutput><ref refid="classQuantLib_1_1Singleton_1ac412b7766b32f56372a3e966c5f3f386" kindref="member">LazyObject::Defaults::instance()</ref>.<ref refid="classQuantLib_1_1LazyObject_1a17c9433135a259e4776baec66204a484" kindref="member">alwaysForwardNotifications()</ref></computeroutput>; the run-time change won&apos;t affect lazy objects already created. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="114" column="14" bodyfile="ql/patterns/lazyobject.hpp" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1a17c9433135a259e4776baec66204a484" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::LazyObject::alwaysForwardNotifications</definition>
        <argsstring>()</argsstring>
        <name>alwaysForwardNotifications</name>
        <qualifiedname>QuantLib::LazyObject::alwaysForwardNotifications</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method causes the object to forward all notifications received.</para>
<para>Although safer, this behavior is a lot slower and thus usually not the default. The default can be changed at compile time, or at run-time by calling <computeroutput><ref refid="classQuantLib_1_1Singleton_1ac412b7766b32f56372a3e966c5f3f386" kindref="member">LazyObject::Defaults::instance()</ref>.<ref refid="classQuantLib_1_1LazyObject_1a17c9433135a259e4776baec66204a484" kindref="member">alwaysForwardNotifications()</ref></computeroutput>; the run-time change won&apos;t affect lazy objects already created. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="125" column="14" bodyfile="ql/patterns/lazyobject.hpp" bodystart="249" bodyend="251"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Observer interface</header>
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1adee2bf49be5c4c78736be293321a856d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::LazyObject::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::LazyObject::update</qualifiedname>
        <reimplements refid="classQuantLib_1_1Observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="41" column="14" bodyfile="ql/patterns/lazyobject.hpp" bodystart="188" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::LazyObject::isCalculated</definition>
        <argsstring>() const</argsstring>
        <name>isCalculated</name>
        <qualifiedname>QuantLib::LazyObject::isCalculated</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the instrument is calculated </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="44" column="14" bodyfile="ql/patterns/lazyobject.hpp" bodystart="266" bodyend="268"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Calculations</header>
      <description><para>These methods do not modify the structure of the object and are therefore declared as <computeroutput>const</computeroutput>. Data members which will be calculated on demand need to be declared as mutable. </para>
</description>
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::LazyObject::recalculate</definition>
        <argsstring>()</argsstring>
        <name>recalculate</name>
        <qualifiedname>QuantLib::LazyObject::recalculate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method force the recalculation of any results which would otherwise be cached. It is not declared as <computeroutput>const</computeroutput> since it needs to call the non-<computeroutput>const</computeroutput> <emphasis><bold>notifyObservers</bold></emphasis> method.</para>
<para><simplesect kind="note"><para>Explicit invocation of this method is <bold>not</bold> necessary if the object registered itself as observer with the structures on which such results depend. It is strongly advised to follow this policy when possible. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="63" column="14" bodyfile="ql/patterns/lazyobject.hpp" bodystart="218" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::LazyObject::freeze</definition>
        <argsstring>()</argsstring>
        <name>freeze</name>
        <qualifiedname>QuantLib::LazyObject::freeze</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method constrains the object to return the presently cached results on successive invocations, even if arguments upon which they depend should change. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="68" column="14" bodyfile="ql/patterns/lazyobject.hpp" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1a2e0e4786666453024b9d4e0761f2770b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::LazyObject::unfreeze</definition>
        <argsstring>()</argsstring>
        <name>unfreeze</name>
        <qualifiedname>QuantLib::LazyObject::unfreeze</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method reverts the effect of the <emphasis><bold>freeze</bold></emphasis> method, thus re-enabling recalculations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="72" column="14" bodyfile="ql/patterns/lazyobject.hpp" bodystart="236" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1a5244c7f83592375a0ea9048296435fd1" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::LazyObject::calculate</definition>
        <argsstring>() const</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::LazyObject::calculate</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1Instrument_1a4c573c48f7eaead5042864ac0eb5b025">calculate</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method performs all needed calculations by calling the <emphasis><bold>performCalculations</bold></emphasis> method.</para>
<para><simplesect kind="warning"><para>Objects cache the results of the previous calculation. Such results will be returned upon later invocations of <emphasis><bold>calculate</bold></emphasis>. When the results depend on arguments which could change between invocations, the lazy object must register itself as observer of such objects for the calculations to be performed again when they change.</para>
</simplesect>
<simplesect kind="warning"><para>Should this method be redefined in derived classes, <ref refid="classQuantLib_1_1LazyObject_1a5244c7f83592375a0ea9048296435fd1" kindref="member">LazyObject::calculate()</ref> should be called in the overriding method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="91" column="22" bodyfile="ql/patterns/lazyobject.hpp" bodystart="253" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1aafa5583a3743d9f93fa40da5b62e1ff8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::LazyObject::performCalculations</definition>
        <argsstring>() const =0</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::LazyObject::performCalculations</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1CashFlow_1af9cd641e3841cdcf5aba9c8d5121ce91">performCalculations</reimplementedby>
        <reimplementedby refid="classQuantLib_1_1Instrument_1aad23f546bbca156a49a95ca2bee124c4">performCalculations</reimplementedby>
        <reimplementedby refid="classQuantLib_1_1Fdm1DimSolver_1a43504570a27951a8c3546ab734336586">performCalculations</reimplementedby>
        <reimplementedby refid="classQuantLib_1_1FdmBlackScholesSolver_1a9403c904367d3d76cd4912de386ef3b2">performCalculations</reimplementedby>
        <reimplementedby refid="classQuantLib_1_1FlatForward_1a3c2ab008747a3011b2d2f19ba2104fc3">performCalculations</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must implement any calculations which must be (re)done in order to calculate the desired results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="95" column="22"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::LazyObject::LazyObject</definition>
        <argsstring>()</argsstring>
        <name>LazyObject</name>
        <qualifiedname>QuantLib::LazyObject::LazyObject</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="37" column="9" bodyfile="ql/patterns/lazyobject.hpp" bodystart="185" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1LazyObject_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::LazyObject::~LazyObject</definition>
        <argsstring>() override=default</argsstring>
        <name>~LazyObject</name>
        <qualifiedname>QuantLib::LazyObject::~LazyObject</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/patterns/lazyobject.hpp" line="38" column="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Framework for calculation on demand and result caching. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="14">
        <label>QuantLib::BasketOption</label>
        <link refid="classQuantLib_1_1BasketOption"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::CashFlow</label>
        <link refid="classQuantLib_1_1CashFlow"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Dividend</label>
        <link refid="classQuantLib_1_1Dividend"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::Fdm1DimSolver</label>
        <link refid="classQuantLib_1_1Fdm1DimSolver"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::FdmBlackScholesSolver</label>
        <link refid="classQuantLib_1_1FdmBlackScholesSolver"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::FixedDividend</label>
        <link refid="classQuantLib_1_1FixedDividend"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::FlatForward</label>
        <link refid="classQuantLib_1_1FlatForward"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::FractionalDividend</label>
        <link refid="classQuantLib_1_1FractionalDividend"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QuantLib::Instrument</label>
        <link refid="classQuantLib_1_1Instrument"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::LazyObject</label>
        <link refid="classQuantLib_1_1LazyObject"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QuantLib::MultiAssetOption</label>
        <link refid="classQuantLib_1_1MultiAssetOption"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Observable</label>
        <link refid="classQuantLib_1_1Observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="classQuantLib_1_1Observer"/>
      </node>
      <node id="15">
        <label>QuantLib::OneAssetOption</label>
        <link refid="classQuantLib_1_1OneAssetOption"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QuantLib::Option</label>
        <link refid="classQuantLib_1_1Option"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>QuantLib::VanillaOption</label>
        <link refid="classQuantLib_1_1VanillaOption"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::LazyObject</label>
        <link refid="classQuantLib_1_1LazyObject"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Observable</label>
        <link refid="classQuantLib_1_1Observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="classQuantLib_1_1Observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/patterns/lazyobject.hpp" line="34" column="5" bodyfile="ql/patterns/lazyobject.hpp" bodystart="35" bodyend="144"/>
    <listofallmembers>
      <member refid="classQuantLib_1_1LazyObject_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>alwaysForward_</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>alwaysForwardNotifications</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::LazyObject</scope><name>calculate</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>calculated_</name></member>
      <member refid="classQuantLib_1_1Observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::LazyObject</scope><name>deepUpdate</name></member>
      <member refid="classQuantLib_1_1LazyObject_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>freeze</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>frozen_</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>isCalculated</name></member>
      <member refid="classQuantLib_1_1Observable_1a07ad87c2c2599551463d0a529924dec2" prot="private" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::LazyObject</scope><name>iterator</name></member>
      <member refid="classQuantLib_1_1Observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::LazyObject</scope><name>iterator</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>LazyObject</name></member>
      <member refid="classQuantLib_1_1Observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>notifyObservers</name></member>
      <member refid="classQuantLib_1_1Observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observer_1a85e3adb273b706155ea7e8bd98ee460b" prot="private" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>observables_</name></member>
      <member refid="classQuantLib_1_1Observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>Observer</name></member>
      <member refid="classQuantLib_1_1Observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::LazyObject</scope><name>Observer</name></member>
      <member refid="classQuantLib_1_1Observable_1a4da6017619203dcb570d5f4174f0beea" prot="private" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>observers_</name></member>
      <member refid="classQuantLib_1_1Observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::LazyObject</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::LazyObject</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::LazyObject</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1LazyObject_1aafa5583a3743d9f93fa40da5b62e1ff8" prot="protected" virt="pure-virtual"><scope>QuantLib::LazyObject</scope><name>performCalculations</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>recalculate</name></member>
      <member refid="classQuantLib_1_1Observable_1a1eb87a03e7e1fd43377bce32e0c21bce" prot="private" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>registerObserver</name></member>
      <member refid="classQuantLib_1_1Observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>registerWith</name></member>
      <member refid="classQuantLib_1_1Observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>registerWithObservables</name></member>
      <member refid="classQuantLib_1_1Observable_1a22e674e99fccc2da996de9620304f63c" prot="private" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::LazyObject</scope><name>set_type</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>unfreeze</name></member>
      <member refid="classQuantLib_1_1Observable_1abd81ef8b87594aa6f9d2a5bd5de3e628" prot="private" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>unregisterObserver</name></member>
      <member refid="classQuantLib_1_1Observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>unregisterWith</name></member>
      <member refid="classQuantLib_1_1Observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>unregisterWithAll</name></member>
      <member refid="classQuantLib_1_1LazyObject_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::LazyObject</scope><name>update</name></member>
      <member refid="classQuantLib_1_1LazyObject_1ae2c605a452787b38d6a64cf20395a075" prot="private" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>updating_</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::LazyObject</scope><name>~LazyObject</name></member>
      <member refid="classQuantLib_1_1Observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::LazyObject</scope><name>~Observable</name></member>
      <member refid="classQuantLib_1_1Observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::LazyObject</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
