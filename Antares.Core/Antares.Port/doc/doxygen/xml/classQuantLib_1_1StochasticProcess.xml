<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classQuantLib_1_1StochasticProcess" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::StochasticProcess</compoundname>
    <basecompoundref refid="classQuantLib_1_1Observer" prot="public" virt="non-virtual">QuantLib::Observer</basecompoundref>
    <basecompoundref refid="classQuantLib_1_1Observable" prot="public" virt="non-virtual">QuantLib::Observable</basecompoundref>
    <derivedcompoundref refid="classQuantLib_1_1StochasticProcess1D" prot="public" virt="non-virtual">QuantLib::StochasticProcess1D</derivedcompoundref>
    <includes refid="stochasticprocess_8hpp" local="no">stochasticprocess.hpp</includes>
    <innerclass refid="classQuantLib_1_1StochasticProcess_1_1discretization" prot="public">QuantLib::StochasticProcess::discretization</innerclass>
    <sectiondef kind="user-defined">
      <header>Observer interface</header>
      <memberdef kind="variable" id="classQuantLib_1_1StochasticProcess_1a98cd541abbfd37f62d10d3ec2ed214be" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="classQuantLib_1_1StochasticProcess_1_1discretization" kindref="compound">discretization</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;discretization&gt; QuantLib::StochasticProcess::discretization_</definition>
        <argsstring></argsstring>
        <name>discretization_</name>
        <qualifiedname>QuantLib::StochasticProcess::discretization_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="153" column="25" bodyfile="ql/stochasticprocess.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a0f22628658fd2dc702c13c354ef3244e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::StochasticProcess::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::StochasticProcess::update</qualifiedname>
        <reimplements refid="classQuantLib_1_1Observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="148" column="14" bodyfile="ql/stochasticprocess.cpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::StochasticProcess::StochasticProcess</definition>
        <argsstring>()=default</argsstring>
        <name>StochasticProcess</name>
        <qualifiedname>QuantLib::StochasticProcess::StochasticProcess</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="151" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a957ee9776d6048835106ea29ea44927f" prot="protected" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::StochasticProcess::StochasticProcess</definition>
        <argsstring>(ext::shared_ptr&lt; discretization &gt;)</argsstring>
        <name>StochasticProcess</name>
        <qualifiedname>QuantLib::StochasticProcess::StochasticProcess</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="classQuantLib_1_1StochasticProcess_1_1discretization" kindref="compound">discretization</ref> &gt;</type>
          <defname>disc</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="152" column="18" bodyfile="ql/stochasticprocess.cpp" bodystart="29" bodyend="30"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Stochastic process interface</header>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a92e9b468d781e9ceb566d6e546113540" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>virtual Size QuantLib::StochasticProcess::size</definition>
        <argsstring>() const =0</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::StochasticProcess::size</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1StochasticProcess1D_1a427495e858236ca1692eff7c771b6e2a">size</reimplementedby>
        <briefdescription>
<para>returns the number of dimensions of the stochastic process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="65" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::StochasticProcess::factors</definition>
        <argsstring>() const</argsstring>
        <name>factors</name>
        <qualifiedname>QuantLib::StochasticProcess::factors</qualifiedname>
        <briefdescription>
<para>returns the number of independent factors of the process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="67" column="22" bodyfile="ql/stochasticprocess.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a4277a74107d071252a2445d23c90b654" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>virtual Array QuantLib::StochasticProcess::initialValues</definition>
        <argsstring>() const =0</argsstring>
        <name>initialValues</name>
        <qualifiedname>QuantLib::StochasticProcess::initialValues</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1StochasticProcess1D_1afe261942062a36caf1d2902a0791331d">initialValues</reimplementedby>
        <briefdescription>
<para>returns the initial values of the state variables </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="69" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a467056bfaa17a1ea3debd1dc21402bb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>virtual Array QuantLib::StochasticProcess::drift</definition>
        <argsstring>(Time t, const Array &amp;x) const =0</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::StochasticProcess::drift</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1StochasticProcess1D_1a905264383316f171c09de1dc365f2d64">drift</reimplementedby>
        <param>
          <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e., <formula id="74">$ \mu(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="73" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a45df6a954a177df19d31de5a7f2bef35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>virtual Matrix QuantLib::StochasticProcess::diffusion</definition>
        <argsstring>(Time t, const Array &amp;x) const =0</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::StochasticProcess::diffusion</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1StochasticProcess1D_1ae17cbed491dafb462e21846cf5f34238">diffusion</reimplementedby>
        <param>
          <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="75">$ \sigma(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="78" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1af225d654ba08bc09bf2ecab7d787ca9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess::expectation</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const</argsstring>
        <name>expectation</name>
        <qualifiedname>QuantLib::StochasticProcess::expectation</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1StochasticProcess1D_1aec74ba7ca0fcd3494c2c45fd4f6f32ca">expectation</reimplementedby>
        <param>
          <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the expectation  <formula id="76">$ E(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="77">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="88" column="23" bodyfile="ql/stochasticprocess.cpp" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a47e9f5540b2ca9c32650dc81d051ca86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcess::stdDeviation</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::StochasticProcess::stdDeviation</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1StochasticProcess1D_1a6db30d97a969cf695142b77d4608fa31">stdDeviation</reimplementedby>
        <param>
          <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the standard deviation  <formula id="78">$ S(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="77">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="99" column="24" bodyfile="ql/stochasticprocess.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a3a92717719d8621148989905a132c5e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcess::covariance</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const</argsstring>
        <name>covariance</name>
        <qualifiedname>QuantLib::StochasticProcess::covariance</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1StochasticProcess1D_1a7a6f6dbd4dcd88d7793c718ec4e2d7a9">covariance</reimplementedby>
        <param>
          <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the covariance  <formula id="79">$ V(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="77">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="110" column="24" bodyfile="ql/stochasticprocess.cpp" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a8d99a715b297d5b6543b1d303a6002c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess::evolve</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt, const Array &amp;dw) const</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::StochasticProcess::evolve</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1StochasticProcess1D_1a2065cda22cc58067746379613726c3ad">evolve</reimplementedby>
        <param>
          <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval <formula id="80">$ \Delta t
$</formula> according to the given discretization. By default, it returns  <formula id="81">\[
E(\mathrm{x}_0,t_0,\Delta t) +
S(\mathrm{x}_0,t_0,\Delta t) \cdot \Delta \mathrm{w}
\]</formula> where <formula id="82">$ E $</formula> is the expectation and <formula id="59">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="123" column="23" bodyfile="ql/stochasticprocess.cpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1ae2e3d89d3595fcd73be5e6e7e195f3e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess::apply</definition>
        <argsstring>(const Array &amp;x0, const Array &amp;dx) const</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::StochasticProcess::apply</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1StochasticProcess1D_1a8085d27753231bb61130e9850c4a6464">apply</reimplementedby>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>applies a change to the asset value. By default, it returns <formula id="83">$ \mathrm{x} + \Delta \mathrm{x} $</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="130" column="23" bodyfile="ql/stochasticprocess.cpp" bodystart="59" bodyend="62"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>utilities</header>
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a39c5f08a3779665f9185a558d2b8418d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceQuantLib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::StochasticProcess::time</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>time</name>
        <qualifiedname>QuantLib::StochasticProcess::time</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1GeneralizedBlackScholesProcess_1aadbaae308a4066e94a3aa913b444ed52">time</reimplementedby>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the time value corresponding to the given date in the reference system of the stochastic process.</para>
<para><simplesect kind="note"><para>As a number of processes might not need this functionality, a default implementation is given which raises an exception. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="143" column="22" bodyfile="ql/stochasticprocess.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classQuantLib_1_1StochasticProcess_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::StochasticProcess::~StochasticProcess</definition>
        <argsstring>() override=default</argsstring>
        <name>~StochasticProcess</name>
        <qualifiedname>QuantLib::StochasticProcess::~StochasticProcess</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="61" column="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>multi-dimensional stochastic process class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class describes a stochastic process governed by  <formula id="72">\[
d\mathrm{x}_t = \mu(t, x_t)\mathrm{d}t
              + \sigma(t, \mathrm{x}_t) \cdot d\mathrm{W}_t.
\]</formula> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6">
        <label>QuantLib::BlackProcess</label>
        <link refid="classQuantLib_1_1BlackProcess"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::BlackScholesMertonProcess</label>
        <link refid="classQuantLib_1_1BlackScholesMertonProcess"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::BlackScholesProcess</label>
        <link refid="classQuantLib_1_1BlackScholesProcess"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::GarmanKohlagenProcess</label>
        <link refid="classQuantLib_1_1GarmanKohlagenProcess"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::GeneralizedBlackScholesProcess</label>
        <link refid="classQuantLib_1_1GeneralizedBlackScholesProcess"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="classQuantLib_1_1Observable"/>
      </node>
      <node id="2">
        <label>QuantLib::Observer</label>
        <link refid="classQuantLib_1_1Observer"/>
      </node>
      <node id="1">
        <label>QuantLib::StochasticProcess</label>
        <link refid="classQuantLib_1_1StochasticProcess"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="classQuantLib_1_1StochasticProcess1D"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="classQuantLib_1_1Observable"/>
      </node>
      <node id="2">
        <label>QuantLib::Observer</label>
        <link refid="classQuantLib_1_1Observer"/>
      </node>
      <node id="1">
        <label>QuantLib::StochasticProcess</label>
        <link refid="classQuantLib_1_1StochasticProcess"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/stochasticprocess.hpp" line="42" column="5" bodyfile="ql/stochasticprocess.hpp" bodystart="42" bodyend="154"/>
    <listofallmembers>
      <member refid="classQuantLib_1_1StochasticProcess_1ae2e3d89d3595fcd73be5e6e7e195f3e7" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>apply</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a3a92717719d8621148989905a132c5e1" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>covariance</name></member>
      <member refid="classQuantLib_1_1Observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>deepUpdate</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a45df6a954a177df19d31de5a7f2bef35" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess</scope><name>diffusion</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a98cd541abbfd37f62d10d3ec2ed214be" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>discretization_</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a467056bfaa17a1ea3debd1dc21402bb8" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess</scope><name>drift</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a8d99a715b297d5b6543b1d303a6002c0" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>evolve</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1af225d654ba08bc09bf2ecab7d787ca9b" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>expectation</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>factors</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a4277a74107d071252a2445d23c90b654" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess</scope><name>initialValues</name></member>
      <member refid="classQuantLib_1_1Observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess</scope><name>iterator</name></member>
      <member refid="classQuantLib_1_1Observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>notifyObservers</name></member>
      <member refid="classQuantLib_1_1Observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observer_1a85e3adb273b706155ea7e8bd98ee460b" prot="private" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>observables_</name></member>
      <member refid="classQuantLib_1_1Observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess</scope><name>Observer</name></member>
      <member refid="classQuantLib_1_1Observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess</scope><name>Observer</name></member>
      <member refid="classQuantLib_1_1Observable_1a4da6017619203dcb570d5f4174f0beea" prot="private" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>observers_</name></member>
      <member refid="classQuantLib_1_1Observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::StochasticProcess</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::StochasticProcess</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Observable_1a1eb87a03e7e1fd43377bce32e0c21bce" prot="private" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>registerObserver</name></member>
      <member refid="classQuantLib_1_1Observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>registerWith</name></member>
      <member refid="classQuantLib_1_1Observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>registerWithObservables</name></member>
      <member refid="classQuantLib_1_1Observer_1a3dcd7d8542d1142f29da8326919e863f" prot="private" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess</scope><name>set_type</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a92e9b468d781e9ceb566d6e546113540" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess</scope><name>size</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a47e9f5540b2ca9c32650dc81d051ca86" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>stdDeviation</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>StochasticProcess</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>StochasticProcess</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a39c5f08a3779665f9185a558d2b8418d" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>time</name></member>
      <member refid="classQuantLib_1_1Observable_1abd81ef8b87594aa6f9d2a5bd5de3e628" prot="private" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>unregisterObserver</name></member>
      <member refid="classQuantLib_1_1Observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>unregisterWith</name></member>
      <member refid="classQuantLib_1_1Observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>unregisterWithAll</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a0f22628658fd2dc702c13c354ef3244e" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>update</name></member>
      <member refid="classQuantLib_1_1Observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>~Observable</name></member>
      <member refid="classQuantLib_1_1Observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>~Observer</name></member>
      <member refid="classQuantLib_1_1StochasticProcess_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
