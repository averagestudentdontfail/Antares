<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classQuantLib_1_1CashFlow" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::CashFlow</compoundname>
    <basecompoundref refid="classQuantLib_1_1Event" prot="public" virt="non-virtual">QuantLib::Event</basecompoundref>
    <basecompoundref refid="classQuantLib_1_1LazyObject" prot="public" virt="non-virtual">QuantLib::LazyObject</basecompoundref>
    <derivedcompoundref refid="classQuantLib_1_1Dividend" prot="public" virt="non-virtual">QuantLib::Dividend</derivedcompoundref>
    <includes refid="cashflow_8hpp" local="no">cashflow.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Event interface</header>
      <memberdef kind="function" id="classQuantLib_1_1CashFlow_1a71b50b96effa6166e09f0f8e25dd8d9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CashFlow::date</definition>
        <argsstring>() const override=0</argsstring>
        <name>date</name>
        <qualifiedname>QuantLib::CashFlow::date</qualifiedname>
        <reimplements refid="classQuantLib_1_1Event_1a7a690f69956e5d1f7175d7d7f879b9af">date</reimplements>
        <reimplementedby refid="classQuantLib_1_1Dividend_1a412d3b03b3f8728c0a41d306f4790f61">date</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is inherited from the event class </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflow.hpp" line="46" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1CashFlow_1a42691c396f43dde0b5ed37f4a014b0e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::CashFlow::hasOccurred</definition>
        <argsstring>(const Date &amp;refDate=Date(), ext::optional&lt; bool &gt; includeRefDate=ext::nullopt) const override</argsstring>
        <name>hasOccurred</name>
        <qualifiedname>QuantLib::CashFlow::hasOccurred</qualifiedname>
        <reimplements refid="classQuantLib_1_1Event_1af09e3d842159f4d17482ce634642bc07">hasOccurred</reimplements>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>refDate</declname>
          <defval><ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>ext::optional&lt; bool &gt;</type>
          <declname>includeRefDate</declname>
          <defval><ref refid="namespaceQuantLib_1_1ext_1a0d40dd1f89a19aab79fa7b544be0150c" kindref="member">ext::nullopt</ref></defval>
        </param>
        <briefdescription>
<para>returns true if an event has already occurred before a date </para>
        </briefdescription>
        <detaileddescription>
<para>overloads <ref refid="classQuantLib_1_1Event_1af09e3d842159f4d17482ce634642bc07" kindref="member">Event::hasOccurred</ref> in order to take Settings::includeTodaysCashflows in account </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflow.hpp" line="51" column="14" bodyfile="ql/cashflow.cpp" bodystart="27" bodyend="49"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>LazyObject interface</header>
      <memberdef kind="function" id="classQuantLib_1_1CashFlow_1af9cd641e3841cdcf5aba9c8d5121ce91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CashFlow::performCalculations</definition>
        <argsstring>() const override</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::CashFlow::performCalculations</qualifiedname>
        <reimplements refid="classQuantLib_1_1LazyObject_1aafa5583a3743d9f93fa40da5b62e1ff8">performCalculations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must implement any calculations which must be (re)done in order to calculate the desired results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflow.hpp" line="56" column="14" bodyfile="ql/cashflow.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>CashFlow interface</header>
      <memberdef kind="function" id="classQuantLib_1_1CashFlow_1a92962488f6a37dc8ea4ea49712a2c0c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::CashFlow::amount</definition>
        <argsstring>() const =0</argsstring>
        <name>amount</name>
        <qualifiedname>QuantLib::CashFlow::amount</qualifiedname>
        <reimplementedby refid="classQuantLib_1_1FixedDividend_1a2b391b4d747be879cef986ff5a880adf">amount</reimplementedby>
        <reimplementedby refid="classQuantLib_1_1FractionalDividend_1aebde5100d89ffca82927ec916f0e1e4b">amount</reimplementedby>
        <reimplementedby refid="classQuantLib_1_1Dividend_1ae70257b2c7ad9a8f090cac60ea8c5e44">amount</reimplementedby>
        <briefdescription>
<para>returns the amount of the cash flow </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The amount is not discounted, i.e., it is the actual amount paid at the cash flow date. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflow.hpp" line="64" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1CashFlow_1a235e2205946f507de2d3b2cbfaf8cd89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref></type>
        <definition>virtual Date QuantLib::CashFlow::exCouponDate</definition>
        <argsstring>() const</argsstring>
        <name>exCouponDate</name>
        <qualifiedname>QuantLib::CashFlow::exCouponDate</qualifiedname>
        <briefdescription>
<para>returns the date that the cash flow trades exCoupon </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflow.hpp" line="66" column="22" bodyfile="ql/cashflow.hpp" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1CashFlow_1a103a14e1657bd2d7cb6574bf6dcf96d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::CashFlow::tradingExCoupon</definition>
        <argsstring>(const Date &amp;refDate=Date()) const</argsstring>
        <name>tradingExCoupon</name>
        <qualifiedname>QuantLib::CashFlow::tradingExCoupon</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref> &amp;</type>
          <declname>refDate</declname>
          <defval><ref refid="classQuantLib_1_1Date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>returns true if the cashflow is trading ex-coupon on the refDate </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflow.hpp" line="68" column="14" bodyfile="ql/cashflow.cpp" bodystart="51" bodyend="61"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Visitability</header>
      <memberdef kind="function" id="classQuantLib_1_1CashFlow_1a2ee98a71e01a73026ed476a5fa40aa8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CashFlow::accept</definition>
        <argsstring>(AcyclicVisitor &amp;) override</argsstring>
        <name>accept</name>
        <qualifiedname>QuantLib::CashFlow::accept</qualifiedname>
        <reimplements refid="classQuantLib_1_1Event_1a572b6e63554be33515e60185aa8d1499">accept</reimplements>
        <reimplementedby refid="classQuantLib_1_1Dividend_1a9eb7784a468fda372c65ccd4046d92d0">accept</reimplementedby>
        <param>
          <type><ref refid="classQuantLib_1_1AcyclicVisitor" kindref="compound">AcyclicVisitor</ref> &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflow.hpp" line="73" column="14" bodyfile="ql/cashflow.cpp" bodystart="63" bodyend="69"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classQuantLib_1_1CashFlow_1a4ac3d8fa6eeb8c307345ada96b25cecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CashFlow::~CashFlow</definition>
        <argsstring>() override=default</argsstring>
        <name>~CashFlow</name>
        <qualifiedname>QuantLib::CashFlow::~CashFlow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflow.hpp" line="42" column="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Base class for cash flows. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is purely virtual and acts as a base class for the actual cash flow implementations. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::CashFlow</label>
        <link refid="classQuantLib_1_1CashFlow"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Dividend</label>
        <link refid="classQuantLib_1_1Dividend"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Event</label>
        <link refid="classQuantLib_1_1Event"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::FixedDividend</label>
        <link refid="classQuantLib_1_1FixedDividend"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::FractionalDividend</label>
        <link refid="classQuantLib_1_1FractionalDividend"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LazyObject</label>
        <link refid="classQuantLib_1_1LazyObject"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="classQuantLib_1_1Observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="classQuantLib_1_1Observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::CashFlow</label>
        <link refid="classQuantLib_1_1CashFlow"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Event</label>
        <link refid="classQuantLib_1_1Event"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LazyObject</label>
        <link refid="classQuantLib_1_1LazyObject"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="classQuantLib_1_1Observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="classQuantLib_1_1Observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/cashflow.hpp" line="40" column="5" bodyfile="ql/cashflow.hpp" bodystart="40" bodyend="75"/>
    <listofallmembers>
      <member refid="classQuantLib_1_1CashFlow_1a2ee98a71e01a73026ed476a5fa40aa8c" prot="public" virt="virtual"><scope>QuantLib::CashFlow</scope><name>accept</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>alwaysForward_</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>alwaysForwardNotifications</name></member>
      <member refid="classQuantLib_1_1CashFlow_1a92962488f6a37dc8ea4ea49712a2c0c1" prot="public" virt="pure-virtual"><scope>QuantLib::CashFlow</scope><name>amount</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::CashFlow</scope><name>calculate</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>calculated_</name></member>
      <member refid="classQuantLib_1_1CashFlow_1a71b50b96effa6166e09f0f8e25dd8d9b" prot="public" virt="pure-virtual"><scope>QuantLib::CashFlow</scope><name>date</name></member>
      <member refid="classQuantLib_1_1Observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::CashFlow</scope><name>deepUpdate</name></member>
      <member refid="classQuantLib_1_1CashFlow_1a235e2205946f507de2d3b2cbfaf8cd89" prot="public" virt="virtual"><scope>QuantLib::CashFlow</scope><name>exCouponDate</name></member>
      <member refid="classQuantLib_1_1LazyObject_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>freeze</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>frozen_</name></member>
      <member refid="classQuantLib_1_1CashFlow_1a42691c396f43dde0b5ed37f4a014b0e8" prot="public" virt="virtual"><scope>QuantLib::CashFlow</scope><name>hasOccurred</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>isCalculated</name></member>
      <member refid="classQuantLib_1_1Observable_1a07ad87c2c2599551463d0a529924dec2" prot="private" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CashFlow</scope><name>iterator</name></member>
      <member refid="classQuantLib_1_1Observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::CashFlow</scope><name>iterator</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>LazyObject</name></member>
      <member refid="classQuantLib_1_1Observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>notifyObservers</name></member>
      <member refid="classQuantLib_1_1Observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>Observable</name></member>
      <member refid="classQuantLib_1_1Observer_1a85e3adb273b706155ea7e8bd98ee460b" prot="private" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>observables_</name></member>
      <member refid="classQuantLib_1_1Observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>Observer</name></member>
      <member refid="classQuantLib_1_1Observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::CashFlow</scope><name>Observer</name></member>
      <member refid="classQuantLib_1_1Observable_1a4da6017619203dcb570d5f4174f0beea" prot="private" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>observers_</name></member>
      <member refid="classQuantLib_1_1Observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CashFlow</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CashFlow</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1Observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::CashFlow</scope><name>operator=</name></member>
      <member refid="classQuantLib_1_1CashFlow_1af9cd641e3841cdcf5aba9c8d5121ce91" prot="public" virt="virtual"><scope>QuantLib::CashFlow</scope><name>performCalculations</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>recalculate</name></member>
      <member refid="classQuantLib_1_1Observable_1a1eb87a03e7e1fd43377bce32e0c21bce" prot="private" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>registerObserver</name></member>
      <member refid="classQuantLib_1_1Observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>registerWith</name></member>
      <member refid="classQuantLib_1_1Observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>registerWithObservables</name></member>
      <member refid="classQuantLib_1_1Observable_1a22e674e99fccc2da996de9620304f63c" prot="private" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>set_type</name></member>
      <member refid="classQuantLib_1_1CashFlow_1a103a14e1657bd2d7cb6574bf6dcf96d0" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>tradingExCoupon</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>unfreeze</name></member>
      <member refid="classQuantLib_1_1Observable_1abd81ef8b87594aa6f9d2a5bd5de3e628" prot="private" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>unregisterObserver</name></member>
      <member refid="classQuantLib_1_1Observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>unregisterWith</name></member>
      <member refid="classQuantLib_1_1Observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>unregisterWithAll</name></member>
      <member refid="classQuantLib_1_1LazyObject_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::CashFlow</scope><name>update</name></member>
      <member refid="classQuantLib_1_1LazyObject_1ae2c605a452787b38d6a64cf20395a075" prot="private" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>updating_</name></member>
      <member refid="classQuantLib_1_1CashFlow_1a4ac3d8fa6eeb8c307345ada96b25cecf" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>~CashFlow</name></member>
      <member refid="classQuantLib_1_1Event_1a26cef5942731bfb52ed77e74abdcfe9f" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>~Event</name></member>
      <member refid="classQuantLib_1_1LazyObject_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::CashFlow</scope><name>~LazyObject</name></member>
      <member refid="classQuantLib_1_1Observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::CashFlow</scope><name>~Observable</name></member>
      <member refid="classQuantLib_1_1Observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::CashFlow</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
