<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classQuantLib_1_1SymmetricSchurDecomposition" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SymmetricSchurDecomposition</compoundname>
    <includes refid="symmetricschurdecomposition_8hpp" local="no">symmetricschurdecomposition.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classQuantLib_1_1SymmetricSchurDecomposition_1a172aea7089d878272224c46f50a05197" prot="private" static="no" mutable="no">
        <type><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::SymmetricSchurDecomposition::diagonal_</definition>
        <argsstring></argsstring>
        <name>diagonal_</name>
        <qualifiedname>QuantLib::SymmetricSchurDecomposition::diagonal_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/symmetricschurdecomposition.hpp" line="57" column="15" bodyfile="ql/math/matrixutilities/symmetricschurdecomposition.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQuantLib_1_1SymmetricSchurDecomposition_1ad7a867557c25fb96186544468b2e4574" prot="private" static="no" mutable="no">
        <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::SymmetricSchurDecomposition::eigenVectors_</definition>
        <argsstring></argsstring>
        <name>eigenVectors_</name>
        <qualifiedname>QuantLib::SymmetricSchurDecomposition::eigenVectors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/symmetricschurdecomposition.hpp" line="58" column="16" bodyfile="ql/math/matrixutilities/symmetricschurdecomposition.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classQuantLib_1_1SymmetricSchurDecomposition_1a82516228a1888e11fee4f8de65e8cca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::SymmetricSchurDecomposition::SymmetricSchurDecomposition</definition>
        <argsstring>(const Matrix &amp;s)</argsstring>
        <name>SymmetricSchurDecomposition</name>
        <qualifiedname>QuantLib::SymmetricSchurDecomposition::SymmetricSchurDecomposition</qualifiedname>
        <param>
          <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>s must be symmetric </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/symmetricschurdecomposition.hpp" line="53" column="9" bodyfile="ql/math/matrixutilities/symmetricschurdecomposition.cpp" bodystart="26" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1SymmetricSchurDecomposition_1a931fb2dd5e1f500fa8e2d8fbaa4fd85d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>const Array &amp; QuantLib::SymmetricSchurDecomposition::eigenvalues</definition>
        <argsstring>() const</argsstring>
        <name>eigenvalues</name>
        <qualifiedname>QuantLib::SymmetricSchurDecomposition::eigenvalues</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/symmetricschurdecomposition.hpp" line="54" column="21" bodyfile="ql/math/matrixutilities/symmetricschurdecomposition.hpp" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1SymmetricSchurDecomposition_1a03167062d7e5073347c6fd2fd9c3efa7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>const Matrix &amp; QuantLib::SymmetricSchurDecomposition::eigenvectors</definition>
        <argsstring>() const</argsstring>
        <name>eigenvectors</name>
        <qualifiedname>QuantLib::SymmetricSchurDecomposition::eigenvectors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/symmetricschurdecomposition.hpp" line="55" column="22" bodyfile="ql/math/matrixutilities/symmetricschurdecomposition.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classQuantLib_1_1SymmetricSchurDecomposition_1a56c3b87be544c72e822f3b5c333e1cec" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::SymmetricSchurDecomposition::jacobiRotate_</definition>
        <argsstring>(Matrix &amp;m, Real rot, Real dil, Size j1, Size k1, Size j2, Size k2) const</argsstring>
        <name>jacobiRotate_</name>
        <qualifiedname>QuantLib::SymmetricSchurDecomposition::jacobiRotate_</qualifiedname>
        <param>
          <type><ref refid="classQuantLib_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rot</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>dil</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>j1</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>k1</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>j2</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>k2</declname>
        </param>
        <briefdescription>
<para>This routines implements the Jacobi, a.k.a. Givens, rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/symmetricschurdecomposition.hpp" line="59" column="14" bodyfile="ql/math/matrixutilities/symmetricschurdecomposition.hpp" bodystart="67" bodyend="75"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>symmetric threshold Jacobi algorithm. </para>
    </briefdescription>
    <detaileddescription>
<para>Given a real symmetric matrix S, the Schur decomposition finds the eigenvalues and eigenvectors of S. If D is the diagonal matrix formed by the eigenvalues and U the unitarian matrix of the eigenvectors we can write the Schur decomposition as <formula id="37">\[ S = U \cdot D \cdot U^T \, ,\]</formula> where <formula id="38">$ \cdot $</formula> is the standard matrix product and <formula id="39">$ ^T  $</formula> is the transpose operator. This class implements the Schur decomposition using the symmetric threshold Jacobi algorithm. For details on the different Jacobi transfomations see &quot;Matrix computation,&quot; second edition, by Golub and Van Loan, The Johns Hopkins University Press</para>
<para><xrefsect id="test_1_test000010"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned values is tested by checking their properties. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::Array</label>
        <link refid="classQuantLib_1_1Array"/>
      </node>
      <node id="3">
        <label>QuantLib::Matrix</label>
        <link refid="classQuantLib_1_1Matrix"/>
      </node>
      <node id="1">
        <label>QuantLib::SymmetricSchurDecomposition</label>
        <link refid="classQuantLib_1_1SymmetricSchurDecomposition"/>
        <childnode refid="2" relation="usage">
          <edgelabel>diagonal_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>eigenVectors_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/math/matrixutilities/symmetricschurdecomposition.hpp" line="50" column="5" bodyfile="ql/math/matrixutilities/symmetricschurdecomposition.hpp" bodystart="50" bodyend="61"/>
    <listofallmembers>
      <member refid="classQuantLib_1_1SymmetricSchurDecomposition_1a172aea7089d878272224c46f50a05197" prot="private" virt="non-virtual"><scope>QuantLib::SymmetricSchurDecomposition</scope><name>diagonal_</name></member>
      <member refid="classQuantLib_1_1SymmetricSchurDecomposition_1a931fb2dd5e1f500fa8e2d8fbaa4fd85d" prot="public" virt="non-virtual"><scope>QuantLib::SymmetricSchurDecomposition</scope><name>eigenvalues</name></member>
      <member refid="classQuantLib_1_1SymmetricSchurDecomposition_1a03167062d7e5073347c6fd2fd9c3efa7" prot="public" virt="non-virtual"><scope>QuantLib::SymmetricSchurDecomposition</scope><name>eigenvectors</name></member>
      <member refid="classQuantLib_1_1SymmetricSchurDecomposition_1ad7a867557c25fb96186544468b2e4574" prot="private" virt="non-virtual"><scope>QuantLib::SymmetricSchurDecomposition</scope><name>eigenVectors_</name></member>
      <member refid="classQuantLib_1_1SymmetricSchurDecomposition_1a56c3b87be544c72e822f3b5c333e1cec" prot="private" virt="non-virtual"><scope>QuantLib::SymmetricSchurDecomposition</scope><name>jacobiRotate_</name></member>
      <member refid="classQuantLib_1_1SymmetricSchurDecomposition_1a82516228a1888e11fee4f8de65e8cca7" prot="public" virt="non-virtual"><scope>QuantLib::SymmetricSchurDecomposition</scope><name>SymmetricSchurDecomposition</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
