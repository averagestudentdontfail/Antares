<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="array_8hpp" kind="file" language="C++">
    <compoundname>array.hpp</compoundname>
    <includes refid="types_8hpp" local="no">ql/types.hpp</includes>
    <includes refid="errors_8hpp" local="no">ql/errors.hpp</includes>
    <includes refid="null_8hpp" local="no">ql/utilities/null.hpp</includes>
    <includes local="no">iterator</includes>
    <includes local="no">functional</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">numeric</includes>
    <includes local="no">vector</includes>
    <includes local="no">initializer_list</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">memory</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="basketoption_8hpp" local="no">ql/instruments/basketoption.hpp</includedby>
    <includedby refid="gaussianquadratures_8hpp" local="no">ql/math/integrals/gaussianquadratures.hpp</includedby>
    <includedby refid="chebyshevinterpolation_8hpp" local="no">ql/math/interpolations/chebyshevinterpolation.hpp</includedby>
    <includedby refid="lagrangeinterpolation_8hpp" local="no">ql/math/interpolations/lagrangeinterpolation.hpp</includedby>
    <includedby refid="matrix_8hpp" local="no">ql/math/matrix.hpp</includedby>
    <includedby refid="bicgstab_8hpp" local="no">ql/math/matrixutilities/bicgstab.hpp</includedby>
    <includedby refid="gmres_8hpp" local="no">ql/math/matrixutilities/gmres.hpp</includedby>
    <includedby refid="sparsematrix_8hpp" local="no">ql/math/matrixutilities/sparsematrix.hpp</includedby>
    <includedby refid="tqreigendecomposition_8hpp" local="no">ql/math/matrixutilities/tqreigendecomposition.hpp</includedby>
    <includedby refid="concentrating1dmesher_8cpp" local="no">ql/methods/finitedifferences/meshers/concentrating1dmesher.cpp</includedby>
    <includedby refid="fdmmesher_8hpp" local="no">ql/methods/finitedifferences/meshers/fdmmesher.hpp</includedby>
    <includedby refid="fdmlinearop_8hpp" local="no">ql/methods/finitedifferences/operators/fdmlinearop.hpp</includedby>
    <includedby refid="stepcondition_8hpp" local="no">ql/methods/finitedifferences/stepcondition.hpp</includedby>
    <includedby refid="tridiagonaloperator_8hpp" local="no">ql/methods/finitedifferences/tridiagonaloperator.hpp</includedby>
    <includedby refid="fdmquantohelper_8hpp" local="no">ql/methods/finitedifferences/utilities/fdmquantohelper.hpp</includedby>
    <incdepgraph>
      <node id="6">
        <label>ql/config.ansi.hpp</label>
        <link refid="config_8ansi_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ql/errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ql/math/array.hpp</label>
        <link refid="array_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ql/mathconstants.hpp</label>
        <link refid="mathconstants_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ql/qldefines.hpp</label>
        <link refid="qldefines_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ql/shared_ptr.hpp</label>
        <link refid="shared__ptr_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ql/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ql/userconfig.hpp</label>
        <link refid="userconfig_8hpp"/>
      </node>
      <node id="22">
        <label>ql/utilities/null.hpp</label>
        <link refid="null_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>algorithm</label>
      </node>
      <node id="17">
        <label>boost/assert.hpp</label>
      </node>
      <node id="4">
        <label>boost/config.hpp</label>
      </node>
      <node id="18">
        <label>boost/current_function.hpp</label>
      </node>
      <node id="16">
        <label>boost/enable_shared_from_this.hpp</label>
      </node>
      <node id="15">
        <label>boost/make_shared.hpp</label>
      </node>
      <node id="14">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="5">
        <label>boost/version.hpp</label>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>cstddef</label>
      </node>
      <node id="19">
        <label>exception</label>
      </node>
      <node id="25">
        <label>functional</label>
      </node>
      <node id="29">
        <label>initializer_list</label>
      </node>
      <node id="30">
        <label>iomanip</label>
      </node>
      <node id="24">
        <label>iterator</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="31">
        <label>memory</label>
      </node>
      <node id="27">
        <label>numeric</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="21">
        <label>string</label>
      </node>
      <node id="23">
        <label>type_traits</label>
      </node>
      <node id="28">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>ql/instruments/basketoption.cpp</label>
        <link refid="basketoption_8cpp"/>
      </node>
      <node id="2">
        <label>ql/instruments/basketoption.hpp</label>
        <link refid="basketoption_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>ql/instruments/impliedvolatility.cpp</label>
        <link refid="impliedvolatility_8cpp"/>
      </node>
      <node id="28">
        <label>ql/instruments/impliedvolatility.hpp</label>
        <link refid="impliedvolatility_8hpp"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>ql/instruments/multiassetoption.cpp</label>
        <link refid="multiassetoption_8cpp"/>
      </node>
      <node id="30">
        <label>ql/instruments/vanillaoption.cpp</label>
        <link refid="vanillaoption_8cpp"/>
      </node>
      <node id="1">
        <label>ql/math/array.hpp</label>
        <link refid="array_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ql/math/integrals/gaussianquadratures.cpp</label>
        <link refid="gaussianquadratures_8cpp"/>
      </node>
      <node id="5">
        <label>ql/math/integrals/gaussianquadratures.hpp</label>
        <link refid="gaussianquadratures_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ql/math/interpolations/chebyshevinterpolation.cpp</label>
        <link refid="chebyshevinterpolation_8cpp"/>
      </node>
      <node id="8">
        <label>ql/math/interpolations/chebyshevinterpolation.hpp</label>
        <link refid="chebyshevinterpolation_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ql/math/interpolations/cubicinterpolation.hpp</label>
        <link refid="cubicinterpolation_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ql/math/interpolations/lagrangeinterpolation.hpp</label>
        <link refid="lagrangeinterpolation_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ql/math/matrix.cpp</label>
        <link refid="matrix_8cpp"/>
      </node>
      <node id="12">
        <label>ql/math/matrix.hpp</label>
        <link refid="matrix_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>ql/math/matrixutilities/bicgstab.cpp</label>
        <link refid="bicgstab_8cpp"/>
      </node>
      <node id="45">
        <label>ql/math/matrixutilities/bicgstab.hpp</label>
        <link refid="bicgstab_8hpp"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ql/math/matrixutilities/gmres.cpp</label>
        <link refid="gmres_8cpp"/>
      </node>
      <node id="50">
        <label>ql/math/matrixutilities/gmres.hpp</label>
        <link refid="gmres_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ql/math/matrixutilities/qrdecomposition.cpp</label>
        <link refid="qrdecomposition_8cpp"/>
      </node>
      <node id="16">
        <label>ql/math/matrixutilities/qrdecomposition.hpp</label>
        <link refid="qrdecomposition_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>ql/math/matrixutilities/sparsematrix.hpp</label>
        <link refid="sparsematrix_8hpp"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ql/math/matrixutilities/symmetricschurdecomposition.cpp</label>
        <link refid="symmetricschurdecomposition_8cpp"/>
      </node>
      <node id="19">
        <label>ql/math/matrixutilities/symmetricschurdecomposition.hpp</label>
        <link refid="symmetricschurdecomposition_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ql/math/matrixutilities/tqreigendecomposition.cpp</label>
        <link refid="tqreigendecomposition_8cpp"/>
      </node>
      <node id="21">
        <label>ql/math/matrixutilities/tqreigendecomposition.hpp</label>
        <link refid="tqreigendecomposition_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>ql/methods/finitedifferences/boundarycondition.cpp</label>
        <link refid="boundarycondition_8cpp"/>
      </node>
      <node id="100">
        <label>ql/methods/finitedifferences/boundarycondition.hpp</label>
        <link refid="boundarycondition_8hpp"/>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>ql/methods/finitedifferences/finitedifferencemodel.hpp</label>
        <link refid="finitedifferencemodel_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>ql/methods/finitedifferences/meshers/concentrating1dmesher.cpp</label>
        <link refid="concentrating1dmesher_8cpp"/>
      </node>
      <node id="31">
        <label>ql/methods/finitedifferences/meshers/fdmblackscholesmesher.cpp</label>
        <link refid="fdmblackscholesmesher_8cpp"/>
      </node>
      <node id="82">
        <label>ql/methods/finitedifferences/meshers/fdmmesher.hpp</label>
        <link refid="fdmmesher_8hpp"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>ql/methods/finitedifferences/meshers/fdmmeshercomposite.cpp</label>
        <link refid="fdmmeshercomposite_8cpp"/>
      </node>
      <node id="83">
        <label>ql/methods/finitedifferences/meshers/fdmmeshercomposite.hpp</label>
        <link refid="fdmmeshercomposite_8hpp"/>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>ql/methods/finitedifferences/operators/fdmblackscholesop.cpp</label>
        <link refid="fdmblackscholesop_8cpp"/>
      </node>
      <node id="32">
        <label>ql/methods/finitedifferences/operators/fdmblackscholesop.hpp</label>
        <link refid="fdmblackscholesop_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>ql/methods/finitedifferences/operators/fdmlinearop.hpp</label>
        <link refid="fdmlinearop_8hpp"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>ql/methods/finitedifferences/operators/fdmlinearopcomposite.hpp</label>
        <link refid="fdmlinearopcomposite_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>ql/methods/finitedifferences/operators/firstderivativeop.cpp</label>
        <link refid="firstderivativeop_8cpp"/>
      </node>
      <node id="70">
        <label>ql/methods/finitedifferences/operators/firstderivativeop.hpp</label>
        <link refid="firstderivativeop_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>ql/methods/finitedifferences/operators/secondderivativeop.cpp</label>
        <link refid="secondderivativeop_8cpp"/>
      </node>
      <node id="72">
        <label>ql/methods/finitedifferences/operators/secondderivativeop.hpp</label>
        <link refid="secondderivativeop_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>ql/methods/finitedifferences/operators/triplebandlinearop.cpp</label>
        <link refid="triplebandlinearop_8cpp"/>
      </node>
      <node id="69">
        <label>ql/methods/finitedifferences/operators/triplebandlinearop.hpp</label>
        <link refid="triplebandlinearop_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>ql/methods/finitedifferences/operatortraits.hpp</label>
        <link refid="operatortraits_8hpp"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>ql/methods/finitedifferences/schemes/boundaryconditionschemehelper.hpp</label>
        <link refid="boundaryconditionschemehelper_8hpp"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>ql/methods/finitedifferences/schemes/craigsneydscheme.cpp</label>
        <link refid="craigsneydscheme_8cpp"/>
      </node>
      <node id="54">
        <label>ql/methods/finitedifferences/schemes/craigsneydscheme.hpp</label>
        <link refid="craigsneydscheme_8hpp"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>ql/methods/finitedifferences/schemes/cranknicolsonscheme.cpp</label>
        <link refid="cranknicolsonscheme_8cpp"/>
      </node>
      <node id="64">
        <label>ql/methods/finitedifferences/schemes/cranknicolsonscheme.hpp</label>
        <link refid="cranknicolsonscheme_8hpp"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>ql/methods/finitedifferences/schemes/douglasscheme.cpp</label>
        <link refid="douglasscheme_8cpp"/>
      </node>
      <node id="56">
        <label>ql/methods/finitedifferences/schemes/douglasscheme.hpp</label>
        <link refid="douglasscheme_8hpp"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>ql/methods/finitedifferences/schemes/expliciteulerscheme.cpp</label>
        <link refid="expliciteulerscheme_8cpp"/>
      </node>
      <node id="58">
        <label>ql/methods/finitedifferences/schemes/expliciteulerscheme.hpp</label>
        <link refid="expliciteulerscheme_8hpp"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>ql/methods/finitedifferences/schemes/hundsdorferscheme.cpp</label>
        <link refid="hundsdorferscheme_8cpp"/>
      </node>
      <node id="61">
        <label>ql/methods/finitedifferences/schemes/hundsdorferscheme.hpp</label>
        <link refid="hundsdorferscheme_8hpp"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>ql/methods/finitedifferences/schemes/impliciteulerscheme.cpp</label>
        <link refid="impliciteulerscheme_8cpp"/>
      </node>
      <node id="63">
        <label>ql/methods/finitedifferences/schemes/impliciteulerscheme.hpp</label>
        <link refid="impliciteulerscheme_8hpp"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>ql/methods/finitedifferences/schemes/methodoflinesscheme.cpp</label>
        <link refid="methodoflinesscheme_8cpp"/>
      </node>
      <node id="65">
        <label>ql/methods/finitedifferences/schemes/methodoflinesscheme.hpp</label>
        <link refid="methodoflinesscheme_8hpp"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>ql/methods/finitedifferences/schemes/modifiedcraigsneydscheme.cpp</label>
        <link refid="modifiedcraigsneydscheme_8cpp"/>
      </node>
      <node id="67">
        <label>ql/methods/finitedifferences/schemes/modifiedcraigsneydscheme.hpp</label>
        <link refid="modifiedcraigsneydscheme_8hpp"/>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>ql/methods/finitedifferences/schemes/trbdf2scheme.hpp</label>
        <link refid="trbdf2scheme_8hpp"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ql/methods/finitedifferences/solvers/fdm1dimsolver.cpp</label>
        <link refid="fdm1dimsolver_8cpp"/>
      </node>
      <node id="23">
        <label>ql/methods/finitedifferences/solvers/fdm1dimsolver.hpp</label>
        <link refid="fdm1dimsolver_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>ql/methods/finitedifferences/solvers/fdmbackwardsolver.cpp</label>
        <link refid="fdmbackwardsolver_8cpp"/>
      </node>
      <node id="77">
        <label>ql/methods/finitedifferences/solvers/fdmbackwardsolver.hpp</label>
        <link refid="fdmbackwardsolver_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ql/methods/finitedifferences/solvers/fdmblackscholessolver.cpp</label>
        <link refid="fdmblackscholessolver_8cpp"/>
      </node>
      <node id="78">
        <label>ql/methods/finitedifferences/solvers/fdmblackscholessolver.hpp</label>
        <link refid="fdmblackscholessolver_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>ql/methods/finitedifferences/solvers/fdmsolverdesc.hpp</label>
        <link refid="fdmsolverdesc_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>ql/methods/finitedifferences/stepcondition.hpp</label>
        <link refid="stepcondition_8hpp"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>ql/methods/finitedifferences/stepconditions/fdmamericanstepcondition.cpp</label>
        <link refid="fdmamericanstepcondition_8cpp"/>
      </node>
      <node id="85">
        <label>ql/methods/finitedifferences/stepconditions/fdmamericanstepcondition.hpp</label>
        <link refid="fdmamericanstepcondition_8hpp"/>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>ql/methods/finitedifferences/stepconditions/fdmbermudanstepcondition.cpp</label>
        <link refid="fdmbermudanstepcondition_8cpp"/>
      </node>
      <node id="88">
        <label>ql/methods/finitedifferences/stepconditions/fdmbermudanstepcondition.hpp</label>
        <link refid="fdmbermudanstepcondition_8hpp"/>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>ql/methods/finitedifferences/stepconditions/fdmsnapshotcondition.cpp</label>
        <link refid="fdmsnapshotcondition_8cpp"/>
      </node>
      <node id="96">
        <label>ql/methods/finitedifferences/stepconditions/fdmsnapshotcondition.hpp</label>
        <link refid="fdmsnapshotcondition_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>ql/methods/finitedifferences/stepconditions/fdmstepconditioncomposite.cpp</label>
        <link refid="fdmstepconditioncomposite_8cpp"/>
      </node>
      <node id="98">
        <label>ql/methods/finitedifferences/stepconditions/fdmstepconditioncomposite.hpp</label>
        <link refid="fdmstepconditioncomposite_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>ql/methods/finitedifferences/tridiagonaloperator.cpp</label>
        <link refid="tridiagonaloperator_8cpp"/>
      </node>
      <node id="99">
        <label>ql/methods/finitedifferences/tridiagonaloperator.hpp</label>
        <link refid="tridiagonaloperator_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>ql/methods/finitedifferences/utilities/fdmboundaryconditionset.hpp</label>
        <link refid="fdmboundaryconditionset_8hpp"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>ql/methods/finitedifferences/utilities/fdmdividendhandler.cpp</label>
        <link refid="fdmdividendhandler_8cpp"/>
      </node>
      <node id="90">
        <label>ql/methods/finitedifferences/utilities/fdmdividendhandler.hpp</label>
        <link refid="fdmdividendhandler_8hpp"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>ql/methods/finitedifferences/utilities/fdmescrowedloginnervaluecalculator.cpp</label>
        <link refid="fdmescrowedloginnervaluecalculator_8cpp"/>
      </node>
      <node id="4">
        <label>ql/methods/finitedifferences/utilities/fdminnervaluecalculator.cpp</label>
        <link refid="fdminnervaluecalculator_8cpp"/>
      </node>
      <node id="104">
        <label>ql/methods/finitedifferences/utilities/fdmquantohelper.cpp</label>
        <link refid="fdmquantohelper_8cpp"/>
      </node>
      <node id="103">
        <label>ql/methods/finitedifferences/utilities/fdmquantohelper.hpp</label>
        <link refid="fdmquantohelper_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>ql/pricingengines/vanilla/analyticdividendeuropeanengine.cpp</label>
        <link refid="analyticdividendeuropeanengine_8cpp"/>
      </node>
      <node id="34">
        <label>ql/pricingengines/vanilla/analyticdividendeuropeanengine.hpp</label>
        <link refid="analyticdividendeuropeanengine_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>ql/pricingengines/vanilla/analyticeuropeanengine.cpp</label>
        <link refid="analyticeuropeanengine_8cpp"/>
      </node>
      <node id="36">
        <label>ql/pricingengines/vanilla/analyticeuropeanengine.hpp</label>
        <link refid="analyticeuropeanengine_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>ql/pricingengines/vanilla/fdblackscholesvanillaengine.cpp</label>
        <link refid="fdblackscholesvanillaengine_8cpp"/>
      </node>
      <node id="79">
        <label>ql/pricingengines/vanilla/fdblackscholesvanillaengine.hpp</label>
        <link refid="fdblackscholesvanillaengine_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ql/pricingengines/vanilla/qdfpamericanengine.cpp</label>
        <link refid="qdfpamericanengine_8cpp"/>
      </node>
      <node id="40">
        <label>ql/pricingengines/vanilla/qdfpamericanengine.hpp</label>
        <link refid="qdfpamericanengine_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ql/pricingengines/vanilla/qdplusamericanengine.cpp</label>
        <link refid="qdplusamericanengine_8cpp"/>
      </node>
      <node id="39">
        <label>ql/pricingengines/vanilla/qdplusamericanengine.hpp</label>
        <link refid="qdplusamericanengine_8hpp"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>ql/processes/blackscholesprocess.cpp</label>
        <link refid="blackscholesprocess_8cpp"/>
      </node>
      <node id="27">
        <label>ql/processes/blackscholesprocess.hpp</label>
        <link refid="blackscholesprocess_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>ql/processes/eulerdiscretization.cpp</label>
        <link refid="eulerdiscretization_8cpp"/>
      </node>
      <node id="42">
        <label>ql/processes/eulerdiscretization.hpp</label>
        <link refid="eulerdiscretization_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>ql/stochasticprocess.cpp</label>
        <link refid="stochasticprocess_8cpp"/>
      </node>
      <node id="25">
        <label>ql/stochasticprocess.hpp</label>
        <link refid="stochasticprocess_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classQuantLib_1_1Array" prot="public">QuantLib::Array</innerclass>
    <innernamespace refid="namespaceQuantLib">QuantLib</innernamespace>
    <innernamespace refid="namespaceQuantLib_1_1detail">QuantLib::detail</innernamespace>
    <briefdescription>
<para>1-D array used in linear algebra. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>c++;<sp/>tab-width:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil;<sp/>c-basic-offset:<sp/>4<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(C)<sp/>2000,<sp/>2001,<sp/>2002,<sp/>2003<sp/>RiskMap<sp/>srl</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>Copyright<sp/>(C)<sp/>2003,<sp/>2004,<sp/>2005,<sp/>2006,<sp/>2009<sp/>StatPro<sp/>Italia<sp/>srl</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Copyright<sp/>(C)<sp/>2004<sp/>Ferdinando<sp/>Ametrano</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>QuantLib,<sp/>a<sp/>free-software/open-source<sp/>library</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>for<sp/>financial<sp/>quantitative<sp/>analysts<sp/>and<sp/>developers<sp/>-<sp/>http://quantlib.org/</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>QuantLib<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>QuantLib<sp/>license.<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>copy<sp/>of<sp/>the<sp/>license<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>please<sp/>email</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>&lt;quantlib-dev@lists.sf.net&gt;.<sp/>The<sp/>license<sp/>is<sp/>also<sp/>available<sp/>online<sp/>at</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>&lt;http://quantlib.org/license.shtml&gt;.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>license<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>quantlib_array_hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>quantlib_array_hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="types_8hpp" kindref="compound">ql/types.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="errors_8hpp" kindref="compound">ql/errors.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="null_8hpp" kindref="compound">ql/utilities/null.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceQuantLib" kindref="compound">QuantLib</ref><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classQuantLib_1_1Array" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array</ref>()<sp/>:<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>(static_cast&lt;<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref>&gt;(0))<sp/>{}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>value);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>value,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>increment);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;)<sp/>noexcept;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::initializer_list&lt;<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>&gt;);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/><ref refid="namespacestd" kindref="compound">std</ref>::enable_if_t&lt;<ref refid="namespacestd" kindref="compound">std</ref>::is_convertible_v&lt;T,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::initializer_list&lt;T&gt;<sp/>init);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>ForwardIterator&gt;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>(ForwardIterator<sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>,<sp/>ForwardIterator<sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>);</highlight></codeline>
<codeline lineno="74" refid="classQuantLib_1_1Array_1a0ef5f170c539ccdca8c6a77361f1ed47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>()<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>operator=(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>operator=(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;)<sp/>noexcept;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;)<sp/>const;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;)<sp/>const;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>operator+=(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>operator+=(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>operator-=(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>operator-=(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>operator*=(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>operator*=(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>operator/=(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>operator/=(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="103"></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>operator[](<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref>)<sp/>const;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="classQuantLib_1_1Array_1adece285fded78033a93d70af3d04199d" kindref="member">at</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref>)<sp/>const;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="classQuantLib_1_1Array_1a0e9f29175a978a989f1916d68f518fd9" kindref="member">front</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="classQuantLib_1_1Array_1ab6048f852091ddd9932d3d433586f5c1" kindref="member">back</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>&amp;<sp/>operator[](<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1adece285fded78033a93d70af3d04199d" kindref="member">at</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1a0e9f29175a978a989f1916d68f518fd9" kindref="member">front</ref>();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1ab6048f852091ddd9932d3d433586f5c1" kindref="member">back</ref>();</highlight></codeline>
<codeline lineno="116"></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1ab3f46d50556544f8affb06232abb6e8f" kindref="member">empty</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="123" refid="classQuantLib_1_1Array_1aeb3bcd9e5fc8e44f27d39508b37cb944" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1Array_1aeb3bcd9e5fc8e44f27d39508b37cb944" kindref="member">size_type</ref>;</highlight></codeline>
<codeline lineno="124" refid="classQuantLib_1_1Array_1aee40583321fcdc8230d6e85c8c9e017f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="classQuantLib_1_1Array_1aee40583321fcdc8230d6e85c8c9e017f" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="125" refid="classQuantLib_1_1Array_1afaec53b95e4bb9bbd3a199ba40bdeae7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>*<sp/><ref refid="classQuantLib_1_1Array_1afaec53b95e4bb9bbd3a199ba40bdeae7" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="126" refid="classQuantLib_1_1Array_1a21aef19036a54f73a22f55ac5ec32240" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>const<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>*<sp/><ref refid="classQuantLib_1_1Array_1a21aef19036a54f73a22f55ac5ec32240" kindref="member">const_iterator</ref>;</highlight></codeline>
<codeline lineno="127" refid="classQuantLib_1_1Array_1a9fd1e64d3a52f0a6f00bc43c1210202e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/><ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="classQuantLib_1_1Array_1a9fd1e64d3a52f0a6f00bc43c1210202e" kindref="member">reverse_iterator</ref>&lt;<ref refid="classQuantLib_1_1Array_1afaec53b95e4bb9bbd3a199ba40bdeae7" kindref="member">iterator</ref>&gt;<sp/><ref refid="classQuantLib_1_1Array_1a9fd1e64d3a52f0a6f00bc43c1210202e" kindref="member">reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="128" refid="classQuantLib_1_1Array_1a051267f5321888e20e8b3d82632f0a49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/><ref refid="namespacestd" kindref="compound">std</ref>::<ref refid="classQuantLib_1_1Array_1a9fd1e64d3a52f0a6f00bc43c1210202e" kindref="member">reverse_iterator</ref>&lt;<ref refid="classQuantLib_1_1Array_1a21aef19036a54f73a22f55ac5ec32240" kindref="member">const_iterator</ref>&gt;<sp/><ref refid="classQuantLib_1_1Array_1a051267f5321888e20e8b3d82632f0a49" kindref="member">const_reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="130"></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1a21aef19036a54f73a22f55ac5ec32240" kindref="member">const_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1afaec53b95e4bb9bbd3a199ba40bdeae7" kindref="member">iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1a21aef19036a54f73a22f55ac5ec32240" kindref="member">const_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1afaec53b95e4bb9bbd3a199ba40bdeae7" kindref="member">iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1a051267f5321888e20e8b3d82632f0a49" kindref="member">const_reverse_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1aa04f541cd9ea687c3a50be4760a49103" kindref="member">rbegin</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1a9fd1e64d3a52f0a6f00bc43c1210202e" kindref="member">reverse_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1aa04f541cd9ea687c3a50be4760a49103" kindref="member">rbegin</ref>();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1a051267f5321888e20e8b3d82632f0a49" kindref="member">const_reverse_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1a6c794222013bddb1d19bb3210e183afa" kindref="member">rend</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1a9fd1e64d3a52f0a6f00bc43c1210202e" kindref="member">reverse_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1a6c794222013bddb1d19bb3210e183afa" kindref="member">rend</ref>();</highlight></codeline>
<codeline lineno="140"></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1adc980959cbabb7fa44137e3994dd0166" kindref="member">resize</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a1a996589597062aaeb308ddc144656a7" kindref="member">swap</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;)<sp/>noexcept;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="147" refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::unique_ptr&lt;<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>[]&gt;<sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="148" refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="classQuantLib_1_1Array_1afd78eeec99ca45607a2c64520a45633c" kindref="member">DotProduct</ref>(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="classQuantLib_1_1Array_1a9e87629195c1f207492ed40027714342" kindref="member">Norm2</ref>(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unary<sp/>operators</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator+(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator+(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator-(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator-(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>binary<sp/>operators</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator+(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator+(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator+(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator+(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator+(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator+(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator+(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator+(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator-(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator-(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator-(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator-(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator-(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator-(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator-(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator-(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator*(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator*(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator*(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator*(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator*(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator*(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator*(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator*(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator/(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator/(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator/(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator/(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator/(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator/(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator/(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>operator/(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>math<sp/>functions</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="classQuantLib_1_1Array_1a0668e394c26fb5a3162ebce2c9b1d487" kindref="member">Abs</ref>(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="classQuantLib_1_1Array_1a0668e394c26fb5a3162ebce2c9b1d487" kindref="member">Abs</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="classQuantLib_1_1Array_1a8c77413983a52abf16be6a770dfa9fc7" kindref="member">Sqrt</ref>(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="classQuantLib_1_1Array_1a8c77413983a52abf16be6a770dfa9fc7" kindref="member">Sqrt</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="classQuantLib_1_1Array_1a8f2fb0a84f46165aa11f4a0e6536f71f" kindref="member">Log</ref>(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="classQuantLib_1_1Array_1a8f2fb0a84f46165aa11f4a0e6536f71f" kindref="member">Log</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="classQuantLib_1_1Array_1a8559b762b10f29f45940d358f6ea1df5" kindref="member">Exp</ref>(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="classQuantLib_1_1Array_1a8559b762b10f29f45940d358f6ea1df5" kindref="member">Exp</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="classQuantLib_1_1Array_1a2feacdf88afc5b01cfd21d91ea4db883" kindref="member">Pow</ref>(const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="classQuantLib_1_1Array_1a2feacdf88afc5b01cfd21d91ea4db883" kindref="member">Pow</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>utilities</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a1a996589597062aaeb308ddc144656a7" kindref="member">swap</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;)<sp/>noexcept;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>format</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::ostream&amp;<sp/>operator&lt;&lt;(<ref refid="namespacestd" kindref="compound">std</ref>::ostream&amp;,<sp/>const<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inline<sp/>definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="classQuantLib_1_1Array_1ac5827c4b589410669aee9bb192f959bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>::<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>(<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref><sp/>!=<sp/>0U<sp/>?<sp/>new<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>[<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>]<sp/>:<sp/>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>*)</highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">),<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>(<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="classQuantLib_1_1Array_1a5d75454ee245139e84d905c15da2d226" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array::Array</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>value)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>(<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref><sp/>!=<sp/>0U<sp/>?<sp/>new<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>[<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>]<sp/>:<sp/>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>*)nullptr),<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>(<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),value);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="classQuantLib_1_1Array_1ae3558d63cf6bd42ec926c2c7d90e0688" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array::Array</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>size,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>value,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>increment)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>data_(size<sp/>!=<sp/>0U<sp/>?<sp/>new<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>[size]<sp/>:<sp/>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>*)nullptr),<sp/>n_(size)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classQuantLib_1_1Array_1afaec53b95e4bb9bbd3a199ba40bdeae7" kindref="member">iterator</ref><sp/>i=<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>();<sp/>i!=<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>();<sp/>++i,<sp/>value+=increment)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*i<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="classQuantLib_1_1Array_1a66f62ab0baa614670b06f2573db21f05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array::Array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>from)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>data_(from.n_<sp/>!=<sp/>0U<sp/>?<sp/>new<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>[from.n_]<sp/>:<sp/>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>*)nullptr),<sp/>n_(from.n_)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(from.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),from.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="classQuantLib_1_1Array_1addef208f41c2d4ff07291c3654ec6a6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array::Array</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>from)<sp/>noexcept</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>data_((<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>n_(0)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1abf7c7f13964ae2a6c277bc0b84e6f943" kindref="member">swap</ref>(from);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="295" refid="namespaceQuantLib_1_1detail_1aca4d093c4c8c515c7bc4cacd66463a48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1_1detail_1aca4d093c4c8c515c7bc4cacd66463a48" kindref="member">_fill_array_</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>a,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>[]&gt;&amp;<sp/>data_,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref>&amp;<sp/>n_,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>begin,<sp/>I<sp/>end,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::true_type&amp;)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>got<sp/>redirected<sp/>here<sp/>from<sp/>a<sp/>call<sp/>like<sp/>Array(3,<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>it<sp/>matched<sp/>the<sp/>constructor<sp/>below<sp/>exactly<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ForwardIterator<sp/>=<sp/>int.<sp/><sp/>What<sp/>we<sp/>wanted<sp/>was<sp/>fill<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>with<sp/>a<sp/>given<sp/>value,<sp/>which<sp/>we<sp/>do<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>value<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_.reset(n<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>[n]<sp/>:<sp/>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(a.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),a.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),value);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="312" refid="namespaceQuantLib_1_1detail_1af1f64201af68d0d28c833fe92ae17477" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1_1detail_1aca4d093c4c8c515c7bc4cacd66463a48" kindref="member">_fill_array_</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>a,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>[]&gt;&amp;<sp/>data_,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref>&amp;<sp/>n_,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>I&amp;<sp/>end,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::false_type&amp;)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n<sp/>=<sp/>std::distance(begin,<sp/>end);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_.reset(n<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>[n]<sp/>:<sp/>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(QL_PATCH_MSVC)<sp/>&amp;&amp;<sp/>defined(QL_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(begin,<sp/>end,<sp/>a.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="classQuantLib_1_1Array_1a864450f0550571c5fcd1ceaf47156e15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array::Array</ref>(std::initializer_list&lt;Real&gt;<sp/>init)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1_1detail_1aca4d093c4c8c515c7bc4cacd66463a48" kindref="member">detail::_fill_array_</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>,<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,<sp/>init.begin(),<sp/>init.end(),</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ForwardIterator&gt;</highlight></codeline>
<codeline lineno="335" refid="classQuantLib_1_1Array_1a5db759a94538011cbf56552e39cab254" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array::Array</ref>(ForwardIterator<sp/>begin,<sp/>ForwardIterator<sp/>end)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(performance-unnecessary-value-param)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unfortunately,<sp/>calls<sp/>such<sp/>as<sp/>Array(3,<sp/>4)<sp/>match<sp/>this<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>detect<sp/>integral<sp/>types<sp/>and<sp/>dispatch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1_1detail_1aca4d093c4c8c515c7bc4cacd66463a48" kindref="member">detail::_fill_array_</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>,<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,<sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>,<sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_integral&lt;ForwardIterator&gt;());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="343" refid="classQuantLib_1_1Array_1a38ea8150f5ae40184b24e1eb4d237499" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1afb07361c5c804c9a6fd5e6462ffa6a00" kindref="member">Array::Array</ref>(std::initializer_list&lt;T&gt;<sp/>init)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1_1detail_1aca4d093c4c8c515c7bc4cacd66463a48" kindref="member">detail::_fill_array_</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>,<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,<sp/>init.begin(),<sp/>init.end(),<sp/>std::false_type());</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="classQuantLib_1_1Array_1aa8a4329575408b284f73b6a80efefb7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1aa8a4329575408b284f73b6a80efefb7b" kindref="member">Array::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strong<sp/>guarantee</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>temp(from);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1a1a996589597062aaeb308ddc144656a7" kindref="member">swap</ref>(temp);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="classQuantLib_1_1Array_1a1843d717ceea2c27b225203058b288ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1aa8a4329575408b284f73b6a80efefb7b" kindref="member">Array::operator=</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>from)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1abf7c7f13964ae2a6c277bc0b84e6f943" kindref="member">swap</ref>(from);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="classQuantLib_1_1Array_1a2ad2d9cd37eed4fb9d95f6f086449025" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a2ad2d9cd37eed4fb9d95f6f086449025" kindref="member">Array::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>to)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>==<sp/>to.<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>)<sp/>&amp;&amp;<sp/>std::equal(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>to.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="classQuantLib_1_1Array_1aba34e26e0119831dfa8d4a382c42ecbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1aba34e26e0119831dfa8d4a382c42ecbe" kindref="member">Array::operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>to)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(this-&gt;<ref refid="classQuantLib_1_1Array_1a2ad2d9cd37eed4fb9d95f6f086449025" kindref="member">operator==</ref>(to));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="classQuantLib_1_1Array_1a6535b654fa4a61202e23965e675f58b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1a6535b654fa4a61202e23965e675f58b9" kindref="member">Array::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>==<sp/>v.<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v.<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>added&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),v.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::plus&lt;&gt;());</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="classQuantLib_1_1Array_1aa4d1dc710eb02ebbec9275ce90522a4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1a6535b654fa4a61202e23965e675f58b9" kindref="member">Array::operator+=</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>+<sp/>x;<sp/>});</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="classQuantLib_1_1Array_1a56e20fee974585ecb2b81b8732d348ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1a56e20fee974585ecb2b81b8732d348ba" kindref="member">Array::operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>==<sp/>v.<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v.<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>subtracted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>v.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::minus&lt;&gt;());</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="classQuantLib_1_1Array_1a813ef4f8146a0c572124c252d8280495" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1a56e20fee974585ecb2b81b8732d348ba" kindref="member">Array::operator-=</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>-<sp/>x;<sp/>});</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="classQuantLib_1_1Array_1ac9fbea92e049e1ca524712e0ec8fce3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1ac9fbea92e049e1ca524712e0ec8fce3c" kindref="member">Array::operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>==<sp/>v.<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v.<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>multiplied&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>v.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::multiplies&lt;&gt;());</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="classQuantLib_1_1Array_1a57401a4cac66404fb19eea5d0f912d0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1ac9fbea92e049e1ca524712e0ec8fce3c" kindref="member">Array::operator*=</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>*<sp/>x;<sp/>});</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="classQuantLib_1_1Array_1afa66eaefecb2025b0c52032f25d9bca5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1afa66eaefecb2025b0c52032f25d9bca5" kindref="member">Array::operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>==<sp/>v.<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v.<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>divided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>v.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::divides&lt;&gt;());</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="classQuantLib_1_1Array_1a030d18fea67f51ce08fff233b0b12b25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1afa66eaefecb2025b0c52032f25d9bca5" kindref="member">Array::operator/=</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(QL_EXTRA_SAFETY_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(x<sp/>!=<sp/>0.0,<sp/></highlight><highlight class="stringliteral">&quot;division<sp/>by<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>/<sp/>x;<sp/>});</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="classQuantLib_1_1Array_1aad430222997b55f1d862b1cdfb70c7bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="classQuantLib_1_1Array_1aad430222997b55f1d862b1cdfb70c7bd" kindref="member">Array::operator[]</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(QL_EXTRA_SAFETY_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(i&lt;<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>must<sp/>be<sp/>less<sp/>than<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;:<sp/>array<sp/>access<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get()[i];</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="classQuantLib_1_1Array_1adece285fded78033a93d70af3d04199d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="classQuantLib_1_1Array_1adece285fded78033a93d70af3d04199d" kindref="member">Array::at</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(i&lt;<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>must<sp/>be<sp/>less<sp/>than<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;:<sp/>array<sp/>access<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get()[i];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="classQuantLib_1_1Array_1a0e9f29175a978a989f1916d68f518fd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="classQuantLib_1_1Array_1a0e9f29175a978a989f1916d68f518fd9" kindref="member">Array::front</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(QL_EXTRA_SAFETY_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>&gt;0,<sp/></highlight><highlight class="stringliteral">&quot;null<sp/>Array:<sp/>array<sp/>access<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get()[0];</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="classQuantLib_1_1Array_1ab6048f852091ddd9932d3d433586f5c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="classQuantLib_1_1Array_1ab6048f852091ddd9932d3d433586f5c1" kindref="member">Array::back</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(QL_EXTRA_SAFETY_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>&gt;0,<sp/></highlight><highlight class="stringliteral">&quot;null<sp/>Array:<sp/>array<sp/>access<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get()[<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>-1];</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="classQuantLib_1_1Array_1ac3273986c6ee2251115989ab73893a95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1aad430222997b55f1d862b1cdfb70c7bd" kindref="member">Array::operator[]</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(QL_EXTRA_SAFETY_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(i&lt;<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>must<sp/>be<sp/>less<sp/>than<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;:<sp/>array<sp/>access<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get()[i];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="classQuantLib_1_1Array_1a1960312b852524ca78a4312b770a8ee7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1adece285fded78033a93d70af3d04199d" kindref="member">Array::at</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(i&lt;<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>must<sp/>be<sp/>less<sp/>than<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;:<sp/>array<sp/>access<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get()[i];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="classQuantLib_1_1Array_1ac47bd957f53eea97a3249ce7653a7afc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1a0e9f29175a978a989f1916d68f518fd9" kindref="member">Array::front</ref>()<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(QL_EXTRA_SAFETY_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>&gt;0,<sp/></highlight><highlight class="stringliteral">&quot;null<sp/>Array:<sp/>array<sp/>access<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get()[0];</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="classQuantLib_1_1Array_1a390b95c0cc7e4623675132fd3a12f4dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>&amp;<sp/><ref refid="classQuantLib_1_1Array_1ab6048f852091ddd9932d3d433586f5c1" kindref="member">Array::back</ref>()<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>defined(QL_EXTRA_SAFETY_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>&gt;0,<sp/></highlight><highlight class="stringliteral">&quot;null<sp/>Array:<sp/>array<sp/>access<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get()[<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>-1];</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">Array::size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="classQuantLib_1_1Array_1ab3f46d50556544f8affb06232abb6e8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1ab3f46d50556544f8affb06232abb6e8f" kindref="member">Array::empty</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a21aef19036a54f73a22f55ac5ec32240" kindref="member">Array::const_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">Array::begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="classQuantLib_1_1Array_1aae5b24655a71e7ce3a59c6a0ccc4c3c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1afaec53b95e4bb9bbd3a199ba40bdeae7" kindref="member">Array::iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">Array::begin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a21aef19036a54f73a22f55ac5ec32240" kindref="member">Array::const_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">Array::end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get()+<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="classQuantLib_1_1Array_1a1e19834bac88279826c1c4a8c89c7a89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1afaec53b95e4bb9bbd3a199ba40bdeae7" kindref="member">Array::iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">Array::end</ref>()<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a6e0882f8cf7f1586757e5c47bb1a3aae" kindref="member">data_</ref>.get()+<ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="classQuantLib_1_1Array_1aa04f541cd9ea687c3a50be4760a49103" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a051267f5321888e20e8b3d82632f0a49" kindref="member">Array::const_reverse_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1aa04f541cd9ea687c3a50be4760a49103" kindref="member">Array::rbegin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a051267f5321888e20e8b3d82632f0a49" kindref="member">const_reverse_iterator</ref>(<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="classQuantLib_1_1Array_1af467e6b359d8e4833e2b416cabba8ffe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a9fd1e64d3a52f0a6f00bc43c1210202e" kindref="member">Array::reverse_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1aa04f541cd9ea687c3a50be4760a49103" kindref="member">Array::rbegin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a9fd1e64d3a52f0a6f00bc43c1210202e" kindref="member">reverse_iterator</ref>(<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="classQuantLib_1_1Array_1a6c794222013bddb1d19bb3210e183afa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a051267f5321888e20e8b3d82632f0a49" kindref="member">Array::const_reverse_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1a6c794222013bddb1d19bb3210e183afa" kindref="member">Array::rend</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a051267f5321888e20e8b3d82632f0a49" kindref="member">const_reverse_iterator</ref>(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="classQuantLib_1_1Array_1ae3c91e92f85cf413c84b76d8b9d62071" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a9fd1e64d3a52f0a6f00bc43c1210202e" kindref="member">Array::reverse_iterator</ref><sp/><ref refid="classQuantLib_1_1Array_1a6c794222013bddb1d19bb3210e183afa" kindref="member">Array::rend</ref>()<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a9fd1e64d3a52f0a6f00bc43c1210202e" kindref="member">reverse_iterator</ref>(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="classQuantLib_1_1Array_1adc980959cbabb7fa44137e3994dd0166" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1adc980959cbabb7fa44137e3994dd0166" kindref="member">Array::resize</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>swp(n);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/><ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>swp.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1a1a996589597062aaeb308ddc144656a7" kindref="member">swap</ref>(swp);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array_1acbe5b73b09d63338580f3e3b41632fe8" kindref="member">n_</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="classQuantLib_1_1Array_1a1a996589597062aaeb308ddc144656a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array_1a1a996589597062aaeb308ddc144656a7" kindref="member">Array::swap</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>from)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_.swap(from.data_);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(n_,<sp/>from.n_);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dot<sp/>product<sp/>and<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="classQuantLib_1_1Array_1afd78eeec99ca45607a2c64520a45633c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="namespaceQuantLib_1aa4a9ece3a7c58b84a51c185798672654" kindref="member">DotProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>==<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>multiplied&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::inner_product(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(0.0));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="classQuantLib_1_1Array_1a9e87629195c1f207492ed40027714342" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/><ref refid="namespaceQuantLib_1a4fe258b9e084694e3f45a68a86aa38e1" kindref="member">Norm2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<ref refid="namespaceQuantLib_1aa4a9ece3a7c58b84a51c185798672654" kindref="member">DotProduct</ref>(v,<sp/>v));</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overloaded<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="classQuantLib_1_1Array_1abde196d298d8f5d28aee9cd17b9130be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="classQuantLib_1_1Array_1a811c75057cc8f6057dcdecafcbcad1d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" kindref="member">operator+</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(v);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565" refid="classQuantLib_1_1Array_1a5720ef02a8bb50b354c9436e6e096be5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::negate&lt;&gt;());</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="classQuantLib_1_1Array_1aa0d555ebb393c23d4c2de8711376e493" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" kindref="member">operator-</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::negate&lt;&gt;());</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>binary<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="classQuantLib_1_1Array_1ad2c47ac8d5e51f022da8c22e5e4b195f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>==<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>added&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::plus&lt;&gt;());</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="classQuantLib_1_1Array_1a712a8e4b405fa7dafa483d4875b28959" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>==<sp/>v2.size(),</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>added&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::plus&lt;&gt;());</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="classQuantLib_1_1Array_1a1d1d9543375851500c10670c3b0b8497" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" kindref="member">operator+</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.size()<sp/>==<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>added&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v1);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::plus&lt;&gt;());</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="classQuantLib_1_1Array_1a7e465754f03ca14ac0543395b023db9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" kindref="member">operator+</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>NOLINT(cppcoreguidelines-rvalue-reference-param-not-moved)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.size()<sp/>==<sp/>v2.size(),</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>added&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.begin(),<sp/>v1.end(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::plus&lt;&gt;());</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615" refid="classQuantLib_1_1Array_1ac7eb993004291f5b193279e18fa9355d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>y<sp/>+<sp/>a;<sp/>});</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="classQuantLib_1_1Array_1a2c654e24aae4792477f02667d768b79b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" kindref="member">operator+</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v1);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>y<sp/>+<sp/>a;<sp/>});</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627" refid="classQuantLib_1_1Array_1adc0ba300e515b04a08e8b70ab34e51b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" kindref="member">operator+</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v2.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>a<sp/>+<sp/>y;<sp/>});</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633" refid="classQuantLib_1_1Array_1ac4d9358bb36825e49fb34bb82759b8c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a29236f635fb647688f496b36335974ce" kindref="member">operator+</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>a<sp/>+<sp/>y;<sp/>});</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="classQuantLib_1_1Array_1ac6b4eab63ff35c8c1934d8d787b90006" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>==<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>subtracted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::minus&lt;&gt;());</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648" refid="classQuantLib_1_1Array_1ac35e4d45d6aa28edd2b6e245a4dcc558" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>==<sp/>v2.size(),</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>subtracted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::minus&lt;&gt;());</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="classQuantLib_1_1Array_1a55d2f1ff7d5411388b6c7eeb8636412b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" kindref="member">operator-</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.size()<sp/>==<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>subtracted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v1);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::minus&lt;&gt;());</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="classQuantLib_1_1Array_1a010a49a49234d60e34059ec5c9a3c4ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" kindref="member">operator-</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>NOLINT(cppcoreguidelines-rvalue-reference-param-not-moved)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.size()<sp/>==<sp/>v2.size(),</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>subtracted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.begin(),<sp/>v1.end(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::minus&lt;&gt;());</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675" refid="classQuantLib_1_1Array_1a9b1dd6721d0e09398159120188d18286" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>y<sp/>-<sp/>a;<sp/>});</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681" refid="classQuantLib_1_1Array_1abfa17a99447324e7d3ab4340fb380986" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" kindref="member">operator-</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v1);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>y<sp/>-<sp/>a;<sp/>});</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687" refid="classQuantLib_1_1Array_1abbf2ff948c024511199ccbfbaf9249b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" kindref="member">operator-</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v2.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>a<sp/>-<sp/>y;<sp/>});</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693" refid="classQuantLib_1_1Array_1a4ab109544714d650098543db766ec05f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1ac138544e5cf2ccb42b8cacdb055d511a" kindref="member">operator-</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>a<sp/>-<sp/>y;<sp/>});</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699" refid="classQuantLib_1_1Array_1a93485c66c2ceef6cfb75a228f1a82fdd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a2cd51621fd12c13a7049b91c0c92052b" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>==<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>multiplied&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::multiplies&lt;&gt;());</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708" refid="classQuantLib_1_1Array_1a991a2ec82ace924595397ab0d92a1722" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a2cd51621fd12c13a7049b91c0c92052b" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>==<sp/>v2.size(),</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>multiplied&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::multiplies&lt;&gt;());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717" refid="classQuantLib_1_1Array_1ae20ec87b8bb460d9c5a36768643d1f46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a2cd51621fd12c13a7049b91c0c92052b" kindref="member">operator*</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.size()<sp/>==<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>multiplied&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v1);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::multiplies&lt;&gt;());</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726" refid="classQuantLib_1_1Array_1a2c1c0515ff8fe1bce116e392ccf90a42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a2cd51621fd12c13a7049b91c0c92052b" kindref="member">operator*</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>NOLINT(cppcoreguidelines-rvalue-reference-param-not-moved)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.size()<sp/>==<sp/>v2.size(),</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>multiplied&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.begin(),<sp/>v1.end(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::multiplies&lt;&gt;());</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735" refid="classQuantLib_1_1Array_1ae688732716c32a4d6de2d9584c9e43e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a2cd51621fd12c13a7049b91c0c92052b" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>y<sp/>*<sp/>a;<sp/>});</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741" refid="classQuantLib_1_1Array_1ac76599dc7284a566ae2925b150679f4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a2cd51621fd12c13a7049b91c0c92052b" kindref="member">operator*</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v1);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>y<sp/>*<sp/>a;<sp/>});</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="classQuantLib_1_1Array_1a160977868615e8d684ffb05fa99c73ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a2cd51621fd12c13a7049b91c0c92052b" kindref="member">operator*</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v2.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>a<sp/>*<sp/>y;<sp/>});</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753" refid="classQuantLib_1_1Array_1a02456b947a149119fd4a0101495319de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a2cd51621fd12c13a7049b91c0c92052b" kindref="member">operator*</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>a<sp/>*<sp/>y;<sp/>});</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759" refid="classQuantLib_1_1Array_1a280443733f0e45cfbe370408ea16f175" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a052237465c718b089ec0426570c2470e" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>==<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>divided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::divides&lt;&gt;());</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768" refid="classQuantLib_1_1Array_1ac62e640d8390172ae1ce9a3926608a93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a052237465c718b089ec0426570c2470e" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>==<sp/>v2.size(),</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>divided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::divides&lt;&gt;());</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777" refid="classQuantLib_1_1Array_1a0ba38dd3993557f95ae4abfe8125902b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a052237465c718b089ec0426570c2470e" kindref="member">operator/</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.size()<sp/>==<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>divided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v1);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::divides&lt;&gt;());</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786" refid="classQuantLib_1_1Array_1ade64c1ba1b6c440af07166a418cd421a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a052237465c718b089ec0426570c2470e" kindref="member">operator/</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>NOLINT(cppcoreguidelines-rvalue-reference-param-not-moved)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(v1.size()<sp/>==<sp/>v2.size(),</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arrays<sp/>with<sp/>different<sp/>sizes<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>v2.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>divided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.begin(),<sp/>v1.end(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>std::divides&lt;&gt;());</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795" refid="classQuantLib_1_1Array_1a84f9ff875f9503bb0bc31e52e8fbb959" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a052237465c718b089ec0426570c2470e" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v1,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v1.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v1.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v1.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>y<sp/>/<sp/>a;<sp/>});</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801" refid="classQuantLib_1_1Array_1ad9dabf43fecbaac5fab6682e6d480f87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a052237465c718b089ec0426570c2470e" kindref="member">operator/</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v1,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v1);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>y<sp/>/<sp/>a;<sp/>});</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807" refid="classQuantLib_1_1Array_1a3cad923323302ede64614f6e7632f35d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a052237465c718b089ec0426570c2470e" kindref="member">operator/</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v2.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v2.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v2.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>a<sp/>/<sp/>y;<sp/>});</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813" refid="classQuantLib_1_1Array_1a862882f79aa00e71985094dd7803261d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a052237465c718b089ec0426570c2470e" kindref="member">operator/</ref>(<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>a,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v2);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>y)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>a<sp/>/<sp/>y;<sp/>});</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821" refid="classQuantLib_1_1Array_1a0668e394c26fb5a3162ebce2c9b1d487" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1aa08e748d0a5ac9e3be936aef17925277" kindref="member">Abs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>std::fabs(x);<sp/>});</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828" refid="classQuantLib_1_1Array_1a50e718ecd8a3c041f8415abd84da8e67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1aa08e748d0a5ac9e3be936aef17925277" kindref="member">Abs</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>std::fabs(x);<sp/>});</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835" refid="classQuantLib_1_1Array_1a8c77413983a52abf16be6a770dfa9fc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a4c4350d9d3f1337e5cb861aaae9bb429" kindref="member">Sqrt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>std::sqrt(x);<sp/>});</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842" refid="classQuantLib_1_1Array_1ab75125f04b8460fdc5ace882b72c7f44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a4c4350d9d3f1337e5cb861aaae9bb429" kindref="member">Sqrt</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>std::sqrt(x);<sp/>});</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849" refid="classQuantLib_1_1Array_1a8f2fb0a84f46165aa11f4a0e6536f71f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1aee0cc7ff1877a11feea2c7cf910420c1" kindref="member">Log</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),v.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>std::log(x);<sp/>});</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856" refid="classQuantLib_1_1Array_1a40456dfca61e193e173175ebbef815b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1aee0cc7ff1877a11feea2c7cf910420c1" kindref="member">Log</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>std::log(x);<sp/>});</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863" refid="classQuantLib_1_1Array_1a8559b762b10f29f45940d358f6ea1df5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1aef201109400c40cbe3d288ae3a089050" kindref="member">Exp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>std::exp(x);<sp/>});</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870" refid="classQuantLib_1_1Array_1a560f794217bdb15d71360d08e45fc6cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1aef201109400c40cbe3d288ae3a089050" kindref="member">Exp</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>std::exp(x);<sp/>});</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877" refid="classQuantLib_1_1Array_1a2feacdf88afc5b01cfd21d91ea4db883" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a17a2d93c7122f82926983b2b804790f6" kindref="member">Pow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>alpha)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result(v.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(v.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>v.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>std::pow(x,<sp/>alpha);<sp/>});</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884" refid="classQuantLib_1_1Array_1a6407cbdfbdbdd826cd3750ffa200360b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/><ref refid="namespaceQuantLib_1a17a2d93c7122f82926983b2b804790f6" kindref="member">Pow</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>v,<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>alpha)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref><sp/>result<sp/>=<sp/>std::move(v);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ad27b5de4ada539cb0bd429bf14a5c23b" kindref="member">end</ref>(),<sp/>result.<ref refid="classQuantLib_1_1Array_1ac107d1ffe2ddf00bf1b7c2be03beab83" kindref="member">begin</ref>(),</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>x)<sp/>-&gt;<sp/><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>{<sp/>return<sp/>std::pow(x,<sp/>alpha);<sp/>});</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="classQuantLib_1_1Array_1aae5d5314f907b522ebd83fddb4d1fc92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceQuantLib_1abf7c7f13964ae2a6c277bc0b84e6f943" kindref="member">swap</ref>(<ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>v,<sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>w)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.<ref refid="classQuantLib_1_1Array_1a1a996589597062aaeb308ddc144656a7" kindref="member">swap</ref>(w);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895" refid="classQuantLib_1_1Array_1a3290708c171149766f28ea1ea40fe18a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespaceQuantLib_1aa1f92a20de5394ddf9fe3a49a6ce0d2f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1Array" kindref="compound">Array</ref>&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::streamsize<sp/>width<sp/>=<sp/>out.width();</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a.<ref refid="classQuantLib_1_1Array_1ab3f46d50556544f8affb06232abb6e8f" kindref="member">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n=0;<sp/>n&lt;a.<ref refid="classQuantLib_1_1Array_1a68ffa4a150e1d8d8bc3b5a212ffc1d35" kindref="member">size</ref>()-1;<sp/>++n)</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::setw(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(width))<sp/>&lt;&lt;<sp/>a[n]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::setw(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(width))<sp/>&lt;&lt;<sp/>a.<ref refid="classQuantLib_1_1Array_1ab6048f852091ddd9932d3d433586f5c1" kindref="member">back</ref>();</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ql/math/array.hpp"/>
  </compounddef>
</doxygen>
