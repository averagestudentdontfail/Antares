<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="steppingiterator_8hpp" kind="file" language="C++">
    <compoundname>steppingiterator.hpp</compoundname>
    <includes refid="errors_8hpp" local="no">ql/errors.hpp</includes>
    <includes refid="types_8hpp" local="no">ql/types.hpp</includes>
    <includes local="no">iterator</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="matrix_8hpp" local="no">ql/math/matrix.hpp</includedby>
    <incdepgraph>
      <node id="6">
        <label>ql/config.ansi.hpp</label>
        <link refid="config_8ansi_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ql/errors.hpp</label>
        <link refid="errors_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ql/mathconstants.hpp</label>
        <link refid="mathconstants_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ql/qldefines.hpp</label>
        <link refid="qldefines_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ql/shared_ptr.hpp</label>
        <link refid="shared__ptr_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ql/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ql/userconfig.hpp</label>
        <link refid="userconfig_8hpp"/>
      </node>
      <node id="1">
        <label>ql/utilities/steppingiterator.hpp</label>
        <link refid="steppingiterator_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>boost/assert.hpp</label>
      </node>
      <node id="4">
        <label>boost/config.hpp</label>
      </node>
      <node id="16">
        <label>boost/current_function.hpp</label>
      </node>
      <node id="14">
        <label>boost/enable_shared_from_this.hpp</label>
      </node>
      <node id="13">
        <label>boost/make_shared.hpp</label>
      </node>
      <node id="12">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="5">
        <label>boost/version.hpp</label>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="21">
        <label>cstddef</label>
      </node>
      <node id="17">
        <label>exception</label>
      </node>
      <node id="22">
        <label>iterator</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="18">
        <label>sstream</label>
      </node>
      <node id="19">
        <label>string</label>
      </node>
      <node id="23">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="20">
        <label>ql/instruments/impliedvolatility.cpp</label>
        <link refid="impliedvolatility_8cpp"/>
      </node>
      <node id="19">
        <label>ql/instruments/impliedvolatility.hpp</label>
        <link refid="impliedvolatility_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ql/instruments/multiassetoption.cpp</label>
        <link refid="multiassetoption_8cpp"/>
      </node>
      <node id="21">
        <label>ql/instruments/vanillaoption.cpp</label>
        <link refid="vanillaoption_8cpp"/>
      </node>
      <node id="10">
        <label>ql/math/integrals/gaussianquadratures.cpp</label>
        <link refid="gaussianquadratures_8cpp"/>
      </node>
      <node id="3">
        <label>ql/math/interpolations/cubicinterpolation.hpp</label>
        <link refid="cubicinterpolation_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ql/math/matrix.cpp</label>
        <link refid="matrix_8cpp"/>
      </node>
      <node id="2">
        <label>ql/math/matrix.hpp</label>
        <link refid="matrix_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ql/math/matrixutilities/gmres.cpp</label>
        <link refid="gmres_8cpp"/>
      </node>
      <node id="8">
        <label>ql/math/matrixutilities/qrdecomposition.cpp</label>
        <link refid="qrdecomposition_8cpp"/>
      </node>
      <node id="6">
        <label>ql/math/matrixutilities/qrdecomposition.hpp</label>
        <link refid="qrdecomposition_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ql/math/matrixutilities/symmetricschurdecomposition.cpp</label>
        <link refid="symmetricschurdecomposition_8cpp"/>
      </node>
      <node id="9">
        <label>ql/math/matrixutilities/symmetricschurdecomposition.hpp</label>
        <link refid="symmetricschurdecomposition_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ql/math/matrixutilities/tqreigendecomposition.cpp</label>
        <link refid="tqreigendecomposition_8cpp"/>
      </node>
      <node id="12">
        <label>ql/math/matrixutilities/tqreigendecomposition.hpp</label>
        <link refid="tqreigendecomposition_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ql/methods/finitedifferences/meshers/fdmblackscholesmesher.cpp</label>
        <link refid="fdmblackscholesmesher_8cpp"/>
      </node>
      <node id="24">
        <label>ql/methods/finitedifferences/operators/fdmblackscholesop.cpp</label>
        <link refid="fdmblackscholesop_8cpp"/>
      </node>
      <node id="23">
        <label>ql/methods/finitedifferences/operators/fdmblackscholesop.hpp</label>
        <link refid="fdmblackscholesop_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ql/methods/finitedifferences/solvers/fdm1dimsolver.cpp</label>
        <link refid="fdm1dimsolver_8cpp"/>
      </node>
      <node id="14">
        <label>ql/methods/finitedifferences/solvers/fdm1dimsolver.hpp</label>
        <link refid="fdm1dimsolver_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ql/methods/finitedifferences/solvers/fdmblackscholessolver.cpp</label>
        <link refid="fdmblackscholessolver_8cpp"/>
      </node>
      <node id="26">
        <label>ql/pricingengines/vanilla/analyticdividendeuropeanengine.cpp</label>
        <link refid="analyticdividendeuropeanengine_8cpp"/>
      </node>
      <node id="25">
        <label>ql/pricingengines/vanilla/analyticdividendeuropeanengine.hpp</label>
        <link refid="analyticdividendeuropeanengine_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>ql/pricingengines/vanilla/analyticeuropeanengine.cpp</label>
        <link refid="analyticeuropeanengine_8cpp"/>
      </node>
      <node id="27">
        <label>ql/pricingengines/vanilla/analyticeuropeanengine.hpp</label>
        <link refid="analyticeuropeanengine_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>ql/pricingengines/vanilla/fdblackscholesvanillaengine.cpp</label>
        <link refid="fdblackscholesvanillaengine_8cpp"/>
      </node>
      <node id="32">
        <label>ql/pricingengines/vanilla/qdfpamericanengine.cpp</label>
        <link refid="qdfpamericanengine_8cpp"/>
      </node>
      <node id="31">
        <label>ql/pricingengines/vanilla/qdfpamericanengine.hpp</label>
        <link refid="qdfpamericanengine_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>ql/pricingengines/vanilla/qdplusamericanengine.cpp</label>
        <link refid="qdplusamericanengine_8cpp"/>
      </node>
      <node id="30">
        <label>ql/pricingengines/vanilla/qdplusamericanengine.hpp</label>
        <link refid="qdplusamericanengine_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>ql/processes/blackscholesprocess.cpp</label>
        <link refid="blackscholesprocess_8cpp"/>
      </node>
      <node id="18">
        <label>ql/processes/blackscholesprocess.hpp</label>
        <link refid="blackscholesprocess_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>ql/processes/eulerdiscretization.cpp</label>
        <link refid="eulerdiscretization_8cpp"/>
      </node>
      <node id="35">
        <label>ql/processes/eulerdiscretization.hpp</label>
        <link refid="eulerdiscretization_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>ql/stochasticprocess.cpp</label>
        <link refid="stochasticprocess_8cpp"/>
      </node>
      <node id="16">
        <label>ql/stochasticprocess.hpp</label>
        <link refid="stochasticprocess_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ql/utilities/steppingiterator.hpp</label>
        <link refid="steppingiterator_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classQuantLib_1_1step__iterator" prot="public">QuantLib::step_iterator</innerclass>
    <innernamespace refid="namespaceQuantLib">QuantLib</innernamespace>
    <briefdescription>
<para>Iterator advancing in constant steps. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>c++;<sp/>tab-width:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil;<sp/>c-basic-offset:<sp/>4<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(C)<sp/>2000,<sp/>2001,<sp/>2002,<sp/>2003<sp/>RiskMap<sp/>srl</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>QuantLib,<sp/>a<sp/>free-software/open-source<sp/>library</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>for<sp/>financial<sp/>quantitative<sp/>analysts<sp/>and<sp/>developers<sp/>-<sp/>http://quantlib.org/</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>QuantLib<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>QuantLib<sp/>license.<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>copy<sp/>of<sp/>the<sp/>license<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>please<sp/>email</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>&lt;quantlib-dev@lists.sf.net&gt;.<sp/>The<sp/>license<sp/>is<sp/>also<sp/>available<sp/>online<sp/>at</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>&lt;http://quantlib.org/license.shtml&gt;.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>license<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>quantlib_stepping_iterator_hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>quantlib_stepping_iterator_hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="errors_8hpp" kindref="compound">ql/errors.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="types_8hpp" kindref="compound">ql/types.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceQuantLib" kindref="compound">QuantLib</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cpp_concepts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::random_access_iterator<sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classQuantLib_1_1step__iterator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(cppcoreguidelines-special-member-functions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="46" refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator<sp/><ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref>{};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>Size<sp/>would<sp/>mess<sp/>up<sp/>integer<sp/>division<sp/>in<sp/>distance_to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1a8ee2a478658b664ea4ad96babd0ca719" kindref="member">BigInteger</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>{};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="51" refid="classQuantLib_1_1step__iterator_1a1ab2e3433fe6f07e6a5fb723981ab4fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classQuantLib_1_1step__iterator_1a1ab2e3433fe6f07e6a5fb723981ab4fb" kindref="member">iterator_category</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;Iterator&gt;::iterator_category;</highlight></codeline>
<codeline lineno="52" refid="classQuantLib_1_1step__iterator_1af4eabf872447a4fa5daed73f8d3b86b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classQuantLib_1_1step__iterator_1af4eabf872447a4fa5daed73f8d3b86b5" kindref="member">difference_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;Iterator&gt;::difference_type;</highlight></codeline>
<codeline lineno="53" refid="classQuantLib_1_1step__iterator_1a5d30d9bf87eb302380df2e986fcc2efc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classQuantLib_1_1step__iterator_1a5d30d9bf87eb302380df2e986fcc2efc" kindref="member">value_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;Iterator&gt;::value_type;</highlight></codeline>
<codeline lineno="54" refid="classQuantLib_1_1step__iterator_1a10a11ea7c1dbbd9b7b9be40c614e3b02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classQuantLib_1_1step__iterator_1a10a11ea7c1dbbd9b7b9be40c614e3b02" kindref="member">pointer</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;Iterator&gt;::pointer;</highlight></codeline>
<codeline lineno="55" refid="classQuantLib_1_1step__iterator_1a3af299a01ffc8ae8696fde41d023442f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classQuantLib_1_1step__iterator_1a3af299a01ffc8ae8696fde41d023442f" kindref="member">reference</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;Iterator&gt;::reference;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classQuantLib_1_1step__iterator_1a61929a2c883ff8b26880ddb1f4b9a97d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator_1a61929a2c883ff8b26880ddb1f4b9a97d" kindref="member">step_iterator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classQuantLib_1_1step__iterator_1a84913b104795b7d1fefdd03e4e1e4ac1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1a84913b104795b7d1fefdd03e4e1e4ac1" kindref="member">step_iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iterator&amp;<sp/>base,<sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1afe8982263ca95547ae2e0b58b9146971" kindref="member">step</ref>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref>(base),<sp/><ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>(static_cast&lt;<ref refid="namespaceQuantLib_1a8ee2a478658b664ea4ad96babd0ca719" kindref="member">BigInteger</ref>&gt;(<ref refid="classQuantLib_1_1step__iterator_1afe8982263ca95547ae2e0b58b9146971" kindref="member">step</ref>))<sp/>{}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OtherIterator&gt;</highlight></codeline>
<codeline lineno="63" refid="classQuantLib_1_1step__iterator_1ae6e6171d639e7e19f98c966af6982eb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator_1ae6e6171d639e7e19f98c966af6982eb8" kindref="member">step_iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator&lt;OtherIterator&gt;</ref>&amp;<sp/>i,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::enable_if_t&lt;std::is_convertible_v</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;OtherIterator,<sp/>Iterator&gt;&gt;*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref>(i.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref>),<sp/><ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>(static_cast&lt;<ref refid="namespaceQuantLib_1a8ee2a478658b664ea4ad96babd0ca719" kindref="member">BigInteger</ref>&gt;(i.<ref refid="classQuantLib_1_1step__iterator_1afe8982263ca95547ae2e0b58b9146971" kindref="member">step</ref>()))<sp/>{}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classQuantLib_1_1step__iterator_1afe8982263ca95547ae2e0b58b9146971" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1afe8982263ca95547ae2e0b58b9146971" kindref="member">step</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>);<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classQuantLib_1_1step__iterator_1a8b9b610e475a999ad35d7fa708771008" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/><ref refid="classQuantLib_1_1step__iterator_1a8b9b610e475a999ad35d7fa708771008" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classQuantLib_1_1step__iterator_1a183f262a556ae9df3dd3c48129469cb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/><ref refid="classQuantLib_1_1step__iterator_1a183f262a556ae9df3dd3c48129469cb8" kindref="member">operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>+=<sp/><ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classQuantLib_1_1step__iterator_1a64db4537e8ed523362fe2175f970f7ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1a64db4537e8ed523362fe2175f970f7ac" kindref="member">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>+=<sp/><ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classQuantLib_1_1step__iterator_1aebc3f5885aef463c4670cc53826a8c2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator_1a3af299a01ffc8ae8696fde41d023442f" kindref="member">reference</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1aebc3f5885aef463c4670cc53826a8c2b" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classQuantLib_1_1step__iterator_1a3904dc6127ed63c411f46e5093d8d9b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/><ref refid="classQuantLib_1_1step__iterator_1a3904dc6127ed63c411f46e5093d8d9b3" kindref="member">operator--</ref>()<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>-=<sp/><ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classQuantLib_1_1step__iterator_1a656aae080dd7597c1c418929d214020b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1a656aae080dd7597c1c418929d214020b" kindref="member">operator--</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>-=<sp/><ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classQuantLib_1_1step__iterator_1aaec86fd17e6ce6b026b7c0eebe87e6ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/><ref refid="classQuantLib_1_1step__iterator_1aaec86fd17e6ce6b026b7c0eebe87e6ae" kindref="member">operator+=</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>+=<sp/>n<sp/>*<sp/><ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classQuantLib_1_1step__iterator_1aa0981be8cd258d65458489d27b734736" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/><ref refid="classQuantLib_1_1step__iterator_1aa0981be8cd258d65458489d27b734736" kindref="member">operator-=</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>-=<sp/>n<sp/>*<sp/><ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="classQuantLib_1_1step__iterator_1a960d441d0d92d14219f30711fcef5870" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator_1a3af299a01ffc8ae8696fde41d023442f" kindref="member">reference</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1a960d441d0d92d14219f30711fcef5870" kindref="member">operator[]</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>+<sp/>n<sp/>*<sp/><ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="classQuantLib_1_1step__iterator_1a80c76044148a2f98cf0be66eec6b3527" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1a80c76044148a2f98cf0be66eec6b3527" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>i,<sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1a61929a2c883ff8b26880ddb1f4b9a97d" kindref="member">step_iterator</ref>(i.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>+<sp/>n<sp/>*<sp/>i.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>,<sp/>i.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classQuantLib_1_1step__iterator_1ab70ff8526d0beda24d6c461e7ef63961" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1ab70ff8526d0beda24d6c461e7ef63961" kindref="member">operator+</ref>(<ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1a61929a2c883ff8b26880ddb1f4b9a97d" kindref="member">step_iterator</ref>(i.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>+<sp/>n<sp/>*<sp/>i.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>,<sp/>i.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classQuantLib_1_1step__iterator_1a6230131cd003d2b5250a7fddbba059f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1a6230131cd003d2b5250a7fddbba059f3" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>i,<sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1a61929a2c883ff8b26880ddb1f4b9a97d" kindref="member">step_iterator</ref>(i.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>-<sp/>n<sp/>*<sp/>i.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>,<sp/>i.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classQuantLib_1_1step__iterator_1a8b757499cfb2ff45c0857dda31848dd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1af4eabf872447a4fa5daed73f8d3b86b5" kindref="member">difference_type</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1a8b757499cfb2ff45c0857dda31848dd2" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>QL_EXTRA_SAFETY_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(lhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref><sp/>==<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>,<sp/></highlight><highlight class="stringliteral">&quot;step_iterators<sp/>with<sp/>different<sp/>step<sp/>cannot<sp/>be<sp/>added<sp/>or<sp/>subtracted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>-<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref>)<sp/>/<sp/>lhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classQuantLib_1_1step__iterator_1af1cdd06f36e931f8aac4e48a24db774a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1af1cdd06f36e931f8aac4e48a24db774a" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>==<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>&amp;&amp;<sp/>lhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref><sp/>==<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="classQuantLib_1_1step__iterator_1ade962bc7689b66c941a8728a81a15a3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1ade962bc7689b66c941a8728a81a15a3a" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>!=<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>||<sp/>lhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref><sp/>!=<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classQuantLib_1_1step__iterator_1a8dd941a0ebc077b7d28eff99b43e72df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1a8dd941a0ebc077b7d28eff99b43e72df" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>QL_EXTRA_SAFETY_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(lhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref><sp/>==<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>,<sp/></highlight><highlight class="stringliteral">&quot;step_iterators<sp/>with<sp/>different<sp/>step<sp/>cannot<sp/>be<sp/>compared&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>&lt;<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="classQuantLib_1_1step__iterator_1ac622789c6b53f3ba23c68eb4b9f4ee2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1ac622789c6b53f3ba23c68eb4b9f4ee2e" kindref="member">operator&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>QL_EXTRA_SAFETY_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(lhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref><sp/>==<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>,<sp/></highlight><highlight class="stringliteral">&quot;step_iterators<sp/>with<sp/>different<sp/>step<sp/>cannot<sp/>be<sp/>compared&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>&gt;<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="classQuantLib_1_1step__iterator_1a448cdc1f734f8075e232e509c65315c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1a448cdc1f734f8075e232e509c65315c0" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>QL_EXTRA_SAFETY_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(lhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref><sp/>==<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>,<sp/></highlight><highlight class="stringliteral">&quot;step_iterators<sp/>with<sp/>different<sp/>step<sp/>cannot<sp/>be<sp/>compared&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>&lt;=<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="classQuantLib_1_1step__iterator_1a88fa68b32da6083181fe565645ce2cb2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator_1a88fa68b32da6083181fe565645ce2cb2" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>QL_EXTRA_SAFETY_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errors_8hpp_1a7a9bcab8006882bc7d5302a0861ab1a6" kindref="member">QL_REQUIRE</ref>(lhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref><sp/>==<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1ac91bf3a53d1da3deecaa841bfbee9363" kindref="member">step_</ref>,<sp/></highlight><highlight class="stringliteral">&quot;step_iterators<sp/>with<sp/>different<sp/>step<sp/>cannot<sp/>be<sp/>compared&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref><sp/>&gt;=<sp/>rhs.<ref refid="classQuantLib_1_1step__iterator_1a6f3aa94ff7093f5bf522892a262a9f4a" kindref="member">base_</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="171" refid="classQuantLib_1_1step__iterator_1a8827eca53826b1ca424151b01e8bfb37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator&lt;Iterator&gt;</ref><sp/><ref refid="classQuantLib_1_1step__iterator_1a8827eca53826b1ca424151b01e8bfb37" kindref="member">make_step_iterator</ref>(Iterator<sp/>it,<sp/><ref refid="namespaceQuantLib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuantLib_1_1step__iterator" kindref="compound">step_iterator&lt;Iterator&gt;</ref>(it,step);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ql/utilities/steppingiterator.hpp"/>
  </compounddef>
</doxygen>
