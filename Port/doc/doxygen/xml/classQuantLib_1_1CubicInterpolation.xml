<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classQuantLib_1_1CubicInterpolation" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CubicInterpolation</compoundname>
    <basecompoundref refid="classQuantLib_1_1Interpolation" prot="public" virt="non-virtual">QuantLib::Interpolation</basecompoundref>
    <derivedcompoundref refid="classQuantLib_1_1AkimaCubicInterpolation" prot="public" virt="non-virtual">QuantLib::AkimaCubicInterpolation</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1CubicNaturalSpline" prot="public" virt="non-virtual">QuantLib::CubicNaturalSpline</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1CubicSplineOvershootingMinimization1" prot="public" virt="non-virtual">QuantLib::CubicSplineOvershootingMinimization1</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1CubicSplineOvershootingMinimization2" prot="public" virt="non-virtual">QuantLib::CubicSplineOvershootingMinimization2</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1FritschButlandCubic" prot="public" virt="non-virtual">QuantLib::FritschButlandCubic</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1HarmonicCubic" prot="public" virt="non-virtual">QuantLib::HarmonicCubic</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1KrugerCubic" prot="public" virt="non-virtual">QuantLib::KrugerCubic</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1MonotonicCubicNaturalSpline" prot="public" virt="non-virtual">QuantLib::MonotonicCubicNaturalSpline</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1MonotonicParabolic" prot="public" virt="non-virtual">QuantLib::MonotonicParabolic</derivedcompoundref>
    <derivedcompoundref refid="classQuantLib_1_1Parabolic" prot="public" virt="non-virtual">QuantLib::Parabolic</derivedcompoundref>
    <includes refid="cubicinterpolation_8hpp" local="no">cubicinterpolation.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28" prot="public" static="no" strong="no">
        <type></type>
        <name>DerivativeApprox</name>
        <qualifiedname>QuantLib::CubicInterpolation::DerivativeApprox</qualifiedname>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28aaa6b6cbb8010b02172412742c21ce2d7" prot="public">
          <name>Spline</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Spline approximation (non-local, non-monotonic, linear[?]). Different boundary conditions can be used on the left and right boundaries: see <ref refid="classQuantLib_1_1BoundaryCondition" kindref="compound">BoundaryCondition</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a2e0b992051247c4b596f0c76bf9b6872" prot="public">
          <name>SplineOM1</name>
          <briefdescription>
<para>Overshooting minimization 1st derivative. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a03364cf5474cc64cf64a6ad04a23e925" prot="public">
          <name>SplineOM2</name>
          <briefdescription>
<para>Overshooting minimization 2nd derivative. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a8398e52e5ac2d6cb982583eb93121c60" prot="public">
          <name>FourthOrder</name>
          <briefdescription>
<para>Fourth-order approximation (local, non-monotonic, linear) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a59b262d48fba762c8ddf0f492142d401" prot="public">
          <name>Parabolic</name>
          <briefdescription>
<para><ref refid="classQuantLib_1_1Parabolic" kindref="compound">Parabolic</ref> approximation (local, non-monotonic, linear) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a382235585b6df81d2a2a76ebc67a51f1" prot="public">
          <name>FritschButland</name>
          <briefdescription>
<para>Fritsch-Butland approximation (local, monotonic, non-linear) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a3da52995b65ceaa3b317cd111d4effd6" prot="public">
          <name>Akima</name>
          <briefdescription>
<para>Akima approximation (local, non-monotonic, non-linear) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a07ea2cd3f162271d5f00b36af15db775" prot="public">
          <name>Kruger</name>
          <briefdescription>
<para>Kruger approximation (local, monotonic, non-linear) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28ac68a4d60443425887e8fcc3bf5f5870f" prot="public">
          <name>Harmonic</name>
          <briefdescription>
<para>Weighted harmonic mean approximation (local, monotonic, non-linear) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/cubicinterpolation.hpp" line="108" column="9" bodyfile="ql/math/interpolations/cubicinterpolation.hpp" bodystart="108" bodyend="138"/>
      </memberdef>
      <memberdef kind="enum" id="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2" prot="public" static="no" strong="no">
        <type></type>
        <name>BoundaryCondition</name>
        <qualifiedname>QuantLib::CubicInterpolation::BoundaryCondition</qualifiedname>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2aa935d8faa9b58af88d0f2e10b4d8fd79" prot="public">
          <name>NotAKnot</name>
          <briefdescription>
<para>Make second(-last) point an inactive knot. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2ad22688f36c922046f6c65b68af4b09ee" prot="public">
          <name>FirstDerivative</name>
          <briefdescription>
<para>Match value of end-slope. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2af4b281a5218c4674a7539bf071bfca0d" prot="public">
          <name>SecondDerivative</name>
          <briefdescription>
<para>Match value of second derivative at end. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2a6847b34b015cdf8ebe961cf88d821124" prot="public">
          <name>Periodic</name>
          <briefdescription>
<para>Match first and second derivative at either end. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2a4f8cf58b888cceefce621dead46cecfb" prot="public">
          <name>Lagrange</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Match end-slope to the slope of the cubic that matches the first four data at the respective end </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/cubicinterpolation.hpp" line="139" column="9" bodyfile="ql/math/interpolations/cubicinterpolation.hpp" bodystart="139" bodyend="156"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classQuantLib_1_1CubicInterpolation_1ad01c1dd629c8828cc07bc5d19262a6b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I1</type>
          </param>
          <param>
            <type>class I2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>QuantLib::CubicInterpolation::CubicInterpolation</definition>
        <argsstring>(const I1 &amp;xBegin, const I1 &amp;xEnd, const I2 &amp;yBegin, CubicInterpolation::DerivativeApprox da, bool monotonic, CubicInterpolation::BoundaryCondition leftCond, Real leftConditionValue, CubicInterpolation::BoundaryCondition rightCond, Real rightConditionValue)</argsstring>
        <name>CubicInterpolation</name>
        <qualifiedname>QuantLib::CubicInterpolation::CubicInterpolation</qualifiedname>
        <param>
          <type>const I1 &amp;</type>
          <declname>xBegin</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>xEnd</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>yBegin</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28" kindref="member">CubicInterpolation::DerivativeApprox</ref></type>
          <declname>da</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>monotonic</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2" kindref="member">CubicInterpolation::BoundaryCondition</ref></type>
          <declname>leftCond</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>leftConditionValue</declname>
        </param>
        <param>
          <type><ref refid="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2" kindref="member">CubicInterpolation::BoundaryCondition</ref></type>
          <declname>rightCond</declname>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rightConditionValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>the <formula id="36">$ x $</formula> values must be sorted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/cubicinterpolation.hpp" line="159" column="9" bodyfile="ql/math/interpolations/cubicinterpolation.hpp" bodystart="159" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1CubicInterpolation_1a0209cc00b9679077a46ed33936321e56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::CubicInterpolation::primitiveConstants</definition>
        <argsstring>() const</argsstring>
        <name>primitiveConstants</name>
        <qualifiedname>QuantLib::CubicInterpolation::primitiveConstants</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/cubicinterpolation.hpp" line="178" column="27" bodyfile="ql/math/interpolations/cubicinterpolation.hpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1CubicInterpolation_1a41c9316afcef51fcc63843e615eb7c7f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::CubicInterpolation::aCoefficients</definition>
        <argsstring>() const</argsstring>
        <name>aCoefficients</name>
        <qualifiedname>QuantLib::CubicInterpolation::aCoefficients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/cubicinterpolation.hpp" line="181" column="27" bodyfile="ql/math/interpolations/cubicinterpolation.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1CubicInterpolation_1afddfdbcabc2778acbb8821eb7bace747" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::CubicInterpolation::bCoefficients</definition>
        <argsstring>() const</argsstring>
        <name>bCoefficients</name>
        <qualifiedname>QuantLib::CubicInterpolation::bCoefficients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/cubicinterpolation.hpp" line="182" column="27" bodyfile="ql/math/interpolations/cubicinterpolation.hpp" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1CubicInterpolation_1a5b2d7df37cbf802e478903d1fcc824a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::CubicInterpolation::cCoefficients</definition>
        <argsstring>() const</argsstring>
        <name>cCoefficients</name>
        <qualifiedname>QuantLib::CubicInterpolation::cCoefficients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/cubicinterpolation.hpp" line="183" column="27" bodyfile="ql/math/interpolations/cubicinterpolation.hpp" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1CubicInterpolation_1a99dee302ee3aa7e44a51356cc07e2cef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; bool &gt; &amp;</type>
        <definition>const std::vector&lt; bool &gt; &amp; QuantLib::CubicInterpolation::monotonicityAdjustments</definition>
        <argsstring>() const</argsstring>
        <name>monotonicityAdjustments</name>
        <qualifiedname>QuantLib::CubicInterpolation::monotonicityAdjustments</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/cubicinterpolation.hpp" line="184" column="27" bodyfile="ql/math/interpolations/cubicinterpolation.hpp" bodystart="184" bodyend="186"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classQuantLib_1_1CubicInterpolation_1a2d5d2965d210886929c75c2ab7c3ba1c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classQuantLib_1_1detail_1_1CoefficientHolder" kindref="compound">detail::CoefficientHolder</ref> &amp;</type>
        <definition>const detail::CoefficientHolder &amp; QuantLib::CubicInterpolation::coeffs</definition>
        <argsstring>() const</argsstring>
        <name>coeffs</name>
        <qualifiedname>QuantLib::CubicInterpolation::coeffs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/cubicinterpolation.hpp" line="188" column="41" bodyfile="ql/math/interpolations/cubicinterpolation.hpp" bodystart="188" bodyend="190"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Cubic interpolation between discrete points. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classQuantLib_1_1Cubic" kindref="compound">Cubic</ref> interpolation is fully defined when the ${f_i}$ function values at points ${x_i}$ are supplemented with ${f^&apos;_i}$ function derivative values.</para>
<para>Different type of first derivative approximations are implemented, both local and non-local. Local schemes (Fourth-order, <ref refid="classQuantLib_1_1Parabolic" kindref="compound">Parabolic</ref>, Modified <ref refid="classQuantLib_1_1Parabolic" kindref="compound">Parabolic</ref>, Fritsch-Butland, Akima, Kruger) use only $f$ values near $x_i$ to calculate each $f^&apos;_i$. Non-local schemes (Spline with different boundary conditions) use all ${f_i}$ values and obtain ${f^&apos;_i}$ by solving a linear system of equations. Local schemes produce $C^1$ interpolants, while the spline schemes generate $C^2$ interpolants.</para>
<para>Hyman&apos;s monotonicity constraint filter is also implemented: it can be applied to all schemes to ensure that in the regions of local monotoniticity of the input (three successive increasing or decreasing values) the interpolating cubic remains monotonic. If the interpolating cubic is already monotonic, the Hyman filter leaves it unchanged preserving all its original features.</para>
<para>In the case of $C^2$ interpolants the Hyman filter ensures local monotonicity at the expense of the second derivative of the interpolant which will no longer be continuous in the points where the filter has been applied.</para>
<para>While some non-linear schemes (Modified <ref refid="classQuantLib_1_1Parabolic" kindref="compound">Parabolic</ref>, Fritsch-Butland, Kruger) are guaranteed to be locally monotonic in their original approximation, all other schemes must be filtered according to the Hyman criteria at the expense of their linearity.</para>
<para>See R. L. Dougherty, A. Edelman, and J. M. Hyman, &quot;Nonnegativity-, Monotonicity-, or Convexity-Preserving CubicSpline and
Quintic Hermite Interpolation&quot; Mathematics Of Computation, v. 52, n. 186, April 1989, pp. 471-494.</para>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>implement missing schemes (FourthOrder and ModifiedParabolic) and missing boundary conditions (Periodic and Lagrange).</para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="test_1_test000009"><xreftitle>Test</xreftitle><xrefdescription><para>to be adapted from old ones.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="warning"><para>See the <ref refid="classQuantLib_1_1Interpolation" kindref="compound">Interpolation</ref> class for information about the required lifetime of the underlying data. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>QuantLib::AkimaCubicInterpolation</label>
        <link refid="classQuantLib_1_1AkimaCubicInterpolation"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::CubicInterpolation</label>
        <link refid="classQuantLib_1_1CubicInterpolation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::CubicNaturalSpline</label>
        <link refid="classQuantLib_1_1CubicNaturalSpline"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::CubicSplineOvershootingMinimization1</label>
        <link refid="classQuantLib_1_1CubicSplineOvershootingMinimization1"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::CubicSplineOvershootingMinimization2</label>
        <link refid="classQuantLib_1_1CubicSplineOvershootingMinimization2"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Extrapolator</label>
        <link refid="classQuantLib_1_1Extrapolator"/>
      </node>
      <node id="8">
        <label>QuantLib::FritschButlandCubic</label>
        <link refid="classQuantLib_1_1FritschButlandCubic"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::HarmonicCubic</label>
        <link refid="classQuantLib_1_1HarmonicCubic"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Interpolation</label>
        <link refid="classQuantLib_1_1Interpolation"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::KrugerCubic</label>
        <link refid="classQuantLib_1_1KrugerCubic"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QuantLib::MonotonicCubicNaturalSpline</label>
        <link refid="classQuantLib_1_1MonotonicCubicNaturalSpline"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QuantLib::MonotonicParabolic</label>
        <link refid="classQuantLib_1_1MonotonicParabolic"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QuantLib::Parabolic</label>
        <link refid="classQuantLib_1_1Parabolic"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::CubicInterpolation</label>
        <link refid="classQuantLib_1_1CubicInterpolation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Extrapolator</label>
        <link refid="classQuantLib_1_1Extrapolator"/>
      </node>
      <node id="2">
        <label>QuantLib::Interpolation</label>
        <link refid="classQuantLib_1_1Interpolation"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/math/interpolations/cubicinterpolation.hpp" line="106" column="5" bodyfile="ql/math/interpolations/cubicinterpolation.hpp" bodystart="106" bodyend="191"/>
    <listofallmembers>
      <member refid="classQuantLib_1_1CubicInterpolation_1a41c9316afcef51fcc63843e615eb7c7f" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>aCoefficients</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a3da52995b65ceaa3b317cd111d4effd6" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>Akima</name></member>
      <member refid="classQuantLib_1_1Extrapolator_1ab3936a9b5b5c163d3e511437c16c1d9e" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>allowsExtrapolation</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1afddfdbcabc2778acbb8821eb7bace747" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>bCoefficients</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>BoundaryCondition</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a5b2d7df37cbf802e478903d1fcc824a2" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>cCoefficients</name></member>
      <member refid="classQuantLib_1_1Interpolation_1ab682157f4f0585bc28beefc6c22c8ba8" prot="protected" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>checkRange</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a2d5d2965d210886929c75c2ab7c3ba1c" prot="private" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>coeffs</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1ad01c1dd629c8828cc07bc5d19262a6b6" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>CubicInterpolation</name></member>
      <member refid="classQuantLib_1_1Interpolation_1ab52a971431083a0a474266d6cdc9f936" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>derivative</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>DerivativeApprox</name></member>
      <member refid="classQuantLib_1_1Extrapolator_1a6af69387d5cae0fe84d6a0c858406218" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>disableExtrapolation</name></member>
      <member refid="classQuantLib_1_1Interpolation_1aca518c22ea0e7c6a410757877f11756c" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>empty</name></member>
      <member refid="classQuantLib_1_1Extrapolator_1a5f7b5650a44d6c63095bc739470c8bfb" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>enableExtrapolation</name></member>
      <member refid="classQuantLib_1_1Extrapolator_1a9a45b840a003c411ad1c2b71578e329a" prot="private" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>extrapolate_</name></member>
      <member refid="classQuantLib_1_1Extrapolator_1af1c3adaccdfaf07d3d07edaa234444f7" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>Extrapolator</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2ad22688f36c922046f6c65b68af4b09ee" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>FirstDerivative</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a8398e52e5ac2d6cb982583eb93121c60" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>FourthOrder</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a382235585b6df81d2a2a76ebc67a51f1" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>FritschButland</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28ac68a4d60443425887e8fcc3bf5f5870f" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>Harmonic</name></member>
      <member refid="classQuantLib_1_1Interpolation_1aef7940748a211476a0ed80e3a6ca9b9b" prot="protected" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>impl_</name></member>
      <member refid="classQuantLib_1_1Interpolation_1a3357fa39f1e41da02be1792133f6d622" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>Interpolation</name></member>
      <member refid="classQuantLib_1_1Interpolation_1af0892ba060b7b7d58943718b074f079a" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>isInRange</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a07ea2cd3f162271d5f00b36af15db775" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>Kruger</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2a4f8cf58b888cceefce621dead46cecfb" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>Lagrange</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a99dee302ee3aa7e44a51356cc07e2cef" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>monotonicityAdjustments</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2aa935d8faa9b58af88d0f2e10b4d8fd79" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>NotAKnot</name></member>
      <member refid="classQuantLib_1_1Interpolation_1a9e0ba688e60feed84158204bf22b678d" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>operator()</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a59b262d48fba762c8ddf0f492142d401" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>Parabolic</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2a6847b34b015cdf8ebe961cf88d821124" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>Periodic</name></member>
      <member refid="classQuantLib_1_1Interpolation_1a5b8ec18bc4927757f4a04967f13b271c" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>primitive</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a0209cc00b9679077a46ed33936321e56" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>primitiveConstants</name></member>
      <member refid="classQuantLib_1_1Interpolation_1afab97bcd82695d553682b5f6eebb1718" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>secondDerivative</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1ae300e9cdeef2bc60889b474f01eae4c2af4b281a5218c4674a7539bf071bfca0d" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>SecondDerivative</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28aaa6b6cbb8010b02172412742c21ce2d7" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>Spline</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a2e0b992051247c4b596f0c76bf9b6872" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>SplineOM1</name></member>
      <member refid="classQuantLib_1_1CubicInterpolation_1a6897ea07ce6993b4df934091a3723d28a03364cf5474cc64cf64a6ad04a23e925" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>SplineOM2</name></member>
      <member refid="classQuantLib_1_1Interpolation_1a56cfc87cb5966ee36d72e5ffc7b1ff5c" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>update</name></member>
      <member refid="classQuantLib_1_1Interpolation_1a12711f5ec2e165fdb5104f3979855cc4" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>xMax</name></member>
      <member refid="classQuantLib_1_1Interpolation_1afc10233f6b565f10e291389631e5ea1f" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>xMin</name></member>
      <member refid="classQuantLib_1_1Extrapolator_1af0ca0156436ffbce159183198eb27e2e" prot="public" virt="virtual"><scope>QuantLib::CubicInterpolation</scope><name>~Extrapolator</name></member>
      <member refid="classQuantLib_1_1Interpolation_1a2b6d1246d8676354fb8f1efb03c9852f" prot="public" virt="non-virtual"><scope>QuantLib::CubicInterpolation</scope><name>~Interpolation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
