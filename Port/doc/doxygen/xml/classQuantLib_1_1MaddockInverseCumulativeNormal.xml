<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classQuantLib_1_1MaddockInverseCumulativeNormal" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MaddockInverseCumulativeNormal</compoundname>
    <includes refid="normaldistribution_8hpp" local="no">normaldistribution.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classQuantLib_1_1MaddockInverseCumulativeNormal_1a3cf5adf77f61b19bd61ada704e94048f" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::MaddockInverseCumulativeNormal::average_</definition>
        <argsstring></argsstring>
        <name>average_</name>
        <qualifiedname>QuantLib::MaddockInverseCumulativeNormal::average_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/normaldistribution.hpp" line="245" column="20" bodyfile="ql/math/distributions/normaldistribution.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQuantLib_1_1MaddockInverseCumulativeNormal_1a42b2a3ac362f95a9e414c7aa049f2975" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::MaddockInverseCumulativeNormal::sigma_</definition>
        <argsstring></argsstring>
        <name>sigma_</name>
        <qualifiedname>QuantLib::MaddockInverseCumulativeNormal::sigma_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/normaldistribution.hpp" line="245" column="29" bodyfile="ql/math/distributions/normaldistribution.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classQuantLib_1_1MaddockInverseCumulativeNormal_1acb581f2d8eef145eb16e90262c7900b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MaddockInverseCumulativeNormal::MaddockInverseCumulativeNormal</definition>
        <argsstring>(Real average=0.0, Real sigma=1.0)</argsstring>
        <name>MaddockInverseCumulativeNormal</name>
        <qualifiedname>QuantLib::MaddockInverseCumulativeNormal::MaddockInverseCumulativeNormal</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>average</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>sigma</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/normaldistribution.hpp" line="240" column="9" bodyfile="ql/math/distributions/normaldistribution.cpp" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classQuantLib_1_1MaddockInverseCumulativeNormal_1a3b0b17049e3532fbb2eb5e6f781b40eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MaddockInverseCumulativeNormal::operator()</definition>
        <argsstring>(Real x) const</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::MaddockInverseCumulativeNormal::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceQuantLib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/normaldistribution.hpp" line="242" column="14" bodyfile="ql/math/distributions/normaldistribution.cpp" bodystart="175" bodyend="178"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Maddock&apos;s Inverse cumulative normal distribution class. </para>
    </briefdescription>
    <detaileddescription>
<para>Given x between zero and one as the integral value of a gaussian normal distribution this class provides the value y such that formula here ...</para>
<para>From the boost documentation: These functions use a rational approximation devised by John Maddock to calculate an initial approximation to the result that is accurate to ~10^-19, then only if that has insufficient accuracy compared to the epsilon for type double, do we clean up the result using Halley iteration. </para>
    </detaileddescription>
    <location file="ql/math/distributions/normaldistribution.hpp" line="238" column="5" bodyfile="ql/math/distributions/normaldistribution.hpp" bodystart="238" bodyend="246"/>
    <listofallmembers>
      <member refid="classQuantLib_1_1MaddockInverseCumulativeNormal_1a3cf5adf77f61b19bd61ada704e94048f" prot="private" virt="non-virtual"><scope>QuantLib::MaddockInverseCumulativeNormal</scope><name>average_</name></member>
      <member refid="classQuantLib_1_1MaddockInverseCumulativeNormal_1acb581f2d8eef145eb16e90262c7900b5" prot="public" virt="non-virtual"><scope>QuantLib::MaddockInverseCumulativeNormal</scope><name>MaddockInverseCumulativeNormal</name></member>
      <member refid="classQuantLib_1_1MaddockInverseCumulativeNormal_1a3b0b17049e3532fbb2eb5e6f781b40eb" prot="public" virt="non-virtual"><scope>QuantLib::MaddockInverseCumulativeNormal</scope><name>operator()</name></member>
      <member refid="classQuantLib_1_1MaddockInverseCumulativeNormal_1a42b2a3ac362f95a9e414c7aa049f2975" prot="private" virt="non-virtual"><scope>QuantLib::MaddockInverseCumulativeNormal</scope><name>sigma_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
